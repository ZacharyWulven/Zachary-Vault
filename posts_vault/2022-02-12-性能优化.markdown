---
layout: post
title: ### -2022-02-12-性能优化.markdown
date: 2022-02-12 14:50:30.000000000 +09:00
tag: OC 底层原理 
---

### CPU 和 GPU
CPU 负责对象的创建和销毁，对象属性调整、布局计算、文本计算和排版，图片的格式转换和解码、图像绘制 (Core Graphics)
GPU 图形处理器，负责纹理的渲染
CPU(计算)->GPU(渲染)->帧缓存->视频控制器->屏幕
在 iOS 中是双缓冲机制，有前帧缓存、后帧缓存。

### 屏幕成像原理

{% highlight ruby %}
                  垂直同步信号（Vsync）
                        |------------------------------------→  水平同步信号（HSync）  
                        |------------------------------------→
                        |------------------------------------→
                        |------------------------------------→
                        |------------------------------------→
                        |------------------------------------→
                        ↓------------------------------------→  这一帧结束，准备下一个 Vsync 

{% endhighlight %}

### 卡顿产生的原因
显示一帧，先发一个垂直同步信号，然后一行一行发水平同步信号，直到水平同步信号打满这一帧。

垂直同步信号一来就意味着要将渲染好的数据绘制到屏幕上，如果垂直同步信号来了，但 GPU 没有渲染完，这时显示的还是上一页的数据，就会出现掉帧，即卡顿

{% highlight ruby %}
              CPU 计算 GPU 渲染    CPU    GPU     CPU        GPU
              -------→--------→|-------→---→  |-------→-----------|--→  
                               |              |                   |
                               |              |                   |
                               ↓              ↓                   ↓
                             Vsync           Vsync               Vsync
                            显示正常          显示正常            未渲染完，丢帧 卡顿，要等下一次 Vsync 到来
{% endhighlight %}

### 卡顿解决思路
* 尽可能减少 CPU GPU 资源的消耗
* 按照每秒 60FPS 刷帧率，每个 16ms 就会有一次 Vsync 信号

### CPU 优化
* 尽量使用轻量级的对象，比如用不到事件处理的地方可以考虑用 CALayer 取代 UIView
* 不要频繁的调整 UIView 相关属性，frame bounds transform 等属性
* 尽量提前计算好布局
* autolayout 比 frame 消耗更多 CPU
* 图片 size 最好跟 UIImageView size 一致 (因为图片的缩放非常耗费资源)
* 控制下线程的最大并发数量
* 尽量把耗时操作放到子线程
1. 文本处理(文本尺寸计算)
2. 图片的解码 (UIImage imageNamed:不能直接显示在屏幕需要解码，解码默认在主线程)，可以子线程 CGImageRef 解码。

### GPU优化
* 尽量减少视图数量和层级
* 尽量避免短时间内大量图片的显示
* GPU 能处理最大纹理尺寸是 4096x4096 一旦超过这个尺寸，就会占用 CPU 资源进行处理，所以纹理尽量不要超过这个尺寸
* 尽量减少透明视图，尽量设置 opaque 为 YES，透明会增加混合计算
* 尽量避免出现离屏渲染

### 离屏渲染
在 OpenGL 中 GPU 有两种模式，
* On-Screen Rendering 当前屏幕渲染，在当前用于显示的屏幕缓冲区渲染
* Off-Screen Rendering 离屏渲染，在当前屏幕缓存区外新开辟一个缓存区进行渲染操作，新开辟缓冲区数据不能直接显示在屏幕

#### 离屏渲染耗性能的原因
* 需要创建新的缓冲区
* 离屏渲染需要多次切换上下文环境，先从当前屏幕切换到离屏，等到离屏渲染结束后，将离屏缓冲区渲染结构显示到屏幕
，又需要将上下文环境从离屏切换到当前屏幕

#### 哪些操作会触发离屏渲染
* 光栅化，layer.shouldRasterize = YES
* 遮罩，layer.mask
* 圆角，同时设置 layer.masksToBounds = YES, layer.cornerRadius > 0 可通过 CoreGraphic 自己画圆角
* 阴影，layer.shadowXXX，如果设置了 layer.shadowPath 就不会产生离屏渲染


#### 卡顿检测思路
可以添加 Observer 到主线程 RunLoop，通过监听 RunLoop 状态切换的耗时，以达到检测卡顿目的。监听 RunLoop 结束休眠后到处理 soure0 的时间。

{% highlight ruby %}
监控卡顿参考 https://github.com/UIControl/LXDAppFluecyMonitor
{% endhighlight %}

### 耗电优化
* 少用定时器
* 优化I/O操作
1. 尽量不要频繁写入小数据，最好批量一次性写入
2. 读取大量重要数据时，考虑用 dispatch_io 其提供了基于GCD异步操作文件 I/O 的API。dispatch_io 系统会优化磁盘访问
3. 数据量比较大的建议用数据库，比如 SQLite、CoreData
* 网络优化
1. 减少或压缩网络数据
2. 多次请求结果可以考虑缓存
3. 网络不可用，不要尝试执行网络请求
4. 设置合适的超时时间
 
* 定位优化
1. 不是导航 app 定位完毕就关闭定位
2. 尽量降低定位精度，需要后台定位时设置 pauseLocationUpdatesAutomatically = YES，如果用户不太移动的时候系统会自动暂停位置更新


### APP 启动优化
打印启动时间
{% highlight ruby %}
Xcode->Edit Scheme->Run->Arguments 里的 Environment Variables 添加 DYLD_PRINT_STATISTICS_DETAILS
{% endhighlight %}

#### APP 启动三大阶段
* dyld，apple 的动态链接器，可以用来装载 Mach-O 文件(可执行文件，动态库等)。启动 app 时候 dyld 所做的事情有
1. 装载 app 可执行文件，同时会递归加载所有依赖的动态库
2. 当 dyld 把可执行文件、动态库都装载完毕后，会通知 runtime 进行下一步处理

* runtime 处理
1. 调用 map_images 进行可执行文件内容解析和处理
2. load_images 中调用 call_load_methods 调用所有 class 和分类的 +load 方法
3. 进行 objc 结构初始化（注册 objc 类，初始化类对象）
4. 调用 C++ 静态初始化器和 __attribute__((constructor)) 修饰的函数
5. 到此为止，可执行文件和动态库中所有符号 (Class, Protocol, Selector, IMP) 都已经按格式成功加载到内存中，被 runtime 管理
* main 函数
1. UIApplicationMain 函数调用

#### 小结
APP 启动由 dyld 主导，将可执行文件加载到内存，顺便加载所有依赖的动态库。
并由 runtime 负责加载成 objc 定义结构。
所有初始化工作结束后，dyld 就会调用 main 函数。
接下来就是 UIApplicationMain 函数调用。APPDelegate 的 application:didFinishLaunchingWithOptions: 方法

#### 优化
* dyld 阶段
1. 减少动态库，合并一些动态库（定期清理）
2. 减少 objc 类/分类的数量，减少 selector 数量
3. 减少 C++ 虚函数，虚函数会维护一张虚表
4. Swift 尽量使用 struct
* runtime 阶段
1. 用 initialize 方法（但要注意分类覆盖问题）和 dispatch_once 取代所有 __attrbute__((constructor))、C++静态构造器、Objc 的 load
* main 阶段
1. 不影响用户体验前提，尽可能将一些操作延迟，不要全部都放到 application:didFinishLaunchingWithOptions: 方法中

### LinkMap
生成 LinkMap 文件，可以查看可执行文件的具体组成。

Xcode->Build Settings->Write Link Map File 设置为 YES

{% highlight ruby %}
第三方工具：https://github.com/huanxsd/LinkMap
{% endhighlight %}
