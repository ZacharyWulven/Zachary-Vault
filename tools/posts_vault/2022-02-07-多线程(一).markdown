---
layout: post
title: ### -2022-02-07-多线程(一).markdown
date: 2022-02-07 22:00:30.000000000 +09:00
tag: OC 底层原理 多线程
---

### iOS 多线程方案
{% highlight ruby %}
方案                                 简介                                          语言   线程生命周期 使用频率
pthread    | 通用的多线程 API，适用于 Unix/Linux/Windows 等跨平台、可移植、使用难度大   | C  | 程序员管理 | 几乎不用

NSThread   | 面向对象，简单易用                                                    | OC | 程序员管理 | 偶尔用

GCD        | 旨在替换 NSThread 等技术，充分利用多核                                  | C  | 自动管理  | 经常用

NSOperation| 基于GCD，比GCD多了些更简单使用功能，使用面向对象                          | OC | 自动管理 | 经常用
   
NSThread, GCD, NSOperation 底层都是用的 pthread
{% endhighlight %}




### GCD 队列分为两个类型
1. 并发队列 Concurrent Dispatch Queue
* 可以让多个任务并发同时进行
* 并发功能只有在异步 dispatch_async 函数下才有效

2. 串行队列 Serial Dispatch Queue
* 让任务一个接一个的执行
   
{% highlight ruby %}
GCD create 开始创建对象不用释放，CF create 需要自己释放。
{% endhighlight %}

### 同步和异步区别 
同步异步主要影响 能不能开启新的线程 (sync 和 async 决定能否开启新的线程，即决定在那个线程执行)。

1. 同步：在当前线程中执行任务，不具备开启新线程的能力
2. 异步：在新的线程中执行任务，具备开启新线程的能力



### 串行和并发区别
主要影响任务执行方式, 不能决定在那个线程执行。
1. 并发：多个任务并发同时执行
2. 串行：一个任务执行完毕后 再执行下一个任务
   
{% highlight ruby %}
          并发队列        |     手动创建的串行队列          | 主线程队列（一个特殊的串行队列）
同步   不开新线程，串行执行       不开新线程，串行执行              不开新线程，串行执行
异步   有开新线程，并发执行       有开新线程，串行执行              不开新线程，串行执行
{% endhighlight %}

主队列是特殊的串行队列。

{% highlight ruby %}
使用 dispatch_sync 函数往当前串行队列中添加任务，会产生死锁。
dispatch_sync 立马在当前线程执行任务，执行完任务才能再往后执行。
{% endhighlight %}

### 死锁的例子
案例1
{% highlight ruby %}
- (void)__test1 {
  // 死锁
  // 主队列在执行 __test1 执行完 __test1 要打印 执行任务3
  // 执行任务2 要马上执行，但执行任务 2 需要主队列里的 __test1 执行完才能执行，所以产生死锁
  
  NSLog(@"执行任务1");
  dispatch_queue_t queue = dispatch_get_main_queue();
  dispatch_sync(queue, ^{
    NSLog(@"执行任务2");
  });
  NSLog(@"执行任务3");
}
{% endhighlight %}

案例2
{% highlight ruby %}

- (void)__test2 {
  // sync 到同一个串行队列里会死锁
  
  dispatch_queue_t queue = dispatch_queue_create("myqueues", DISPATCH_QUEUE_SERIAL);
  
  NSLog(@"执行任务1");

  dispatch_async(queue, ^{
    
    NSLog(@"执行任务2");

    dispatch_sync(queue, ^{
      NSLog(@"执行任务3");

    });
    NSLog(@"执行任务4");
    
  });
  NSLog(@"执行任务5");
}
{% endhighlight %}

### performSelector:withObject:afterDelay
{% highlight ruby %}

- (void)__test3 {
  dispatch_queue_t queue1 = dispatch_get_global_queue(0, 0);
  dispatch_async(queue1, ^{
    NSLog(@"执行任务1");
    // 底层是 objc_msgSend 
    //[self performSelector:@selector(__Test) withObject:nil];

    //底层是 runloop 定义的 用到了 timer，本质是添加 timer 到 runloop 里, 子线程不自动创建 runloop
    [self performSelector:@selector(__Test) withObject:nil afterDelay:.0];
    NSLog(@"执行任务3");
    
       //这个代码可以去掉， 因为 performSelector:withObject:afterDelay 已经向 RunLoop 里添加了 timer
    //[[NSRunLoop currentRunLoop] addPort:[[NSPort alloc] init] forMode:NSDefaultRunLoopMode];
    
    // 添加 RunLoop 后 performSelector:withObject:afterDelay 可调用成功
    [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];
    
  });
}
{% endhighlight %}
上边代码 performSelector:withObject 可以调用成功，因为 performSelector:withObject 底层是走 msgSend。

performSelector:withObject:afterDelay 不会调用因为 dispatch_get_global_queue 线程默认没有 RunLoop。需要启动 RunLoop 后才可调用成功。

虽然 Foundation 有些源码看不了，但是可以参考 GNUstep（GNU 项目之一，它把 Foundation 实现了一遍），有很高的参考价值。

{% highlight ruby %}
GNUstep 代码地址 http://www.gnustep.org/resources/downloads.php
{% endhighlight %}

GNUstep RunLoop 实现可知，实现就是向 RunLoop 添加 Timer
{% highlight ruby %}
- (void) performSelector: (SEL)aSelector
              withObject: (id)argument
              afterDelay: (NSTimeInterval)seconds {
  NSRunLoop    *loop = [NSRunLoop currentRunLoop];
  GSTimedPerformer  *item;

  item = [[GSTimedPerformer alloc] initWithSelector: aSelector
               target: self
             argument: argument
                delay: seconds];
  [[loop _timedPerformers] addObject: item];
  RELEASE(item);
  [loop addTimer: item->timer forMode: NSDefaultRunLoopMode];
}

- (id) initWithSelector: (SEL)aSelector
                 target: (id)aTarget
               argument: (id)anArgument
                  delay: (NSTimeInterval)delay {
  self = [super init];
  if (self != nil)
    {
      selector = aSelector;
      target = RETAIN(aTarget);
      argument = RETAIN(anArgument);
      timer = [[NSTimer allocWithZone: NSDefaultMallocZone()]
    initWithFireDate: nil
    interval: delay
      target: self
    selector: @selector(fire)
    userInfo: nil
     repeats: NO];
    }
  return self;
}
{% endhighlight %}


#### performSelector

{% highlight ruby %}
- (void)__test4 {
  // 
  NSThread *thread = [[NSThread alloc] initWithBlock:^{
    NSLog(@"1");
    // 添加 runloop 后可以解决问题
<!--    [[NSRunLoop currentRunLoop] addPort:[[NSPort alloc] init] forMode:NSDefaultRunLoopMode];-->
<!--    [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];-->
  }];
  [thread start];
  
  [self performSelector:@selector(__interviewTest)
               onThread:thread
             withObject:nil
          waitUntilDone:YES];
}
{% endhighlight %}
可以打印 1 但会 crash 因为线程在执行 thread start 后线程已经退出了，performSelector 不能再访问 thread。
