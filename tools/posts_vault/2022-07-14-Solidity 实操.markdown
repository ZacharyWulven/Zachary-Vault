---
layout: post
title: Solidity 实操
date: 2022-07-14 16:45:30.000000000 +09:00
tag: 区块链
---

## 0x01 智能合约设计方式
1. 角色分析
* 调用时候都有哪些人调用
2. 角色功能分析

### 以拍卖合约为例
角色分析
1. 平台方
* 创建拍卖
* 结束拍卖
2. 买方
* 竞拍（价高者得）
3. 卖方
* 等待结果

## 0x02 ERC 标准 
ERC 之于以太坊相当于 RFC 之于互联网。可见 ERC 相当重要。

{% highlight ruby %}
https://eips.ethereum.org/erc
{% endhighlight %}

比较重要的例如 ERC-20，允许项目方可以在以太坊发行自己的代币并发起众筹 ICO，在我国 ICO 是违法的😂🤣😅，
但 ICO 推动了以太坊的发展。由于产生了一些割韭菜的案例，所以我国 2017 年宣布其为违法。


## ERC-20 同质化 Token 标准
1. function name() public view returns (string) 代币名称，可选
2. function symbol() public view returns (string) 代币符号，可选
3. function decimals() public view returns (uint8) 
* 可选，小数点后多少位，实现表示代币可分割，写 8 代表小数点后 8 位，即一个数乘以 10^8 等于最终的数量
4. function totalSupply() public view returns (uint256) 总发行量
5. function balanceOf(address _owner) public view returns (uint256 balance)
* 这个智能合约里边 Token 的余额
6. function transfer(address _to, uint256 _value) public returns (bool success)
* 谁转的即 msg.sender
* 针对 Token 的转账
7. function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)
* 授权：from 授权给 to 能够转多少
8. function approve(address _spender, uint256 _value) public returns (bool success)
* 授权给 _spender，与 transferFrom 是一对，只有 approve 后才能 transferFrom
9. function allowance(address _owner, address _spender) public view returns (uint256 remaining)
* 授权额度的查询，授权额度消耗了就应该清零


IERC20.sol
{% highlight ruby %}
// SPDX-License-Identifier:Apache-2.0
pragma solidity^0.8.0;

interface IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);

    function totalSupply() external view returns (uint256);
    function balanceOf(address _owner) external view returns (uint256 balance);
    function transfer(address _to, uint256 _value) external returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);
    function approve(address _spender, uint256 _value) external returns (bool success);
    function allowance(address _owner, address _spender) external view returns (uint256 remaining);
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);   

}
{% endhighlight %}

mytoken.sol
{% highlight ruby %}

// SPDX-License-Identifier:Apache-2.0
pragma solidity^0.8.0;

import "./17-IERC-20.sol";
import "./SafeMath.sol";

/*
    解决 token 发行的问题，通常两个方法
    1 设置 owner 管理员，通过管理员账户发钱
    2 提供 mint 函数

*/

contract mytoken is IERC20 {
    // 针对所有的 uint256 类型使用 SafeMath 库
    using SafeMath for uint256;

    // 定义 name
    string tokenName;
    string tokenSymbol;
    uint256 tokenTotalSupply;

    address owner;  // 管理员地址，解决 token 发行的问题

    // user's balance
    mapping(address=>uint256) _balances;
    // A->B 100, A 授权给 B 100
    // A->C 200, A 授权给 C 100
    mapping(address=>mapping(address=>uint256)) allows;


    constructor(string memory n, string memory s) public {
        tokenName = n;
        tokenSymbol = s;
        owner = msg.sender;
    }


    function mint(address _to, uint256 _value) external returns (bool success) {
        require(_value > 0, "_value must > 0");
        require(address(0) != _to, "to must a valid address");
        require(msg.sender == owner, "only owner can do it!");

        // _balances[_to] += _value;  // 这里可能会溢出
        // use SafeMath 库 进行加法
        _balances[_to] = _balances[_to].add(_value);

        tokenTotalSupply = tokenTotalSupply.add(_value);
        // 挖矿通知，from 的地址是 0
        emit Transfer(address(0), _to, _value);
        success = true; 

    }

    // implement IERC20 interface
    function name() override external view returns (string memory) {
        return tokenName;
    }

    function symbol() override external view returns (string memory) {
        return tokenSymbol;
    }

    function totalSupply() override external view returns (uint256) {
        return tokenTotalSupply;
    }

    function balanceOf(address _owner) override external view returns (uint256 balance) {
        return _balances[_owner];
    }
    function transfer(address _to, uint256 _value) override external returns (bool success) {
        require(_value > 0, "_value must > 0");
        require(address(0) != _to, "to must a valid address");
        require(_balances[msg.sender] >= _value, "user's balance must enough");

        _balances[msg.sender]  = _balances[msg.sender].sub(_value);
        _balances[_to] =  _balances[_to].add(_value);

        // 事件通知
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    // 授权转账，动用 _from 的钱, msg.sender 就是 _spender
    function transferFrom(address _from, address _to, uint256 _value) override external returns (bool success) {
        success = false;
        require(_value > 0, "_value must > 0");
        require(address(0) != _to, "to must a valid address");
        require(_balances[_from] >= _value, "user's balance must enough");

        _balances[_from] = _balances[_from].sub(_value);
        _balances[_to] = _balances[_to].add(_value);
        allows[_from][msg.sender] = allows[_from][msg.sender].sub(_value);

        emit Transfer(_from, _to, _value);
        success = true;

    }

    function approve(address _spender, uint256 _value) override external returns (bool success) {
        success = false;
        require(_value > 0, "_value must > 0");
        require(address(0) != _spender, "to must a valid address");
        require(_balances[msg.sender] >= _value, "user's balance must enough");

        allows[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        success = true;
    //    return

    }

    function allowance(address _owner, address _spender) override external view returns (uint256 remaining) {
        return allows[_owner][_spender];
    }
    
    // event 直接继承
    // event Transfer(address indexed _from, address indexed _to, uint256 _value);
    // event Approval(address indexed _owner, address indexed _spender, uint256 _value);   

}

{% endhighlight %}


## ERC-721 非同质化 Token 标准
1. ERC-721 必须包含 ERC-165 标准，ERC-165用于解释说明是否把接口该实现的都实现了
2. ApprovalForAll 授权管理全部 token
3. balanceOf 实际意义不大，即查询有多少个 token
4. ownerOf 查询 tokenId 的归属
5. safeTransferFrom 安全转账
* to 如果是普通地址，正常转账
* to 如果是合约地址，则 to 这个合约必须实现 onERC721Received(address,address,uint256,bytes) 方法
6. transferFrom 交易逻辑与 safeTransferFrom 一样，只不过 safeTransferFrom 判断了 to 的地址
7. function setApprovalForAll(address _operator, bool _approved) external;
* _approved 为 true 表示授权，为 false 表示收回授权
8. getApproved 查询授权给谁
9. function isApprovedForAll(address _owner, address _operator) external view returns (bool);
* 查询 _owner 是不是全权委托给 _operator

### interface ERC165
interfaceID 即一个 interface 里所有函数取完“函数前 4 个字节，
即函数签名”（类似 bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))），
每个函数都有一个函数签名，将这个 interface 里所有函数签名进行亦或，得到这个 interface 的 interfaceID。

ERC165 实际是实现 function supportsInterface(bytes4 interfaceID) external view returns (bool);
进行 interfaceID 的注册


Tips
{% highlight ruby %}
操作钱时候要注意地址是否是 0，不要把钱转进黑洞
require(msg.sender != address(0), "address must be not 0");
{% endhighlight %}


### 参考链接
{% highlight ruby %}
https://eips.ethereum.org/EIPS/eip-20
https://docs.openzeppelin.com/
{% endhighlight %}

