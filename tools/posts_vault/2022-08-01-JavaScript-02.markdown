---
layout: post
title: JavaScript-02
date: 2022-08-01 16:45:30.000000000 +09:00
tag: javascript
---

## 0x01 表达式与操作符

### 1 主表达式
主表达式包括常量或字面量值、某些语言关键字和变量引用

### 2 对象和数组初始化程序
* 数组初始化程序是一个包含在方括号内用逗号分隔的表达式列表

{% highlight ruby %}
[1+2， 3+4] 两个元素的数组，一个元素时 3 一个是 7

let list = [1,,,5] 数组包含 4 个元素，其中 3 个是未定义的

Note
数组初始化程序最后一个表达式后可再跟一个逗号，而且这个逗号不会创建未定义的元素，
但通过索引访问最后一个元素一定会求值为 undefined
let list = [1,,,,5,];
console.log(list[-1]); undefined
list.length 是 5 而不是 6
{% endhighlight %}

* 对象初始化程序，与数组类型把 [] 换成 {}
{% highlight ruby %}
let p = {x: 2.3, y: 1.2}; 有两个属性的对象
let q = {};        没有属性的空对象

嵌套
let rectangle = {
    upperLeft:{x:2, y:2},
    lowerRight:{x: 4, y:5}
}
{% endhighlight %}

### 3 函数定义表达式
函数定义表达式也是“函数字面量”
{% highlight ruby %}
匿名函数表达式
let square = function(x) { return x * x; };

也可以定义名称，但一般不这么用，这叫命名函数表达式
let test = function abc() {
    console.log(test.abc);
}
{% endhighlight %}

### 4 属性访问表达式
* expression.identifier
* expression[expression]
{% highlight ruby %}
let o = {x: 1, y:{z: 3}};
let a = [o, 4, [5,6]];
console.log(o.x);
console.log(o["x"]);
console.log(a[1]);
    
任何情况，如果指定名字的属性不存在，则属性访问表达式值是 undefined

console.log(o["z"]); // undefined

{% endhighlight %}

### 5 调用表达式
* 位于 . 或 [] 前边的表达式先求值，如果求值结果是 null 或 undefined，则表达式会抛出 TypeError，因为它俩是 js 中不能有属性的两个值
* 如果属性名包含空格或标点字符，或数值，则必须使用方括号语法
* 方括号语法也可以用来访问非静态属性名，即属性本身是计算结果

### 条件式属性
* ES2020 增加了两个新的属性访问表达式
* expression ? .identifier
* expression ?.[expression]
{% highlight ruby %}
Note
JavaScript 中 null 和 undefined 是唯一两个没有属性的值
如果 . 或 [] 左边表达式为 null 或 undefined，会报 TypeError
可以使用 ?. 或 ?.[] 语法防止这种错误（类似 swift Optional 解包）

表达式 a?.b 
如果 a 是 null 或 undefined，那么整个表达式值为 undefined，不会尝试访问属性 b
如果 a 是其他值，则 a?.b 求值为 a.b，如果 a 没有属性 b 那么结果还是 undefined
这也称为 可选链接

let a = {b: null};
console.log(a.b?.c.d); // undefined
console.log(a.b?.[c][d]); // undefined，也可以使用 ?.[] 而不是 []

另一个例子
let b;
let idx = 0;
try {
    b[idx++]; // 抛出 TypeError
} catch(e) {
    console.log("idx is", idx); // 抛出 TypeError 前发生了递增
}
b?.[idx++];
idx; // => 1 因为 ?.[] 短路所以没有发生递增
b[idx++];
{% endhighlight %}

### 6 调用表达式
* 如果函数使用了 return 语句返回一个值，则该值就是调用表达式的值，否则调用表达式的值是 undefined

### 条件式调用 ?.() (类似 swift 可选链)
* ES2020 中 可以使用 ?.() 而非 () 来调用函数
* 正常如果使用 () 调用函数，如果左边表达式的值是 null 或 undefined 或任何其他非函数数值，都会抛出异常，
而是由 ?.() 不会抛出异常，结果为 undefined
* ?.() 只检查左侧的值是不是 null 或 undefined 不会检查是否是函数
* ?.() 有短路规则：调用 ?.() 时如果左边是 null 或 undefined，则右边 () 内不会求解

{% highlight ruby %}
o.m() 常规属性访问 常规调用，o 必须是一个对象 && 有一个 m 属性 && m 是函数
o?.m() 条件式属性访问 常规调用，o 是 null 或 undefined 则表达式值为 undefined；如果 o 是其他值则必须有 m 函数
o.m?.() 常规属性访问 条件式调用，o 必须不是 null 或 undefined 如果没有 m 则表达式值为 undefined
{% endhighlight %}

### 创建对象表达式
* new Point(1,2)
* new Date 没有参数则括号可以省略

### 7 操作符（其他的可以看书 4.7）
* \+ 表示转成数值
* typeof 转成 string
* instanceof 转为 true
* js 中每个值要么是“真值”或“假值”，因此期待布尔操作数的操作符可以用于任何类型的操作数
* lval 即 lvalue 左值，意思是一个可以合法的出现在赋值表达式左侧的表达式；变量、对象属性、数组元素都是左值

### 操作符副作用
* ++ -- 有副作用，因为会执行隐式赋值
* delete 有副作用，因为删除属性类似于给属性赋值 undefined
* 函数调用和对象创建表达式是否有副效应取决于函数或构造函数体内是否使用了又副效应的操作符


### 操作符优先级
* 属性访问和调用表达式的优先级高于运算操作符
* 赋值的优先级最低

### 8 算术表达式 
* 乘、除、模、幂、加、减
* 除加外的 5 个操作符都会对操作数求值，必要时转换为数值，无法转换为数值的转为 NaN，NaN 的操作结果是 NaN

* 优先级：幂 > 乘、除、模 > 加、减
* Note：幂具有右结合性， 2 ** 2 ** 3 即 2 ** 8 而不是 4 ** 3

{% highlight ruby %}
/
在 js 中所有数值都是浮点数，so 所有除法结果都是浮点数，5 / 2 = 2.5 
被 0 除是正无穷或负无穷，0/0 = NaN
{% endhighlight %}

* Note：% 结果的符号与第一个操作数相同，% 也可用于浮点数， 6.5 % 2.1 = 0.2

### 二元 + 操作符
* 用于数值和字符串拼接
* 有一个是字符串那就是字符串拼接
* 操作数是对象的话，先转为原始值（通过 valueOf 函数，如没有 valueOf 使用 toString 函数），如果原始值是字符串另一个也转为字符串，
否则都转为数值进行加法
{% highlight ruby %}
Note
2 + null = 2，null 转为 0
2 + undefined = NaN，undefined 转为 NaN
{% endhighlight %}

### 一元操作符 （+、-、++、--）始终转为数值
* 一元操作符 全部具有高优先级和右结合性
* 一元 + 将其操作数转为数值后 NaN，不能用于 BigInt
* 一元 + 将其操作数转为数值然后改变其符号
* ++ 的操作数必须是左值，将操作数转为数值，再加 1，然后将递增后的值再赋值给操作数
* ++ 不会执行字符串拼接，始终将操作数转为数值
{% highlight ruby %}
    let i = 1; j = ++i; // i j 都是 2
    let n = 1; m = n++; // n = 2, m = 1
{% endhighlight %}

* -- 的操作数必须是左值，将操作数转为数值，减 1 ，然后把值再赋值给操作数

### 位操作符
* 位操作符期待整数操作符，而且将它们当成 32 位整数而非 64 为浮点数。必要时转换为数值，然后再将得到的数值强转为 32 位整数，
即丢弃小数部分和 32 位以外的部分。
* 移位操作符要求右侧操作数介于 0~31 之间，把操作数转为无符号 32 位后，会丢弃 5 位以外的位，得到一个近似相等的值。
* 除了 >>> 外所有的位操作符都可用于常规数据和 BigInt
* 按位非 ~ 即反转操作数所有位，js 中有符号的 ~ 即对一个数修改符号并减 1
* 左移 \<\< 移动位数在 0~31 之间，左移一位等于乘以 2
* 有符号右移 >> 如果是高位是 1 补 1，是 0 补 0 
* 零填充右移 >>> 无论符号始终补 0 

### 9 关系表达式
关系表达式始终求值为布尔值
* == 与 === 都接收任意类型的操作数
* 严格等于或严格不等于 === 与 !== 严格判断
* 等于或不等于 == 与 != 判断宽松一些
{% highlight ruby %}
判断相等，应该用 === 与 !== 

null == undefined // true
null === undefined // false
{% endhighlight %}
* js 中对象是按引用比较的

* 严格相等 === 
1. 如果两个值类型不同，则不相等
2. 如果两个值都是 null 或都是 undefined，则相等
3. 如果两个值都是 true 或 false ，则相等
4. 如果一个或两个值是 NaN，则不相等；
5. 如果两个值都是数值并且值相同，则相等
6. 如果俩个值都是字符串，并且相同位置包含完全相同 16 为值 则它们相等
7. 如果俩值引用同一个对象 则相等

{% highlight ruby %}
若要检测 x 是不是 NaN，则使用 x !== x 或 isNaN 函数
{% endhighlight %}

* 基于类型转换的相等 == 
1. 如果两个值类型相同，则按照规则测试它们的值是否相等，如果严格相等就相等
2. 如果两个值类型不同，会类型转换
  2.1 如果一个值是 null 另一个是 undefined 则相等
2.2 一个值是数值一个是字符串，把字符串转换为数值，再比较值
2.3 一个值 true 转为 1，false 转为 0 再比较是否相等
2.4 一个值是对象另一个是数值或字符串，先把对象转成原始值再比较

### 比较操作符
* 小于，大于，小于等于，大于等于 其操作数可能是任何类型，但比较只针对数值和字符串，不是数值或字符串会转为相应类型
1. 如果操作数是对象，则先按照 valueOf 或 toString 函数转为原始值，再进行比较
2. 0 等于 -0
3. Infinity 大于它本身所有值
4. -Infinity 小于它本身所有值
5. Note 如果有一个数是 NaN 则返回 false


{% highlight ruby %}
Note
js 的字符串是 16 位整数值的序列，而字符串的比较就是比较两个字符串的数值序列
字符串比较区分大小写，小写都 > 大写

Note：+ 操作符偏向字符串，只有有一个操作数是字符串就进行字符串拼接
Note：比较操作符偏向数值，只有两个都是字符串时才按字符串处理
"11" < "3" true 字符串比较
"11" < 3  false 数值比较
{% endhighlight %}

### Note： in 操作符 （类似 oc can response selector）
* in 操作符期待左操作数是字符串、符号、可以传为字符串的值
* 期待右侧是对象
* 如果左侧的值是右侧对象的属性名，则返回 true
{% highlight ruby %}
    let point = {x: 1, y: 2};
    "x" in point // true
    "z" in point // false
    "toString" in point; // true 对象继承了 toString 方法
    
        
    let data = [7,8,9];
    "0" in data;
    1 in data;
    console.log("0" in data); // true 数组有元素索引 0
    console.log(1 in data);   // 索引 1 在 data 中
    console.log(3 in data);
    console.log(7 in data);
{% endhighlight %}

### Note：instanceof 操作符 （类似 oc  isKindOfClass）
* 左侧是对象，右侧是对象类的标识
* 如果 左侧不是对象 则返回 false
* 如果 右侧不是对象类，则会抛出 TypeError

{% highlight ruby %}
    let d = new Date();
    console.log(d instanceof Date); // true
    console.log(d instanceof Object); // true
    console.log(d instanceof Number); // false
    console.log(d instanceof Array); // false
{% endhighlight %}


{% highlight ruby %}
Note 所有对象都是 Object 的实例。
{% endhighlight %}

* 要理解 instanceof 原理必须要理解”原型链“，”原型链“是 js 继承机制，为了对 o instanceof f 求值，js 会求值 f.prototype
然后在 o 的原型链上查找这个值，如果找到了 则 o 是 f 或 f 子类的实例，返回 true，否则 f.prototype 不是 o 原型链上的一个值，
则不是 f 实例，返回 false

### 逻辑表达式 &&
* && 不要求操作数是布尔值
* 假性值包括：false、null、undefined、0、-0、NaN、""
* 不是假性值的其他值都是真性值
* && 并不总返回 true 或 false
* 有短路操作 (x === 1) && log()
{% highlight ruby %}
Note 当表达式为真就执行下一个，为假就返回当前表达式的值，即 && 可能会对其右侧操作数求值
{% endhighlight %}

{% highlight ruby %}
    let o = {x: 2};
    console.log(o && o.x); // 返回 o.x 的值 即 2
{% endhighlight %}

### 逻辑表达式 ||
* 也并不总返回 true 或 false

{% highlight ruby %}
Note 当表达式为真就返回当前表达式的值
{% endhighlight %}

{% highlight ruby %}
    let o = {x: 2};
    console.log(0 || o.x);

{% endhighlight %}

### 逻辑表达式 !
* 将操作数转为布尔值，然后再得到反转的布尔值
* ! 始终返回布尔值
{% highlight ruby %}
Note 如果想得到 x 的布尔值，取两次反即可，即 !!x

!(p && q) === (!p || !q) // true p 和 q 可以是任何值
!(p || q) === (!p && !q) // true p 和 q 可以是任何值
{% endhighlight %}

### 10 赋值表达式
{% highlight ruby %}
赋值表达式的值是右侧操作数的值
{% endhighlight %}
* 有右结合性
{% highlight ruby %}
一般 a op= b 等于 a = a op b，但下边例子要注意

    let i = 0;
    let data = [1,2,3,4,5,6,7];
    data[i++] *= 2; // i = 1, index[0] = 2 ，i 被求值一次
    console.log("data is", data, "i is", i);

    data[i++] = data[i++] * 2; // i = 2, index[0] = 4 ,i 被求值两次
    console.log("data is", data, "i is", i);
{% endhighlight %}

### 11 缺值合并 ?? (nullish coalescing)（或叫先定义）
* ?? 是 ES2020 定义的
* 先求值 ?? 左边的操作数如果不是 null 或 undefined 就返回该值，否则返回右边操作数的值
* ?? 是短路的，只在第一个操作数为 null 或 undefined 时才求值第二个操作数
* let max = maxWidth ?? perferences.maxWidth ?? 500，这样 maxWidth = 0 也是有效值

### typeof 操作符
* 可以接受任意类型
* 返回一个字符串，表示操作数的类型
{% highlight ruby %}
typeof undefined 返回 "undefined"
typeof null 返回 "object"   这个是个特例
typeof true or false 返回 "boolean"
typeof 任意数值或 NaN 返回 "number"
typeof 任意字符串 返回 "string"
typeof 任意符号 返回 "symbol"
typeof 任意 BigInt 返回 "bigint"
typeof 任意函数 返回 "function" ，js 中函数也是一种对象
typeof 任意非函数对象 返回 "object"

两种写法都可以
    typeof null
    typeof(null)
{% endhighlight %}

### delete 一元操作符
* 尝试删除其操作数指定的对象属性或数值元素
* 被删除的属性或元素会被设置为 undefined
* delete 期待左值，如果操作数不是左值则什么也不做，且返回 true，否则尝试删除左值，删除成功返回 true
* 但并非所有属性都可以删除，不可配置属性就无法删除
{% highlight ruby %}

    let o = {x: 2, y: 4};
    delete o.x; // 删除属性 x 
    "x" in o;   // false 属性不存在

    let a  = [1,2,3];
    delete a[2];
    2 in a; // false 数组 index = 2 元素不存在
    a.length; // 3 Note 数组长度不变
删除数组元素有个坑，即 数组长度不变
{% endhighlight %}

### await 操作符
* ES2017 新增，用于 js 中异步编程
* await 期待一个 Promise 对象（表示异步计算）作为其唯一操作数，代码看起来像是等待异步计算完成（但实际不会阻塞主线程，不会妨碍其他线程）
* await 只能出现在通过 async 关键字声明为异步函数中

### void 操作符
* 一元操作符，操作数可以是任意类型
* 它求值自己的操作数然后丢弃这个值并返回 undefined
* 由于操作数会被丢弃只有在操作数有副作用时候才有必要使用 void
{% highlight ruby %}
用法比如函数声明
    let counter = 0;
    const increment = () => void counter++;
    increment();
    console.log(counter); // 1
{% endhighlight %}

### 逗号操作符
* 二元操作符，操作数可以是任意类型
* 会求值其左操作数，求值其右操作数，然后返回右操作数的值
{% highlight ruby %}
常见场景是 for 循环
    for(let i = 0, j = 10; i < j; i++, j--) {
        console.log("i=%d, j=%d", i, j);
    }
{% endhighlight %}

### 小结
* 任何表达式都可以求值为一个 js 的值
* 表达式除了产生一个值也可以有副作用，比如变量赋值
* \+ 表达式可以用于数值加法，也可用于拼接字符串
* && 与 \|\| 具有短路行为




