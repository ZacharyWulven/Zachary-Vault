---
layout: post
title: Move-02-进阶
date: 2022-09-02 16:45:30.000000000 +09:00
tag: 区块链
---

## 0x01 进阶计划
* 类型能力
* 所有权
* 结构体
* 面向资源编程
* 合约项目实战

## 0x02 类型能力
Move 的类型有几种能力
* Copy 可以被复制，Move 原生数据类型具备这个能力
* Drop 可以被丢弃，Move 原生数据类型具备这个能力
* Key 可以作为键值
* Store 可以存储到全局状态，Move 原生数据类型具备这个能力

{% highlight ruby %}
Move 原生数据类型（整型、布尔、Address）天生具备 Copy、Drop、Store 能力
{% endhighlight %}

## 0x03 自定义结构
{% highlight ruby %}
语法
Name 要首字母大写
struct  {Name} {
  FIELD1: TYPE1,
  FIELD2: TYPE2,
  ...
}
规则：
1 字段可以是 0~65535
2 类型可以是原生类型以及自定义类型，不允许类型递归
{% endhighlight %}

### Student
{% highlight ruby %}
module 也可以这么写

address Viper {
    module Student {
        struct Empty {}

        // define Student struct
        struct Student has drop {
            id: u64,
            age: u8,
            sex: bool,
        }

        // constructor 构造函数
        public fun new_student(_id: u64, _age: u8, _sex: bool): Student {
            Student{
                id: _id,
                age: _age,
                sex: _sex,
            }
        }     
        
        如果参数名与 struct 的字段名称一样可以直接赋值
        public fun new_student2(id: u64, age: u8, sex: bool): Student {
            Student{
                id,
                age,
                sex,
            }
        }         

        public fun get_id(s: Student): u64 {
            // need ability of drop
            // define struct Student has drop
            s.id
        }

    }
}
{% endhighlight %}

### 结构体泛型
{% highlight ruby %}
        struct User<T1, T2> has drop {
            id: T1,
            age: T2,
        }

        public fun new_user<T1, T2>(id: T1, age: T2): User<T1, T2> {
            User{ id, age,}
        }


            // can automatic infer
        let user = Student::new_user(1002, 30);

        let user1 = Student::new_user<u64, u8>(1003, 40);

        Debug::print(&user1);
{% endhighlight %}


## 0x04 所有权
* 每个变量都有所有权
* 所有权的属主是作用域
1. move 属性转移操作，移交所有权
2. copy 拷贝值，不移交所有权

还有引用传递，move 设计理念变量被创建出来只能被传递
{% highlight ruby %}
case1   可运行
        let aa = 10;
        Math::show(aa);
        Math::show(aa); 可正常运行，因为默认 move 传值是拷贝

case2   报错
        let aa = 10;
        Math::show(move aa); 原来 aa 所有权在 main 函数，
        使用 move 后把 aa 所有权转移给了 Math::show 函数，
        当本次 show 调用完 aa 无法再次使用
        Math::show(aa);
        
case3   可运行
        let aa = 10;
        Math::show(copy aa); 默认就是 copy，值传递拷贝
        Math::show(copy aa);
{% endhighlight %}

## 0x05 Signer
* Signer 代表发送交易的人或签名的人
* 一种原生的数据类型
* 只有一种能力：即 Drop（只有被丢弃的能力 😂）
{% highlight ruby %}
可以这样理解 struct signer has drop { a: address }
{% endhighlight %}
* 不能在代码中创建，必须通过脚本调用传递
 
### Signer 相关 API
1. address_of(&Signer):address 返回 Signer 中的地址
2. borrow_address(&Signer):&address 返回 Signer 中地址的引用

{% highlight ruby %}

script {
    use 0x1::Signer;
    use 0x1::Debug;

    script 的 main 函数可以有多个参数，但如果有 signer，signer 需要在前边
    fun test_signer(sn: signer) {
        let addr = Signer::address_of(&sn);
        Debug::print(&addr);
    }
}
{% endhighlight %}

## 0x06 资源
* 资源就是被限制了能力的结构体
* 资源只能有 key 和 store 两种能力
* 资源必须存储在账户下，账户可以理解为就是 Signer
* 一个账户同一时刻只能容纳一个资源

资源相关 API

![](/assets/images/move/resource.png)


{% highlight ruby %}
module Viper::Collection {
    use 0x1::Vector;
    use 0x1::Signer;

    struct Item has store, drop { }

    // define resources
    struct Collection has key, store {
        items: vector<Item>,
    }

    // create move 创建资源
    public fun make_collection(account: &signer) {
       // set collection to account
        move_to<Collection>(account, Collection{
            items: Vector::empty<Item>()
        })
    }

    // check exist 检查资源是否存在
    public fun exists_at(addr: address): bool {
        exists<Collection>(addr)
    }

    // update resource  更新资源
    // need "acquires resources_name" if u use borrow_global_mut function 
    // 使用了 borrow_global_mut 的函数声明需要加 acquires 资源名
    public fun add_item(account: &signer) acquires Collection {
        let addr = Signer::address_of(account);
        let collection = borrow_global_mut<Collection>(addr);
        // add new item to collection items
        Vector::push_back(&mut collection.items, Item{});

    }

    public fun size(account: &signer): u64 acquires Collection {
        let addr = Signer::address_of(account);
        let collection = borrow_global<Collection>(addr);
        // Note : implicit return can not has ";"
        Vector::length(&collection.items)
    }

    // 销毁资源
    // { items: _ } 中“下划线”表示不接受任何元素，这样进行销毁
    public fun destroy(account: &signer) acquires Collection {
        let addr = Signer::address_of(account);
        let collection = move_from<Collection>(addr);
        let Collection{ items: _ } = collection; // 销毁资源
    }

}


--------------------
script {
    use 0x1::Debug;
    use Viper::Collection;
    use 0x1::Signer;

    fun test_resourses(account: signer) {

        Collection::make_collection(&account);
        let addr = Signer::address_of(&account);
    //    let addr = @0x41; 
        let exist = Collection::exists_at(addr);
        Debug::print(&exist);


    }

}

输出
debug: true
18:43:03
Gas used: 17
Changed resource(s) under 1 address(es):

资源操作有相关的 log
Changed 1 resource(s) under address 0000000000000000000000000000000000000000000000000000000000000042:
    Added type 0x2::Collection::Collection: [0] (wrote 57 bytes)
      store key 0x2::Collection::Collection {
          items: [
          ]
      }
Wrote 57 bytes of resource ID's and data
{% endhighlight %}

## 0x07 源码分析
Storage 源码分析
{% highlight ruby %}
/// The storage module example.
/// It's utilizing Move language generics to store any kind of data under user account as resource.
/// The `scripts` folder contains example which utilizing Storage module.
/// To get familiar with generics, resources, and other Move concepts visit https://diem.github.io/move/introduction.html
module Sender::Storage {
    use Std::Signer;

    /// Define `Storage` resource.
    /// The resource would store `T` (generic) kind of data under `val` field.
    struct Storage<T: store> has key {
        val: T,
    }

    /// Store the `val` under user account in `Storage` resource.
    /// `signer` - transaction sender.
    /// `val` - the value to store.
    public fun store<T: store>(account: &signer, val: T) {
        // Get address of `signer` by utilizing `Signer` module of Standard Library
        let addr = Signer::address_of(account);

        // Check if resource isn't exists already, otherwise throw error with code 101.
        assert!(!exists<Storage<T>>(addr), 101);

        // Create `Storage` resource contains provided value.
        let to_store = Storage {
            val,
        };

        // 'Move' the Storage resource under user account,
        // so the resource will be placed into storage under user account.
        move_to(account, to_store);
    }

    /// Get stored value under signer account.
    /// `signer` - transaction sender, which stored value.
    public fun get<T: store>(account: &signer): T acquires Storage {
        // Get address of account.
        let addr = Signer::address_of(account);

        // Check if resource exists on address, otherwise throw error with code 102.
        assert!(exists<Storage<T>>(addr), 102);

        // Extract `Storage` resource from signer account.
        // And then deconstruct resource to get stored value.
        let Storage { val } = move_from<Storage<T>>(addr);  // 取出
        val
    }
}

script {
    use Sender::Storage;

    /// Script to store `vector<u8>` (bytes).
    fun store_bytes(account: signer, val: vector<u8>) {
        Storage::store(&account, val);
    }
}


测试 store_bytes(0x1, b"123")
{% endhighlight %}

Coins 
{% highlight ruby %}

/// An example of how you can implement balance and coins logic WITHOUT Aptos Framework, but in Move.
/// Could be useful if you indeed want to learn how it works in Background in Move.
///
/// THIS IS JUST EXAMPLE AND NOT FOR PRODUCTION USAGE.
///
/// Current example support only one Coins type, but for production you probably should replace `Coins` with generic type
/// (in functions, during `Balance` definition, etc).
///
/// 1. `Coins` resource is used as coin/token type, usually in your production code it can be any type which can
///    be stored in Balance resource (generic), yet to make an example simple we introduced `Coins` type.
/// 2. `Balance` resource storing balance of `Coins` under user account.
///
/// To get familiar with generics, resources, and other Move concepts visit https://diem.github.io/move/introduction.html
///
/// If you are interested in production examples of Balances/Tokens/Coins implementation, look at Standard Library:
///     * https://github.com/pontem-network/pont-stdlib/blob/master/sources/PontAccount.move
///     * https://github.com/pontem-network/pont-stdlib/blob/master/sources/Token.move
module Sender::Coins {
    use Std::Signer;

    /// This is `Coins` Move resource corresponds to some number of coins.
    /// In Move, all struct objects can have "abilities" from a hardcoded set of {copy, key, store, drop}.
    /// This one has only `store` ability, which means it can be a part of root level resource in Move Storage.
    struct Coins has store { val: u64 }

    /// This is `Balance` Move resource representing user balance stored under account.
    /// This is Move resource object which is marked by `key` ability. It can be added to the Move Storage directly.
    struct Balance has key {
        /// It contains an amount of `Coins` inside.
        coins: Coins
    }

    /// Error when `Balance` doesn't exist on account.
    const ERR_BALANCE_NOT_EXISTS: u64 = 101;
    /// Error when `Balance` already exists on account.
    const ERR_BALANCE_EXISTS: u64 = 102;

    /// In Move you cannot directly create an instance of `Coin` from script,
    /// Instead you need to use available constructor methods. In general case, those methods could have some permission
    /// restrictions, i.e. `mint(acc, val: u64)` method would require `&signer` of coin creator as the first argument
    /// which is only available in transactions signed by that account.
    ///
    /// In the current example anyone can mint as many coins as want, but usually you can add restrictions (MintCapabilities),
    /// for details look at standard library (links in the herd of the file).
    public fun mint(val: u64): Coins {
        let new_coin = Coins{ val }; 如果结构体的成员名称与函数参数名相同，可直接传递，否则需要写成 {成员名: 参数名}
        new_coin
    }

    /// If struct object does not have `drop` ability, it cannot be destroyed at the end of the script scope,
    /// and needs explicit desctructuring method.
    public fun burn(coin: Coins) {   
        let Coins{ val: _ } = coin; 销毁 coin
    }

    /// Create `Balance` resource to account.
    /// In Move to store resource under account you have to provide user signature (`acc: &signer`).
    /// So before starting work with balances (use `deposit`, `withdraw`), account should add Balance resource
    /// on it's own account.
    public fun create_balance(acc: &signer) {
        let acc_addr = Signer::address_of(acc);

        assert!(!balance_exists(acc_addr), ERR_BALANCE_EXISTS);

        let zero_coins = Coins{ val: 0 };
        move_to(acc, Balance { coins: zero_coins}); 把资源绑定到 Account 上
    }

    /// Check if `Balance` resource exists on account.
    public fun balance_exists(acc_addr: address): bool {
        exists<Balance>(acc_addr)
    }

    /// Deposit coins to user's balance (to `acc` balance).
    public fun deposit(acc_addr: address, coin: Coins) acquires Balance {
        assert!(balance_exists(acc_addr), ERR_BALANCE_NOT_EXISTS);

        let Coins { val } = coin;   // 获取 coin 中 val 的值
        let balance = borrow_global_mut<Balance>(acc_addr);
        balance.coins.val = balance.coins.val + val;
    }

    /// Withdraw coins from user's balance (withdraw from `acc` balance).
    public fun withdraw(acc: &signer, val: u64): Coins acquires Balance {
        let acc_addr = Signer::address_of(acc);
        assert!(balance_exists(acc_addr), ERR_BALANCE_NOT_EXISTS);

        let balance = borrow_global_mut<Balance>(acc_addr);
        balance.coins.val = balance.coins.val - val;
        Coins{ val }
    }

    /// Get balance of an account.
    public fun balance(acc_addr: address): u64 acquires Balance {
        borrow_global<Balance>(acc_addr).coins.val
    }
}

script {
    use Std::Signer;
    use Sender::Coins;

    // Mint new coins and deposit to account.
    fun mint_coin(acc: signer, amount: u64) {
        let acc_addr = Signer::address_of(&acc);
        let coins = Coins::mint(amount);

        if (!Coins::balance_exists(acc_addr)) {
            Coins::create_balance(&acc);
        };

        Coins::deposit(acc_addr, coins);
        assert!(Coins::balance(acc_addr) == amount, 1);
    }
}
测试 mint_coin(0x11, 100)
{% endhighlight %}

AptosCoin
{% highlight ruby %}
依赖 https://github.com/aptos-labs/aptos-core


/// The module to show how to create a new coin on Aptos network.
module Sender::AptosCoin {
    use Std::ASCII::string;
    use AptosFramework::Coin::Self;
    use Std::Signer;

    // Errors.

    /// When capability is missed on account.
    const ERR_CAP_MISSED: u64 = 100;

    /// When capability already exists on account.
    const ERR_CAP_EXISTS: u64 = 101;

    /// Represents new user coin.
    /// Indeeed this type will be used as CoinType for your new coin.
    struct MyCoin {}

    /// The struct to store capability: mint and burn.
    struct Capability<CapType: store> has key {
        cap: CapType
    }

    /// Initializing `MyCoin` as coin in Aptos network.
    public fun initialize_internal(account: &signer) {
        // Initialize `MyCoin` as coin type using Aptos Framework.
        let (mint_cap, burn_cap) = Coin::initialize<MyCoin>(
            account,
            string(b"MyCoin"),
            string(b"MC"),
            10,
            true,
        );

        // Store mint and burn capabilities under user account.
        move_to(account, Capability { cap: mint_cap });
        move_to(account, Capability { cap: burn_cap });
    }

    // public(script) 相当于这是一个脚本
    /// Similar to `initialize_internal` but can be executed as script.
    public(script) fun initialize(account: &signer) {
        initialize(account);
    }

    /// Extract mint or burn capability from user account.
    /// Returns extracted capability.
    public fun extract_capability<CapType: store>(account: &signer): CapType acquires Capability {
        let account_addr = Signer::address_of(account);

        // Check if capability stored under account.
        assert!(exists<Capability<CapType>>(account_addr), ERR_CAP_MISSED);

        // Get capability stored under account.
        let Capability { cap } =  move_from<Capability<CapType>>(account_addr);
        cap
    }

    /// Put mint or burn `capability` under user account.
    public fun put_capability<CapType: store>(account: &signer, capability: CapType) {
        let account_addr = Signer::address_of(account);

        // Check if capability doesn't exist under account so we can store.
        assert!(!exists<Capability<CapType>>(account_addr), ERR_CAP_EXISTS);

        // Store capability.
        move_to(account, Capability<CapType> {
            cap: capability
        });
    }
}
{% endhighlight %}


## 0x08 项目实战
* 球星卡信息
* 功能
1. 创建
2. 空投
3. 查看
4. 价值
5. 转账（结合 Coins）

{% highlight ruby %}
module 0x1::Football {


    // error code
    const STAR_ALREADY_EXISTS:u64 = 100;
    const STAR_NOT_EXISTS:u64 = 101;

    // qiuxing ka
    struct FootballStar has key {
        name: vector<u8>,
        country: vector<u8>,
        position: u8,
        value: u64,

    }
}
{% endhighlight %}
