---
layout: post
title: Swift-Doc-05
date: 2022-09-18 16:45:30.000000000 +09:00
tag: Swift
---

## 0x01 Generic

{% highlight ruby %}
// ## 1 Generic Functions

func swapTwoValues<T>(_ a: inout T, _ b: inout T) {
    let temporaryA = a
    a = b
    b = temporaryA
}

var someInt = 3
var anotherInt = 107
swapTwoValues(&someInt, &anotherInt)
// someInt is now 107, and anotherInt is now 3

var someString = "hello"
var anotherString = "world"
swapTwoValues(&someString, &anotherString)
// someString is now "world", and anotherString is now "hello"

print(someString)

// ## 2 Type Parameters
/*
 在上面的 swapTwoValues(_:_:) 示例中，占位符类型 T 是类型参数的示例。
 类型参数指定并命名一个占位符类型，并紧跟在函数名称之后，
 在一对匹配的尖括号之间（例如 <T>）。
 

 */

// ## 3 Naming Type Parameters
//  始终为类型参数提供大写驼峰式名称（例如 T 和 MyTypeParameter），以表明它们是类型的占位符，而不是值。

// ## 4 Generic Types
struct Stack<Element> {
    var items: [Element] = []
    mutating func push(_ item: Element) {
        items.append(item)
    }
    mutating func pop() -> Element {
        return items.removeLast()
    }
}
var stackOfStrings = Stack<String>()
stackOfStrings.push("uno")
stackOfStrings.push("dos")
stackOfStrings.push("tres")
stackOfStrings.push("cuatro")
// the stack now contains 4 strings
let fromTheTop = stackOfStrings.pop()
// fromTheTop is equal to "cuatro", and the stack now contains 3 strings

// ## 5 Extending a Generic Type
/*
 当你扩展一个泛型类型时，你不会提供一个类型参数列表作为扩展定义的一部分。 相反，
 原始类型定义中的类型参数列表在扩展的主体中可用，
 并且原始类型参数名称用于引用原始定义中的类型参数。

 **** Note，此扩展未定义类型参数列表。
 相反，在扩展中使用 Stack 类型的现有类型参数名称 Element 来指示 topItem 计算属性的可选类型。
 */
extension Stack {
    var topItem: Element? {
        return items.isEmpty ? nil : items[items.count - 1]
    }
}

if let topItem = stackOfStrings.topItem {
    print("The top item on the stack is \(topItem).")
}
// Prints "The top item on the stack is tres."

// ## 6 **** Type Constraints
/*
 有时对可与泛型函数和泛型类型一起使用的类型强制执行某些类型约束很有用。
 类型约束指定类型参数必须继承自特定类，或符合特定协议或协议组合。

 例如，Swift 的 Dictionary 类型对可以用作字典键的类型进行了限制。
 如字典中所述，字典键的类型必须是可散列的。
 也就是说，它必须提供一种使自己具有唯一可表示性的方法。
 Dictionary 需要它的键是可散列的，以便它可以检查它是否已经包含特定键的值。
 如果没有这个要求，Dictionary
 无法判断是否应该插入或替换特定键的值，也无法找到字典中已经存在的给定键的值
 
 
 默认情况下，Swift 的所有基本类型（例如 String、Int、Double 和 Bool）都是可散列的
 */
// ### Type Constraint Syntax
/*
 您可以通过在类型参数名称之后放置单个类或协议约束来编写类型约束，用冒号分隔，
 作为类型参数列表的一部分。
 泛型函数类型约束的基本语法如下所示（尽管泛型类型的语法相同）：
 
 func someFunction<T: SomeClass, U: SomeProtocol>(someT: T, someU: U) {
     // function body goes here
 }

 上面的假设函数有两个类型参数。
 第一个类型参数 T 具有类型约束，要求 T 是 SomeClass 的子类。
 第二个类型参数 U 有一个类型约束，要求 U 符合 SomeProtocol 协议。
 
 。
 */

// ### Type Constraints in Action
// 所有 Swift 的标准类型都自动支持 Equatable 协议
func findIndex<T: Equatable>(of valueToFind: T, in array:[T]) -> Int? {
    for (index, value) in array.enumerated() {
        if value == valueToFind {
            return index
        }
    }
    return nil
}

let doubleIndex = findIndex(of: 9.3, in: [3.14159, 0.1, 0.25])
// doubleIndex is an optional Int with no value, because 9.3 isn't in the array
let stringIndex = findIndex(of: "Andrea", in: ["Mike", "Malcolm", "Andrea"])
// stringIndex is an optional Int containing a value of 2

// ## 7 Associated Types

protocol Container {
    associatedtype Item
    mutating func append(_ item: Item)
    var count: Int { get }
    subscript(i: Int) -> Item { get }
}

struct IntStack: Container {
    // original IntStack implementation
    var items: [Int] = []
    mutating func push(_ item: Int) {
        items.append(item)
    }
    mutating func pop() -> Int {
        return items.removeLast()
    }
    // conformance to the Container protocol
    typealias Item = Int
    mutating func append(_ item: Int) {
        self.push(item)
    }
    var count: Int {
        return items.count
    }
    subscript(i: Int) -> Int {
        return items[i]
    }
}

struct Stack2<Element>: Container {
    // original Stack<Element> implementation
    var items: [Element] = []
    mutating func push(_ item: Element) {
        items.append(item)
    }
    mutating func pop() -> Element {
        return items.removeLast()
    }
    // conformance to the Container protocol
    mutating func append(_ item: Element) {
        self.push(item)
    }
    var count: Int {
        return items.count
    }
    subscript(i: Int) -> Element {
        return items[i]
    }
}

// ### Extending an Existing Type to Specify an Associated Type
// Array 默认其实已经实现了 Container 协议，可以扩展它把 Array 当成 Container

extension Array: Container {}

// ### Adding Constraints to an Associated Type
/*
 您可以将类型约束添加到协议中的关联类型，以要求符合的类型满足这些约束。
 例如，下面的代码定义了一个版本的 Container，它要求容器中的项目是相等的。
 Container2 要求 Item 必须实现了 Equatable 协议
 */
protocol Container2 {
    associatedtype Item: Equatable
    mutating func append(_ item: Item)
    var count: Int { get }
    subscript(i: Int) -> Item { get }
}

// ### Using a Protocol in Its Associated Type’s Constraints
/*
 协议可以作为其自身需求的一部分出现。
 例如，这里有一个对 Container 协议进行细化的协议，增加了 suffix(_:) 方法的要求。
 suffix(_:) 方法从容器末尾返回给定数量的元素，将它们存储在 Suffix 类型的实例中。
 */

protocol SuffixableContainer: Container {
    associatedtype Suffix: SuffixableContainer where Suffix.Item == Item
    func suffix(_ size: Int) -> Suffix
}
/*
 在这个协议中，Suffix 是一个关联类型，就像上面 Container 示例中的 Item 类型一样。
 Suffix 有两个约束：它必须符合 SuffixableContainer 协议（当前正在定义的协议），
 其 Item 类型必须与容器的 Item 类型相同。
 
 */
extension Stack2: SuffixableContainer {
    func suffix(_ size: Int) -> Stack2 {
        var result = Stack2()
        for index in (count-size)..<count {
            result.append(self[index])
        }
        return result
    }
    // Inferred that Suffix is Stack.
}
var stackOfInts = Stack2<Int>()
stackOfInts.append(10)
stackOfInts.append(20)
stackOfInts.append(30)
let suffix = stackOfInts.suffix(2)
// suffix contains 20 and 30

extension IntStack: SuffixableContainer {
    func suffix(_ size: Int) -> Stack2<Int> {
        var result = Stack2<Int>()
        for index in (count-size)..<count {
            result.append(self[index])
        }
        return result
    }
    // Inferred that Suffix is Stack<Int>.
}

// ## 8 Generic Where Clauses
/*
 类型约束，如类型约束中所述，使您能够定义与泛型函数、下标或类型关联的类型参数的要求。
 
 定义关联类型的要求也很有用。
 您可以通过定义一个通用的 where 子句来做到这一点。
 泛型 where 子句使您能够要求关联类型必须符合某个协议，
 或者某些类型参数和关联类型必须相同。
 通用 where 子句以 where关键字开头，后跟关联类型的约束或类型与关联类型之间的相等关系。 在类型或函数主体的左大括号之前编写一个通用 where 子句。
 */
func allItemsMatch<C1: Container, C2: Container>
    (_ someContainer: C1, _ anotherContainer: C2) -> Bool
    where C1.Item == C2.Item, C1.Item: Equatable {

        // Check that both containers contain the same number of items.
        if someContainer.count != anotherContainer.count {
            return false
        }

        // Check each pair of items to see if they're equivalent.
        for i in 0..<someContainer.count {
            if someContainer[i] != anotherContainer[i] {
                return false
            }
        }

        // All items match, so return true.
        return true
}
var stackOfStrings2 = Stack2<String>()
stackOfStrings2.push("uno")
stackOfStrings2.push("dos")
stackOfStrings2.push("tres")

var arrayOfStrings = ["uno", "dos", "tres"]

if allItemsMatch(stackOfStrings2, arrayOfStrings) {
    print("All items match.")
} else {
    print("Not all items match.")
}
// Prints "All items match."

// ### Extensions with a Generic Where Clause
/*
 您还可以使用通用 where 子句作为扩展的一部分。
 下面的示例扩展了前面示例中的通用 Stack 结构，以添加 isTop(_:) 方法。
 */

extension Stack2 where Element: Equatable {
    func isTop(_ item: Element) -> Bool {
        guard let topItem = items.last else {
            return false
        }
        return topItem == item
    }
}
if stackOfStrings2.isTop("tres") {
    print("Top element is tres.")
} else {
    print("Top element is something else.")
}
// Prints "Top element is tres."

// If you try to call the isTop(_:) method on a stack whose elements aren’t equatable, you’ll get a compile-time error.
//struct NotEquatable {}
//var notEquatableStack = Stack2<NotEquatable>()
//let notEquatableValue = NotEquatable()
//notEquatableStack.push(notEquatableValue)
//notEquatableStack.isTop(notEquatableValue)  // Error

extension Container where Item: Equatable {
    func startsWith(_ item: Item) -> Bool {
        return count >= 1 && self[0] == item
    }
}

if [9, 9, 9].startsWith(42) {
    print("Starts with 42.")
} else {
    print("Starts with something else.")
}
// Prints "Starts with something else."

// 上例中的通用 where 子句要求 Item 符合协议，但您也可以编写通用 where 子句，要求 Item 为特定类型。 例如：
extension Container where Item == Double {
    func average() -> Double {
        var sum = 0.0
        for index in 0..<count {
            sum += self[index]
        }
        return sum / Double(count)
    }
}
print([1260.0, 1200.0, 98.6, 37.0].average())
// Prints "648.9"

// 您可以在作为扩展一部分的通用 where 子句中包含多个要求，就像您可以在其他地方编写的通用 where 子句一样。 用逗号分隔列表中的每个要求。


// ## 9 Contextual Where Clauses
// approach 1：在方法后写 where
extension Container {
    func average() -> Double where Item == Int {
        var sum = 0.0
        for index in 0..<count {
            sum += Double(self[index])
        }
        return sum / Double(count)
    }
    func endsWith(_ item: Item) -> Bool where Item: Equatable {
        return count >= 1 && self[count-1] == item
    }
}
let numbers = [1260, 1200, 98, 37]
print(numbers.average())
// Prints "648.75"
print(numbers.endsWith(37))
// Prints "true"

// approach 2 分开写定义 extension 时候写 where
extension Container where Item == Int {
    func average2() -> Double {
        var sum = 0.0
        for index in 0..<count {
            sum += Double(self[index])
        }
        return sum / Double(count)
    }
}
extension Container where Item: Equatable {
    func endsWith2(_ item: Item) -> Bool {
        return count >= 1 && self[count-1] == item
    }
}

// ## 10 Associated Types with a Generic Where Clause

protocol Container3 {
    associatedtype Item
    mutating func append(_ item: Item)
    var count: Int { get }
    subscript(i: Int) -> Item { get }
    // **** Associated Types with a Generic Where Clause
    associatedtype Iterator: IteratorProtocol where Iterator.Element == Item
    func makeIterator() -> Iterator
}
// 对于从另一个协议继承的协议，您可以通过在协议声明中包含泛型 where 子句来为继承的关联类型添加约束
protocol ComparableContainer: Container3 where Item: Comparable { }


// ## 11 Generic Subscripts
/*
 Subscripts 被泛型，包含泛型 where 语句
 placeholder type 写在 subscript 后括号前，
 where 写在 { 前边
 
 */
// 泛型参数 Indices 必须是符合标准库中的 Sequence 协议
extension Container3 {
    subscript<Indices: Sequence>(indices: Indices) -> [Item]
        where Indices.Iterator.Element == Int {
            var result: [Item] = []
            for index in indices {
                result.append(self[index])
            }
            return result
    }
}
{% endhighlight %}


## 0x02 Opaque Types
{% highlight ruby %}
/*
 具有不透明返回类型的函数或方法隐藏了其返回值的类型信息。
 不是提供具体类型作为函数的返回类型，而是根据它支持的协议来描述返回值。
 
 隐藏类型信息在模块和调用模块的代码之间的边界处很有用，因为返回值的底层类型可以保持私有。
 
 ******
 与返回类型为协议类型的值不同，不透明类型保留了类型标识——编译器可以访问类型信息，但模块的客户端不能。
 */

// ## 1 The Problem That Opaque Types Solve
protocol Shape {
    func draw() -> String
}

struct Triangle: Shape {
    var size: Int
    func draw() -> String {
        var result: [String] = []
        for length in 1...size {
            result.append(String(repeating: "*", count: length))
        }
        return result.joined(separator: "\n")
    }
}
let smallTriangle = Triangle(size: 3)
print(smallTriangle.draw())
// *
// **
// ***

struct FlippedShape<T: Shape>: Shape {
    var shape: T
    func draw() -> String {
        let lines = shape.draw().split(separator: "\n")
        return lines.reversed().joined(separator: "\n")
    }
}
let flippedTriangle = FlippedShape(shape: smallTriangle)
print(flippedTriangle.draw())
// ***
// **
// *


struct JoinedShape<T: Shape, U: Shape>: Shape {
    var top: T
    var bottom: U
    func draw() -> String {
        return top.draw() + "\n" + bottom.draw()
    }
}
let joinedTriangles = JoinedShape(top: smallTriangle, bottom: flippedTriangle)
print(joinedTriangles.draw())
// *
// **
// ***
// ***
// **
// *

// ## 2 Returning an Opaque Type
/*
 对于具有不透明返回类型的函数，这些角色是相反的。
 不透明类型允许函数实现以一种从调用函数的代码中抽象出来的方式为其返回的值选择类型。 例如，以下示例中的函数返回梯形而不暴露该形状的基础类型。
 */

struct Square: Shape {
    var size: Int
    func draw() -> String {
        let line = String(repeating: "*", count: size)
        let result = Array<String>(repeating: line, count: size)
        return result.joined(separator: "\n")
    }
}
// 不透明类型保留了类型标识
/*
 本例中的 makeTrapezoid() 函数将其返回类型声明为某个 Shape；
 因此，该函数返回一个符合 Shape 协议的给定类型的值，而不指定任何特定的具体类型。
 
 以这种方式编写 makeTrapezoid() 可以让它表达其公共接口的基本方面 - 它返回的值是一个形状 -
 而无需从其公共接口的一部分制作该形状的特定类型。
 此实现使用两个三角形和一个正方形，但该函数可以重写，以各种其他方式绘制梯形，而无需更改其返回类型。
 
 这个例子强调了不透明的返回类型与泛型类型相反的方式。 makeTrapezoid() 中的代码可以返回它需要的任何类型，只要该类型符合 Shape 协议，
 就像调用代码对泛型函数所做的那样。调用函数的代码需要以通用方式编写，例如通用函数的实现，以便它可以使用 makeTrapezoid() 返回的任何 Shape 值。
 */
func makeTrapezoid() -> some Shape {
    let top = Triangle(size: 2)
    let middle = Square(size: 2)
    let bottom = FlippedShape(shape: top)
    let trapezoid = JoinedShape(
        top: top,
        bottom: JoinedShape(top: middle, bottom: bottom)
    )
    return trapezoid
}
let trapezoid = makeTrapezoid()
print(trapezoid.draw())
// *
// **
// **
// **
// **
// *


// 您还可以将不透明的返回类型与泛型结合起来。 以下代码中的函数都返回符合 Shape 协议的某种类型的值。
func flip<T: Shape>(_ shape: T) -> some Shape {
    return FlippedShape(shape: shape)
}
func join<T: Shape, U: Shape>(_ top: T, _ bottom: U) -> some Shape {
    JoinedShape(top: top, bottom: bottom)
}

let opaqueJoinedTriangles = join(smallTriangle, flip(smallTriangle))
print(opaqueJoinedTriangles.draw())
// *
// **
// ***
// ***
// **
// *

/*
 如果具有不透明返回类型的函数从多个位置返回，则所有可能的返回值必须具有相同的类型。
 对于泛型函数，该返回类型可以使用函数的泛型类型参数，但它仍然必须是单一类型。
 例如，这是一个无效版本的形状翻转函数，其中包含正方形的特殊情况：
 
 如果你用一个 Square 调用这个函数，它会返回一个 Square； 否则，它返回一个 FlippedShape。 这违反了仅返回一种类型的值的要求，并使 invalidFlip(_:) 代码无效。 修复 invalidFlip(_:) 的一种方法是将正方形的特殊情况移动到 FlippedShape 的实现中，这使得该函数始终返回 FlippedShape 值：
 */

// **** 即返回单一类型的值，要么都是 Square，要么都是 FlippedShape

//func invalidFlip<T: Shape>(_ shape: T) -> some Shape {
//    if shape is Square {
//        return shape // Square Error: return types don't match
//    }
//    return FlippedShape(shape: shape) // FlippedShape  Error: return types don't match
//}

struct FlippedShape2<T: Shape>: Shape {
    var shape: T
    func draw() -> String {
        if shape is Square {
            return shape.draw()
        }
        let lines = shape.draw().split(separator: "\n")
        return lines.reversed().joined(separator: "\n")
    }
}

// 始终返回单一类型的要求并不妨碍您在不透明的返回类型中使用泛型。 下面是一个函数示例，它将其类型参数合并到它返回的值的基础类型中：

// *** 它遵循具有不透明返回类型的函数必须返回仅单一类型的值的要求
func `repeat`<T: Shape>(shape: T, count: Int) -> some Collection {
    return Array<T>(repeating: shape, count: count)
}

// ## 3 Differences Between Opaque Types and Protocol Types
/*
 返回不透明类型看起来与使用协议类型作为函数的返回类型非常相似，
 但这两种返回类型在是否保留类型标识方面有所不同。
 
 不透明类型是指一种特定类型，尽管函数的调用者无法看到是哪种类型；
 
 协议类型可以指任何符合协议的类型。
 
 一般来说，协议类型在它们存储的值的底层类型方面为您提供了更大的灵活性，
 
 *** 而不透明类型让您对这些底层类型做出更强有力的保证。
 */

// 例如，下面是一个使用协议类型作为其返回类型而不是不透明返回类型的 flip(_:) 版本：
/*
 
 protoFlip(_:) 返回的值不需要总是具有相同的类型——它只需要符合 Shape 协议。
 换句话说，protoFlip(_:) 与其调用者之间的 API 合约比 flip(_:) 更宽松。
 它保留了返回多种类型值的灵活性：
 */
func protoFlip<T: Shape>(_ shape: T) -> Shape {
    return FlippedShape(shape: shape)
}

func protoFlip2<T: Shape>(_ shape: T) -> Shape {
    if shape is Square {
        return shape
    }

    return FlippedShape(shape: shape)
}

/*
 代码的修订版本返回一个 Square 实例或一个 FlippedShape 实例，具体取决于传入的形状。此函数返回的两个翻转形状可能具有完全不同的类型。 当翻转相同形状的多个实例时，此函数的其他有效版本可能会返回不同类型的值。 来自 protoFlip(_:) 的不太具体的返回类型信息意味着许多依赖于类型信息的操作在返回值上不可用。 例如，不可能编写一个 == 运算符来比较此函数返回的结果。
 */
let protoFlippedTriangle = protoFlip(smallTriangle)
let sameThing = protoFlip(smallTriangle)
// protoFlippedTriangle == sameThing  // Error

/*
 
 出现示例最后一行的错误有几个原因。直接的问题是 Shape 不包含 == 运算符作为其协议要求的一部分。如果您尝试添加一个，您将遇到的下一个问题是 == 运算符需要知道其左侧和右侧参数的类型。这种运算符通常采用 Self 类型的参数，匹配采用协议的任何具体类型，但是向协议添加 Self 要求不允许在将协议用作类型时发生类型擦除。

 使用协议类型作为函数的返回类型使您可以灵活地返回任何符合协议的类型。但是，这种灵活性的代价是无法对返回的值进行某些操作。该示例显示了 == 运算符如何不可用 - 它取决于使用协议类型未保留的特定类型信息。

 这种方法的另一个问题是形状变换不会嵌套。翻转三角形的结果是 Shape 类型的值，protoFlip(_:) 函数接受符合 Shape 协议的某种类型的参数。但是，协议类型的值不符合该协议； protoFlip(_:) 返回的值不符合 Shape。这意味着像 protoFlip(protoFlip(smallTringe)) 这样应用多个转换的代码是无效的，因为翻转的形状不是 protoFlip(_:) 的有效参数。
 
 相反，不透明类型保留了底层类型的标识。
 Swift 可以推断关联类型，
 这使您可以在协议类型不能用作返回值的地方使用不透明的返回值。
 
 例如，下面是 Generics 的 Container 协议的一个版本：
 */

protocol Container {
    associatedtype Item
    var count: Int { get }
    subscript(i: Int) -> Item { get }
}
extension Array: Container { }
/*
 您不能使用 Container 作为函数的返回类型，因为该协议具有关联的类型。 您也不能将它用作泛型返回类型中的约束，因为在函数体之外没有足够的信息来推断泛型类型需要是什么。
 */

// Error: Protocol with associated types can't be used as a return type.
//func makeProtocolContainer<T>(item: T) -> Container {
//    return [item]
//}

// Error: Not enough information to infer C.
//func makeProtocolContainer<T, C: Container>(item: T) -> C {
//    return [item]
//}


func makeOpaqueContainer<T>(item: T) -> some Container {
    return [item]
}
let opaqueContainer = makeOpaqueContainer(item: 12)
let twelve = opaqueContainer[0]
print(type(of: twelve))
// Prints "Int"

{% endhighlight %}


## 0x03 Automatic Reference Counting

{% highlight ruby %}
// ## 1 How ARC Works
/*
 每次创建类的新实例时，ARC 都会分配一块内存来存储有关该实例的信息。
 此内存保存有关实例类型的信息，以及与该实例关联的任何存储属性的值。

 此外，当不再需要某个实例时，ARC 会释放该实例使用的内存，以便将内存用于其他目的。
 这确保了类实例在不再需要时不会占用内存空间。

 但是，如果 ARC 取消分配仍在使用的实例，则无法再访问该实例的属性或调用该实例的方法。
 事实上，如果您尝试访问该实例，您的应用程序很可能会崩溃。

 为了确保实例在仍然需要时不会消失，ARC 会跟踪当前引用每个类实例的属性、常量和变量的数量。
 只要对该实例的至少一个活动引用仍然存在，ARC 就不会解除分配该实例。

 为了使这成为可能，每当您将类实例分配给属性、常量或变量时，该属性、常量或变量都会对该实例进行强引用。
 该引用被称为“强”引用，因为它牢牢控制该实例，并且只要该强引用仍然存在，就不允许将其释放。
 
 */

// ## 2 ARC in Action
class Person {
    let name: String
    init(name: String) {
        self.name = name
        print("\(name) is being initialized")
    }
    deinit {
        print("\(name) is being deinitialized")
    }
}
var reference1: Person?
var reference2: Person?
var reference3: Person?
reference1 = Person(name: "John Appleseed")
// Prints "John Appleseed is being initialized"
reference2 = reference1 // rc = 2
reference3 = reference1 // rc = 3

reference1 = nil // rc = 2
reference2 = nil // rc = 1

reference3 = nil // will deinit
// Prints "John Appleseed is being deinitialized"

// ## 3 Strong Reference Cycles Between Class Instances

class Human {
  let name: String
  init(name: String) { self.name = name }
  var apartment: Apartment?
  deinit { print("Human \(name) is being deinitialized") }
}

class Apartment {
  let unit: String
  init(unit: String) { self.unit = unit }
  var tenant: Human?
  deinit { print("Apartment \(unit) is being deinitialized") }
}

var john: Human?
var unit4A: Apartment?
john = Human(name: "John")
unit4A = Apartment(unit: "4A")


// 循环引用
john!.apartment = unit4A
unit4A!.tenant = john

//john!.apartment = nil

// not release
john = nil
unit4A = nil


// ## 4 Resolving Strong Reference Cycles Between Class Instances
/*
 当您使用类类型的属性时，Swift 提供了两种解决强引用循环的方法：
 1 weak references
 2 unowned references。
 
 *******如何使用
 当另一个实例的生命周期较短时使用弱引用——也就是说，当另一个实例可以先被释放时。 在上面的公寓示例中，公寓在其生命周期的某个时间点没有租户是合适的，因此在这种情况下，弱引用是打破引用循环的合适方法。
 
 相反，当另一个实例具有相同的生命周期或更长的生命周期时，使用unowned references。
 */

//  ### Weak References
/*
 因为弱引用需要允许在运行时将它们的值更改为 nil，
 所以它们总是被声明为可选类型的变量，而不是常量。
 当 ARC 将弱引用设置为 nil 时，不会调用属性观察器。
 
 */
class Person2 {
    let name: String
    init(name: String) { self.name = name }
    var apartment: Apartment2?
    deinit { print("\(name) is being deinitialized") }
}

class Apartment2 {
    let unit: String
    init(unit: String) { self.unit = unit }
    weak var tenant: Person2?
    deinit { print("Apartment2 \(unit) is being deinitialized") }
}

var tom: Person2?
var unit4B: Apartment2?

tom = Person2(name: "Tom")
unit4B = Apartment2(unit: "4B")

tom!.apartment = unit4B
unit4B!.tenant = tom

tom = nil
// Prints "Tom  is being deinitialized"

unit4B = nil
// Prints "Apartment2 4B is being deinitialized"

// ### Unowned References
/*
 当另一个实例具有相同的生命周期或更长的生命周期时，使用 unowned references。
 使用 unowned 关键字
 unowned 总是期待有值，所以它不是一个可选类型，也不能设置它为 nil
 
 当你确保引用总是引用一个实例，不被释放时使用 unowned，如果你访问 unowned 但它已经被释放了，会触发运行时错误
 
 
 因为信用卡总会有一个主人，所以信用卡类里边的人使用了 unowned
 */
class Customer {
    let name: String
    var card: CreditCard?
    init(name: String) {
        self.name = name
    }
    deinit { print("Customer \(name) is being deinitialized") }
}

class CreditCard {
    let number: UInt64
    unowned let customer: Customer
    init(number: UInt64, customer: Customer) {
        self.number = number
        self.customer = customer
    }
    deinit { print("Card #\(number) is being deinitialized") }
}



var jack: Customer?
jack = Customer(name: "Jack")
jack!.card = CreditCard(number: 1234_5678_9012_3456, customer: jack!)

jack = nil
// Prints "Customer Jack is being deinitialized"
// Prints "Card #1234567890123456 is being deinitialized"

/*
 你可以通过写 unowned(unsafe) 来表示一个不安全的无主引用。它会禁用运行时安全检查，
 例如，出于性能考虑使用它。与所有不安全的操作一样，您有责任检查该代码的安全性

 如果您尝试访问一个不安全的无主引用，当它的实例被释放后，
 您的程序将尝试访问该实例曾经所在的内存位置，这是一个不安全的操作。
 */

class Customer2 {
    let name: String
    var card: Visa?
    init(name: String) {
        self.name = name
    }
    deinit { print("Customer \(name) is being deinitialized") }
}
class Visa {
    let number: UInt64
    unowned(unsafe) let customer: Customer2
    init(number: UInt64, customer: Customer2) {
        self.number = number
        self.customer = customer
    }
    deinit { print("Card #\(number) is being deinitialized") }
}

var mike: Customer2?
mike = Customer2(name: "Mike")
mike!.card = Visa(number: 1309_5678_9012_3456, customer: mike!)


// ### Unowned Optional References
/*
 您可以将对类的可选引用标记为 Unowned 引用。
 就 ARC 所有权模型而言，无主可选引用和弱引用都可以在相同的上下文中使用。

 不同之处在于，当您使用无主可选引用时，您有责任确保它始终引用有效对象或设置为 nil。
 */
class Department {
    var name: String
    var courses: [Course]
    init(name: String) {
        self.name = name
        self.courses = []
    }
}

class Course {
    var name: String
    unowned var department: Department
    unowned var nextCourse: Course?
    init(name: String, in department: Department) {
        self.name = name
        self.department = department
        self.nextCourse = nil
    }
}
let department = Department(name: "Horticulture")

let intro = Course(name: "Survey of Plants", in: department)
let intermediate = Course(name: "Growing Common Herbs", in: department)
let advanced = Course(name: "Caring for Tropical Plants", in: department)

intro.nextCourse = intermediate
intermediate.nextCourse = advanced
department.courses = [intro, intermediate, advanced]

/*
 与非可选的无主引用一样，
 您有责任确保 nextCourse 始终引用尚未释放的课程。
 在这种情况下，例如，当您从 department.courses 中删除一门课程时，
 您还需要删除其他课程可能对它的任何引用。即 unowned 不会自动设置为 nil
 */
/*
 可选值的底层类型是 Optional，它是 Swift 标准库中的枚举。
 但是，对于值类型不能标记为无主的规则，可选项是一个例外。

 包装类的可选项不使用引用计数，因此您不需要维护对可选项的强引用。
 
 
 */

// ### Unowned References and Implicitly Unwrapped Optional Properties
/*
 因为 capitalCity 有一个默认的 nil 值，所以只要 Country 实例在其初始化程序中设置其 name 属性，就会认为新的 Country 实例已完全初始化。
 这意味着 Country 初始化程序可以在设置 name 属性后立即开始引用和传递隐式 self 属性。
 因此，当 Country 初始化程序设置自己的 capitalCity 属性时，
 Country 初始化程序可以将 self 作为 City 初始化程序的参数之一传递。
 */
class Country {
    let name: String
    // 隐式解包，默认值为 nil，
    var capitalCity: City!
    init(name: String, capitalName: String) {
        self.name = name
        self.capitalCity = City(name: capitalName, country: self)
    }
}

class City {
    let name: String
    unowned let country: Country
    init(name: String, country: Country) {
        self.name = name
        self.country = country
    }
}
var country = Country(name: "Canada", capitalName: "Ottawa")
print("\(country.name)'s capital city is called \(country.capitalCity.name)")
// Prints "Canada's capital city is called Ottawa"

// ## 5 Strong Reference Cycles for Closures
class HTMLElement {

    let name: String
    let text: String?

    lazy var asHTML: () -> String = {
        if let text = self.text {
            return "<\(self.name)>\(text)</\(self.name)>"
        } else {
            return "<\(self.name) />"
        }
    }

    init(name: String, text: String? = nil) {
        self.name = name
        self.text = text
    }

    deinit {
        print("\(name) is being deinitialized")
    }

}

let heading = HTMLElement(name: "h1")
let defaultText = "some default text"
heading.asHTML = {
    return "<\(heading.name)>\(heading.text ?? defaultText)</\(heading.name)>"
}
print(heading.asHTML())
// Prints "<h1>some default text</h1>"


var paragraph: HTMLElement? = HTMLElement(name: "p", text: "hello, world")
print(paragraph!.asHTML())
// Prints "<p>hello, world</p>"

paragraph = nil

// ## 6 Resolving Strong Reference Cycles for Closures
// Defining a Capture List
/*
 语法
 lazy var someClosure = {
     [unowned self, weak delegate = self.delegate]
     (index: Int, stringToProcess: String) -> String in
     // closure body goes here
 }
 
 
 lazy var someClosure = {
     [unowned self, weak delegate = self.delegate] in
     // closure body goes here
 }

 */

// ### Weak and Unowned References
/*
 当闭包和它捕获的实例总是相互引用时，并且总是同时被释放，将闭包中的捕获定义为无主引用。

 相反，当捕获的引用在未来某个时间点可能变为 nil 时，将捕获定义为弱引用。
 弱引用始终是可选类型，并在它们引用的实例被释放时自动变为 nil。
 这使您能够检查它们在闭包体内的存在。
 
 If the captured reference will never become nil, it should always be captured as an unowned reference, rather than a weak reference.
 */

class HTMLElement2 {

    let name: String
    let text: String?

    lazy var asHTML: () -> String = {
        [unowned self] in
        if let text = self.text {
            return "<\(self.name)>\(text)</\(self.name)>"
        } else {
            return "<\(self.name) />"
        }
    }

    init(name: String, text: String? = nil) {
        self.name = name
        self.text = text
    }

    deinit {
        print("HTMLElement2 \(name) is being deinitialized")
    }

}
var paragraph2: HTMLElement2? = HTMLElement2(name: "p", text: "hello, world")
print(paragraph2!.asHTML())
// Prints "<p>hello, world</p>"

paragraph2 = nil
{% endhighlight %}

## 0x04 Access Control
{% highlight ruby %}

// ## 1 Modules and Source Files
/*
 Swift 的访问控制是基于模块和源文件的概念。

 模块是一个代码分发单元——一个框架或应用程序，它作为一个单元构建和交付，
 并且可以由另一个模块使用 Swift 的 import 关键字导入。

 Xcode 中的每个构建目标（例如应用程序包或框架）在 Swift 中都被视为一个单独的模块。
 如果您将应用程序代码的各个方面组合为一个独立的框架（可能是封装并跨多个应用程序重用该代码），
 那么您在该框架中定义的所有内容在导入并在应用程序中使用时都将成为单独模块的一部分， 或者当它在另一个框架中使用时。

 源文件是模块中的单个 Swift 源代码文件（实际上是应用程序或框架中的单个文件）。
 尽管在单独的源文件中定义单个类型很常见，但单个源文件可以包含多种类型、函数等的定义。

 */

// ### Access Levels
/*
 Swift 为代码中的实体提供了五种不同的访问级别。
 这些访问级别与定义实体的源文件相关，也与源文件所属的模块相关。
 
 1 Open  and public
 
 1 Open 和 public 使实体能够在其定义模块的任何源文件中使用，
 也可以在导入定义模块的另一个模块的源文件中使用。
 在指定框架的公共接口时，您通常使用 Open 或 public。

 2 Internal 使实体可以在其定义模块的任何源文件中使用，但不能在该模块之外的任何源文件中使用。
 在定义应用程序或框架的内部结构时，您通常使用 Internal。

 3 File-private 将实体的使用限制在其自己的定义源文件中。当在整个文件中使用这些细节时，
 使用文件私有访问来隐藏特定功能的实现细节。

 4 Private 将实体的使用限制为封闭声明，以及该声明在同一文件中的扩展。
 当这些细节仅在单个声明中使用时，使用私有访问来隐藏特定功能的实现细节。
 
 Open 是最高（限制最少）的访问级别，Private 是最低（限制最严格）的访问级别。

 
 Note：Open 仅适用于类和类成员，它与 public 的不同之处在于允许模块外部的代码进行子类化和覆盖，

 */

// ### Guiding Principle of Access Levels
/*
 Swift 中的访问级别遵循一个总体指导原则，高访问级别的的变量不能定义在低访问级别中
 比如
 1 public 变量不能被定义为 internal, file-private, or private
 2 函数的访问级别不能高于其参数类型和返回类型，
 因为该函数可以在其组成类型对周围代码不可用的情况下使用。
 
 ### Default Access Levels
 如果您自己未指定显式访问级别，则代码中的所有实体（除了一些特定的例外）都具有默认访问级别 internal 。 因此，在许多情况下，您不需要在代码中指定显式访问级别。
 
 ### Access Levels for Single-Target Apps
 开发框架时，将该框架的面向公众的接口标记为 open 或 public，以便其他模块（例如导入框架的应用程序）可以查看和访问它。
 这个面向公众的接口是框架的应用程序编程接口（或 API）。
 
 框架的任何内部实现细节仍然可以使用默认的 internal 访问级别，或者如果你想对框架内部代码的其他部分隐藏它们，可以将它们标记为私有或文件私有。 仅当您希望实体成为框架 API 的一部分时，才需要将实体标记为 open 或 public。
 
 ### Access Levels for Unit Test Targets
 当您编写具有单元测试目标的应用程序时，您的应用程序中的代码需要对该模块可用才能进行测试。
 默认情况下，其他模块只能访问标记为开放或公共的实体。
 但是，如果您使用 @testable 属性标记产品模块的导入声明并在启用测试的情况下编译该产品模块，
 则单元测试目标可以访问任何内部实体。
 
 
 */

// ## 3 Access Control Syntax
public class SomePublicClass {}
internal class SomeInternalClass {} // 默认是 internal，因此可以不写
fileprivate class SomeFilePrivateClass {}
private class SomePrivateClass {}

public var somePublicVariable = 0
internal let someInternalConstant = 0 // 默认是 internal，因此可以不写
fileprivate func someFilePrivateFunction() {}
private func somePrivateFunction() {}


// ## 4 Custom Types
/*
 类型的访问控制级别也会影响该类型成员（其属性、方法、初始化程序和下标）的默认访问级别。
 1 *** 如果您将类型的访问级别定义为 private 或 file-private，则其成员的默认访问级别也将是 private 或 file-private。
 2 *** 如果您将类型的访问级别定义为 internal 或 public（或使用默认访问级别 internal 而不明确指定访问级别），则该类型成员的默认访问级别将是 internal。
 
 Note：*****
 一个 public 类型默认具有 internal 成员，而不是 public
 如果你想拥有一个 public 成员你必须显式声明 public。
 这个要求保证一个类型的 public API 是可选发布的，并避免展示 internal 细节作为 public API
 
 */

public class SomePublicClass {                  // explicitly public class
    public var somePublicProperty = 0            // explicitly public class member
    var someInternalProperty = 0                 // implicitly internal class member
    fileprivate func someFilePrivateMethod() {}  // explicitly file-private class member
    private func somePrivateMethod() {}          // explicitly private class member
}

class SomeInternalClass {                       // implicitly internal class
    var someInternalProperty = 0                 // implicitly internal class member
    fileprivate func someFilePrivateMethod() {}  // explicitly file-private class member
    private func somePrivateMethod() {}          // explicitly private class member
}

fileprivate class SomeFilePrivateClass {        // explicitly file-private class
    func someFilePrivateMethod() {}              // implicitly file-private class member
    private func somePrivateMethod() {}          // explicitly private class member
}

private class SomePrivateClass {                // explicitly private class
    func somePrivateMethod() {}                  // implicitly private class member
}

// ### Tuple Types
/*
 元组类型的访问级别是该元组中使用的所有类型中最严格的访问级别。
 例如，如果您从两种不同类型组成一个元组，一种具有 internal 访问权限，另一种具有 private 访问权限，则该复合元组类型的访问级别将是 private。
 
 元组类型没有类、结构、枚举和函数那样的独立定义。
 元组类型的访问级别由构成元组类型的类型自动确定，不能显式指定。
 */

// ### Function Types
/*
 函数类型的访问级别被计算为"函数参数类型"和"返回类型"的最严格的访问级别。
 如果函数的计算访问级别与上下文默认值不匹配，您必须明确指定访问级别作为函数定义的一部分。
 */

/*
 下面的示例定义了一个名为 someFunction() 的全局函数，但没有为函数本身提供特定的访问级别修饰符。 您可能希望此函数具有“内部”的默认访问级别，但事实并非如此。 事实上， someFunction() 不会像下面这样编译：
 
 该函数的返回类型是由上面自定义类型中定义的两个自定义类组成的元组类型。 其中一个类被定义为内部的，而另一个被定义为私有的。 因此，复合元组类型的总体访问级别是私有的（元组的组成类型的最低访问级别）。
 */
func someFunction() -> (SomeInternalClass, SomePrivateClass) {
    // function implementation goes here
}


/*
 因为函数的返回类型是私有的，你必须用 private 修饰符标记函数的整体访问级别，函数声明才有效：

 用 public 或 internal 修饰符标记 someFunction() 的定义，或使用默认设置 internal 是无效的，因为函数的公共或内部用户可能无法适当访问函数返回类型中使用的私有类 .
 */
private func someFunction() -> (SomeInternalClass, SomePrivateClass) {
    // function implementation goes here
}

// ## Enumeration Types
/*
 枚举的各个案例自动获得与其所属的枚举相同的访问级别。 您不能为单个枚举案例指定不同的访问级别。
 
 在下面的示例中，CompassPoint 枚举具有公开的显式访问级别。 因此，北、南、东和西的枚举案例也具有公共访问级别：
 */

public enum CompassPoint {
    case north
    case south
    case east
    case west
}
// ### Raw Values and Associated Values
/*
 枚举定义中用于任何原始值或关联值的类型必须具有至少与枚举的访问级别一样高的访问级别。 例如，您不能将私有类型用作具有内部访问级别的枚举的原始值类型。
 */

// ### Nested Types
/*
 Note：
 嵌套类型的访问级别与其包含类型相同，除非包含类型是公共的。 在公共类型中定义的嵌套类型具有内部的自动访问级别。 如果您希望公共类型中的嵌套类型可公开使用，则必须将嵌套类型显式声明为公共。
 */

// ## 5 Subclassing
/*
 子类的访问级别不能高于其超类
 
 此外，对于在同一模块中定义的类，您可以覆盖在特定访问上下文中可见的任何类成员（方法、属性、初始化程序或下标）。对于在另一个模块中定义的类，您可以覆盖任何打开的类成员。
 
 
 */
public class A {
    fileprivate func someMethod() {}
}

internal class B: A {
  // override 为高于 fileprivate 的访问权限
    override internal func someMethod() {}
}

// 子类 internal 函数调用超类低级 fileprivate 也可以合法，只要符号超类定义的 fileprivate
// 因为超类 A 和子类 B 定义在同一个源文件中，所以 someMethod() 的 B 实现调用 super.someMethod() 是有效的。
public class A {
    fileprivate func someMethod() {}
}

internal class B: A {
    override internal func someMethod() {
        super.someMethod()
    }
}

// ## 6 Constants, Variables, Properties, and Subscripts
/*
 *** 常量、变量或属性不能比其类型的访问权限更大。
 例如，用私有类型编写公共属性是无效的。 同样，下标不能比它的索引类型或返回类型更公开。

 如果常量、变量、属性或下标使用 private ，则常量、变量、属性或下标也必须标记为 private：

 */
private var privateInstance = SomePrivateClass()

// ### Getters and Setters
/*
 常量、变量、属性和下标的 getter 和 setter 自动接收与它们所属的常量、变量、属性或下标相同的访问级别。

 您可以赋予 setter 比其对应的 getter 更低的访问级别，以限制该变量、属性或下标的读写范围。
 您可以通过在 var 或下标介绍器之前写入 fileprivate(set)、private(set) 或 internal(set) 来分配较低的访问级别。
 
 
 此规则适用于存储属性以及计算属性。
 即使你没有为存储的属性编写显式的 getter 和 setter，
 Swift 仍然为你合成一个隐式的 getter 和 setter 来提供对存储属性的后备存储的访问。
 使用 fileprivate(set)、private(set) 和 internal(set) 以与计算属性中的显式 setter 完全相同的方式更改此合成 setter 的访问级别。
 */

struct TrackedString {
    private(set) var numberOfEdits = 0
    var value: String = "" {
        didSet {
            numberOfEdits += 1
        }
    }
}

var stringToEdit = TrackedString()
stringToEdit.value = "This string will be tracked."
stringToEdit.value += " This edit will increment numberOfEdits."
stringToEdit.value += " So will this one."
print("The number of edits is \(stringToEdit.numberOfEdits)")
// Prints "The number of edits is 3"

/*
 TrackedString 结构定义了一个名为 value 的存储字符串属性，初始值为 ""（空字符串）。该结构还定义了一个名为 numberOfEdits 的存储整数属性，用于跟踪该值被修改的次数。这种修改跟踪是通过 value 属性上的 didSet 属性观察器实现的，每次 value 属性设置为新值时，它都会增加 numberOfEdits。

 TrackedString 结构和 value 属性不提供显式访问级别修饰符，因此它们都接收默认访问级别 internal。但是，numberOfEdits 属性的访问级别用 private(set) 修饰符标记，以指示该属性的 getter 仍然具有默认访问级别 internal，但该属性只能从 TrackedString 结构的一部分的代码中设置。这使 TrackedString 可以在内部修改 numberOfEdits 属性，但在结构定义之外使用该属性时，将其显示为只读属性。
 */

// *** 通过组合 public 和 private(set) 访问级别修饰符来使结构的 numberOfEdits 属性 getter 公开，并将其属性 setter 设为私有：
public struct TrackedString {
    public private(set) var numberOfEdits = 0
    public var value: String = "" {
        didSet {
            numberOfEdits += 1
        }
    }
    public init() {}
}

// ## 7 Initializers
/*
 *** 可以为自定义初始化程序分配小于或等于它们初始化的类型的访问级别。
 *** 唯一的例外是 required initializers。
 *** required initializers 必须具有与其所属的类相同的访问级别。

 与函数和方法参数一样，初始化器参数的类型不能比初始化器自己的访问级别更 private。
  
 */

// ### Default Initializers
/*
 如 Default Initializers 中所述，Swift 自动为任何结构或基类提供了一个没有任何参数的默认初始化程序，
 这些结构或基类为其所有属性提供默认值，并且本身不提供至少一个初始化程序。

 *** 默认初始化器与它初始化的类型具有相同的访问级别，除非该类型被定义为 public。
 *** 对于定义为 public 的类型，默认初始化程序被认为是 internal。
 如果您希望公共类型在另一个模块中使用时可以使用无参数初始化程序进行初始化，
 则您必须自己显式地提供一个公共无参数初始化程序作为类型定义的一部分。
 
 
 */

// ### Default Memberwise Initializers for Structure Types
/*
 *** 如果结构的任何存储属性是 private ，则结构类型的默认成员初始化器被认为是 private。
 *** 同样，如果结构的任何存储属性是 file-private，则初始化程序是 file-private。
 *** 否则，初始化程序的访问级别为 internal。

 与上面的默认初始化程序一样，如果您希望在另一个模块中使用公共结构类型时可以使用成员初始化程序进行初始化，您必须自己提供一个公共成员初始化程序作为类型定义的一部分。
 */

// ## 8 Protocols
/*
 协议定义中每个需求的访问级别会自动设置为与协议相同的访问级别。
 您不能将协议要求设置为与其支持的协议不同的访问级别。
 这确保了协议的所有要求在采用该协议的任何类型上都是可见的。
 */

// ### Protocol Inheritance
/*
 Note：****
 如果您定义一个继承自现有协议的新协议，则新协议最多可以具有与其继承自的协议相同的访问级别。
 例如，您不能将继承自 internal 协议改为 public 。
 */

// ### Protocol Conformance
/*
 
 一个类型可以遵循一个访问级别低于该类型本身的协议。 例如，您可以定义一个可以在其他模块中使用的公共类型，但其与内部协议的一致性只能在内部协议的定义模块中使用。

 类型符合特定协议的上下文是类型的访问级别和协议的访问级别的最小值。 例如，如果一个类型是公共的，但它遵循的协议是内部的，那么该类型对该协议的一致性也是内部的。

 当您编写或扩展类型以符合协议时，您必须确保每个协议要求的类型实现至少具有与该类型对该协议的一致性相同的访问级别。 例如，如果公共类型符合内部协议，则该类型对每个协议要求的实现必须至少是内部的。
 
 在 Swift 中，就像在 Objective-C 中一样，协议一致性是全局的——一个类型不可能在同一个程序中以两种不同的方式遵循协议。
 */

// ## 9 Extensions
/*
 您可以在类、结构或枚举可用的任何访问上下文中扩展类、结构或枚举。
 在扩展中添加的任何类型成员都具有与在被扩展的原始类型中声明的类型成员相同的默认访问级别。
 如果您扩展公共或内部类型，则您添加的任何新类型成员都具有默认访问级别 internal。
 如果您扩展文件私有类型，则您添加的任何新类型成员都具有文件私有的默认访问级别。
 如果您扩展私有类型，则您添加的任何新类型成员都具有私有的默认访问级别。
 
 
 */
/*
 Private Members in Extensions
 */
protocol SomeProtocol {
    func doSomething()
}
struct SomeStruct {
    private var privateVariable = 12
}

extension SomeStruct: SomeProtocol {
    func doSomething() {
        print(privateVariable) // 访问 private privateVariable
    }
}

// ## 10 Generics
/*
 泛型类型或泛型函数的访问级别是泛型类型或函数本身的访问级别和对其类型参数的任何类型约束的访问级别中的最低者。
 */

// ## 11 Type Aliases
/*
 出于访问控制的目的，您定义的任何类型别名都被视为不同的类型。
 *** 类型别名的访问级别可以小于或等于其别名的类型的访问级别。
 
 例如，私有类型别名可以为私有、文件私有、内部、公共或开放类型别名，
 但公共类型别名不能为内部、文件私有或私有类型别名。
 */
{% endhighlight %}
