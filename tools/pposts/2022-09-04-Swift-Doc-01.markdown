---
layout: post
title: ### Swift-Doc-01
date: 2022-09-04 16:45:30.000000000 +09:00
tag: Swift
---

## 0x01 The Basics
{% highlight ruby %}
var x = 0, y = 0.0, z = 1

var red, green, blue: Double

var 🐶 = "dog"

// single-line comment
/*
 multiline comments
 can be nested
 */

//: Int
//: ## On a 32-bit platform, Int is the same size as Int32
//: ## On a 64-bit platform, Int is the same size as Int64
// ### 除非特殊要求，否则优先使用 Int

//: ## On a 32-bit platform, UInt is the same size as UInt32
//: ## On a 64-bit platform, UInt is the same size as UInt64
// ### 除非 size 和非负要求，否则优先使用 Int

/*:
 仅当您特别需要与平台原生单词大小相同的无符号整数类型时，才使用UInt。如果不是这样，最好是Int，即使已知要存储的值是非负值。
 一致地使用Int进行整数值有助于代码互操作性，避免在不同数字类型之间转换，并匹配整数类型推断
 
 ## 优先使用 Int，而非 UInt，系统默认推断是 Int
 */



//: Floating-Point
//: ## Double represents a 64-bit floating-point number    小数点后15位
//: ## Floating represents a 32-bit floating-point number  小数点后6位
// *** 优先使用 Double

/*:
 Double的精度至少为小数点后15位，而Float的精度可以小到小数点后6位。要使用的合适浮点类型取决于您需要在代码中使用的值的性质和范围。在任一类型合适的情况下，首选 Double

 ## 优先使用 Double，系统默认推断是 Double
 */

//: Numeric literals
let decimalInteger = 17
let binaryInteger = 0b1001
let octalInteger = 0o21
let hexadecimalInteger = 0x11

/*:
 对于指数为exp的小数，基数乘以10exp：
 1.25e2 means 1.25 x 10^2 or  125.0
 1.25e-2 means 1.25 x 10^-2 or  0.0125
 */

/*:
 对于指数为exp的十六进制数字，基数乘以2exp：
 0xFp2 means 15 x 2^2 or 60
 0xFp-2 means 15 x 2^-2 or 3.75

 */

let paddedDouble = 000123.456
let oneMillion = 1_000_000

//: Type Aliases
typealias AudioSample = UInt16
var maxAmplitudeFound = AudioSample.max

//: Tuples
let http404Error = (404, "not found")
let (statusCode, statusMessage) = http404Error
let (justNeedStatusCode, _) = http404Error
print(http404Error.0)

let http200Status = (statusCode: 200, statusMessage: "OK")
print(http200Status.statusMessage)

//: Optionals
/*:
 Swift的nil与Objective-C中的nil不同。在Objective-C中，nil是指向不存在对象的指针。在Swift中，nil不是指针，而是缺少某种类型的值。任何类型的可选内容都可以设置为nil，而不仅仅是对象类型。
 */

//: ### force-unwrap 强制解包，在 Optional 后加 ！

//: Optional Binding 可选绑定
//: 可用于 if or while
var optionals: Int?
if let opt = optionals {
  
}

//: 多个条件用逗号“，”分割
/*:
 ***您可以根据需要在单个 if 语句中包含任意数量的可选绑定和布尔条件，并用逗号分隔。如果可选绑定中的任何值为零或任何布尔条件的计算结果为 false，则整个 if 语句的条件都被认为是 false。以
 
 
 */
if let first = Int("4"), let second = Int("9"), first < second {
  print("4 < 9")
}

//: Implicitly Unwrapped Optionals 隐式解包
//: ### 声明时候最后加 !，例 let assumedString: String!
let assumedString: String! = "An implicityly unwrapped optional string."
let implicitString: String = assumedString
//: 主要用于 class 初始化 unowned 引用和隐式解包配合使用

let possibleString: String? = "An optional string."
let forcedString: String = possibleString!

/*:
 您可以将隐式解包视为在需要时允许强制解包。当您使用隐式展开的可选值时，Swift首先尝试将其用作普通的可选值；
 如果它不能用作可选值，Swift将强制解开该值。在上面的代码中，可选值 assumedString在将其值分配给implicitString之前被强制解开，
 因为implicitString具有显式、非可选类型的String。在下面的代码中，optionalString没有显式类型，因此它是普通的可选。
 */
//: ### optionalString 是可选类型
let optionalString = assumedString

// *****总结 String? 和 String! 都可进行 if check


//: Error Handling
func canThrowError() throws {
  
}

do {
  try canThrowError()
} catch {
  
}

//: 例子, 如果 makeASandwich 没有异常，则 eatASandwich 正常调用

enum SandwichError {
  case outOfCleanDishes
  case missingIngredients
}
func makeASandwich() throws {
}

func eatASandwich() {
}

do {
  try makeASandwich()
  eatASandwich()  //
} catch SandwichError.outOfCleanDishes {
  
} catch SandwichError.missingIngredients {
  
}

//: Assertions and Preconditions
// **** 断言仅在调试版本中检查，但前提条件在调试版本和生产版本中都进行检查
let age = -3
assert(age >= 0, "A person's age can't be less than zero.")
// This assertion fails because -3 isn't >= 0.”


// **** assertionFailure 强制失败
if age > 10 {
    print("You can ride the roller-coaster or the ferris wheel.")
} else if age >= 0 {
    print("You can ride the ferris wheel.")
} else {
    assertionFailure("A person's age can't be less than zero.")
}

/*
 只要条件有可能为假，就使用前提条件，但必须绝对为真，您的代码才能继续执行。例如，使用前置条件检查下标是否越界，或检查函数是否已传递有效值
 */
// In the implementation of a subscript...
var index = 0
precondition(index > 0, "Index must be greater than zero.")

// You can also call the preconditionFailure(_:file:line:) function to indicate that a failure has occurred”
/*
 “If you compile in unchecked mode (-Ounchecked), preconditions aren’t checked. 
 The compiler assumes that preconditions are always true, and it optimizes your code accordingly. 
 However, the fatalError(_:file:line:) function always halts execution, regardless of optimization settings.

 You can use the fatalError(_:file:line:) function during prototyping and early development to 
 create stubs for functionality that hasn’t been implemented yet, 
 by writing fatalError("Unimplemented") as the stub implementation. 
 Because fatal errors are never optimized out, unlike assertions or preconditions, you can be sure that execution always halts if it encounters a stub implementation”

 */
{% endhighlight %}

## 0x02 Basic Operators
{% highlight ruby %}
//: ### 赋值运算符（=）不返回值，以防止在等于运算符（==）时被错误使用
/*:
 算术运算符（+、-、*、/、%等）检测并禁止值溢出，以避免在处理大于或小于存储它们的类型允许值范围的数字时出现意外结果。您可以选择使用Swift的溢出运算符来评估溢出行为，如溢出运算符中所述。
 */

//: Operators are Unary、Binary、Ternary
/*:
 var x = 1
 var y = 2
 // this is invalid
 if x = y {
 }
 */

//: 数学运算符
/*:
 与C和Objective-C中的算术运算符不同，Swift算术运算符默认不允许值溢出。您可以选择使用Swift的溢出运算符（如a &+ b）来评估溢出行为。看见
 */


//: % 求余
/*:
 其余运算符（%）在其他语言中也被称为模运算符。然而，它在Swift中对负数的行为意味着，
 严格来说，它是一个剩余的操作，而不是一个模块化操作。
 */

//: ### % 公式：a = (b x some multiplier) + remainder
//: 9 % 4 = 1
//: -9 % 4 = (4 x -2) + -1 = -1
//: ### % 忽略了b的符号。这意味着a % b和a % -b总是给出相同的答案。

//: Unary Plus Operator
//: 没什么用
let minSix = -6
let alsoSix = +minSix
let six = -minSix

//: 复合赋值运算符不返回值。例如，你不能写 let b = a += 2。

//: ### Swift还提供了两个运算符（===和！==)，用于测试两个对象引用是否都引用同一个对象实例

//: 元组比较
(1, "zebra") < (2, "apple")


/*:
 在上面的示例中，因为比较已经由元组的第一个元素决定了。然而，当元组的第一个元素相同时，会比较它们的第二个元素——这就是第二行和第三行发生的事情。

 只有当运算符可以应用于各自元组中的每个值时，元组才能与给定运算符进行比较。例如，如下代码所示，您可以比较两个类型的元组（String，Int），因为可以使用<运算符比较String和Int值。相比之下，两个类型的元组（String，Bool）无法与<运算符进行比较，因为<运算符不能应用于Bool值。
 */
//: (1, false) < (2, true) is not valid


//: 三目运算符 a > 0 ? a : -1

//: Nil-Coalescing Operator
//: a ?? b means a != nil ? a! : b



//: ******** Range Operator
//: Closed Range Operator , a...b ,[a, b]
//: Half-Open Range Operator , a..<b ,[a, b)
//: One-Sided Ranges 单边, [2...]、[..<2]
var list = [0, 1, 2, 3, 4]
for num in list[..<2] {
  
}
//: 范围检查
let range = ...5
range.contains(3)
range.contains(0)
range.contains(-1)

//: Logical Operators
//: #Swift的&&和||是左关联，这意味着具有多个逻辑运算符的复合表达式首先计算最左边的子表达式。
{% endhighlight %}


## 0x03 Strings and Characters

{% highlight ruby %}
// 多行字符串文字
let quotation = """
The White Rabbit put on his spectacles.  "Where shall I begin,
please your Majesty?" he asked.

"Begin at the beginning," the King said gravely, "and go on
till you come to the end; then stop."
"""

/*
 字符串文字可以包含以下特殊字符：
 转义的特殊字符\0（空字符）、\\（反斜杠）、\t（水平制表符）、\n（换行）、\r（回车）、\"（双引号）和\'（单引号）

 任意 Unicode 标量值，写为\u{n}，其中n是 1-8 位十六进制数（Unicode 在下面的 Unicode 中讨论）

 */

let wiseWords = "\"Imagination is more important than knowledge\" - Einstein"
// "Imagination is more important than knowledge" - Einstein
let dollarSign = "\u{24}"        // $,  Unicode scalar U+0024
let blackHeart = "\u{2665}"      // ♥,  Unicode scalar U+2665
let sparklingHeart = "\u{1F496}" // 💖, Unicode scalar U+1F496

/*
 因为多行字符串文字使用三个双引号而不是一个，所以您可以在多行字符串文字中包含一个双引号 ( ") 而无需对其进行转义。要在多行字符串中包含文本"""，请转义至少一个引号。例如：
 */

//let threeDoubleQuotationMarks = """
//Escaping the first quotation mark \"""
//Escaping all three quotation marks \"\"\"
//"""

/*
 扩展字符串分隔符
 您可以将字符串文字放在扩展定界符中，以在字符串中包含特殊字符而不调用它们的效果
 */

// Line 1\nLine 2
let t = #"Line 1\nLine 2"#
print(t)

/*
 Line 1
 Line 2

 */
let t1 = #"Line 1\#nLine 2"#
print(t1)


let threeMoreDoubleQuotationMarks = #"""
Here are three more double quotes: """
"""#

// note 字符串是值类型


// 使用字符
for character in "Dog!🐶" {
    print(character)
}

let exclamationMark: Character = "!"

let catCharacters: [Character] = ["C", "a", "t", "!", "🐱"]
let catString = String(catCharacters)
print(catString)
// Prints "Cat!🐱"

print(#"Write an interpolated string in Swift using \(multiplier)."#)
print(#"6 times 7 is \#(6 * 7)."#)


//Extended Grapheme Clusters

let eAcute: Character = "\u{E9}"                         // é
let combinedEAcute: Character = "\u{65}\u{301}"          // e followed by
// eAcute is é, combinedEAcute is é

let precomposed: Character = "\u{D55C}"                  // 한
let decomposed: Character = "\u{1112}\u{1161}\u{11AB}"   // ᄒ, ᅡ, ᆫ
// precomposed is 한, decomposed is 한


let regionalIndicatorForUS: Character = "\u{1F1FA}\u{1F1F8}"
// regionalIndicatorForUS is 🇺🇸


var word = "cafe"
print("the number of characters in \(word) is \(word.count)")
// Prints "the number of characters in cafe is 4"

word += "\u{301}"    // COMBINING ACUTE ACCENT, U+0301

print("the number of characters in \(word) is \(word.count)")
// Prints "the number of characters in café is 4"

/*
 字符串索引
 每个String值都有一个关联的索引类型, String.Index，它对应于每个值Character在字符串中的位置。
 如上所述，不同的字符可能需要不同数量的内存来存储，因此为了确定哪个Character在特定位置，
 您必须从该 的开头或结尾遍历每个 Unicode 标量String。出于这个原因，Swift 字符串不能被整数值索引。
 startIndex 是第一字符位置
 endIndex 是最后一个字符位置，不是下标有效参数
 如果一个 String is empty，startIndex == endIndex
 */

let greeting = "Guten Tag!"
greeting[greeting.startIndex]
// G
greeting[greeting.index(before: greeting.endIndex)]
// !
greeting[greeting.index(after: greeting.startIndex)]
// u
let index = greeting.index(greeting.startIndex, offsetBy: 7)
greeting[index]
// a

//greeting[greeting.endIndex] // Error
//greeting.index(after: greeting.endIndex) // Error

/*
 使用 indices 属性访问字符串中单个字符
 */
for index in greeting.indices {
    print("\(greeting[index]) ", terminator: "")
}

/*
 Note
 您可以在任何符合 Collection 协议的类型上使用 startIndex 和 endIndex 属性，
 以及 index(before:)、index(after:) 和 index(_:offsetBy:) 方法。
 这包括字符串，如此处所示，以及集合类型，如 Array、Dictionary 和 Set
 */


/*
 Inserting and Removing

 */

var welcome = "hello"
welcome.insert("!", at: welcome.endIndex)
// welcome now equals "hello!"

welcome.insert(contentsOf: " there", at: welcome.index(before: welcome.endIndex))
// welcome now equals "hello there!""

welcome.remove(at: welcome.index(before: welcome.endIndex))
// welcome now equals "hello there"

let range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex
welcome.removeSubrange(range)
// welcome now equals "hello"

/*
 您可以对任何符合 RangeReplaceableCollection 协议的类型使用 
 insert(_:at:)、insert(contentsOf:at:)、remove(at:) 和 removeSubrange(_:) 方法。
 这包括字符串，如此处所示，以及集合类型，如 Array、Dictionary 和 Set。
 */


// Substrings
/*
 当您从字符串中获取子字符串时——例如，使用下标或类似 prefix(_:) 的方法——结果是 Substring 的一个实例，而不是另一个字符串。 
 Swift 中的子字符串与字符串有大部分相同的方法，这意味着您可以像处理字符串一样使用子字符串。
 但是，与字符串不同的是，在对字符串执行操作时，您仅在很短的时间内使用子字符串。当您准备好将结果存储更长时间时，
 您可以将子字符串转换为 String 的实例。例如：
 */

let greeting1 = "Hello, world!"
let index1 = greeting1.firstIndex(of: ",") ?? greeting1.endIndex
let beginning = greeting1[..<index1]
// beginning is "Hello"
type(of: greeting1)

type(of: beginning) // Substring

// Convert the result to a String for long-term storage.
let newString = String(beginning)

/*
 在上面的示例中，greeting 是一个字符串，这意味着它有一个内存区域，用于存储组成字符串的字符。
 因为开头是问候语的子字符串，所以它重用了问候语使用的内存。
 相反，newString 是一个字符串——当它从子字符串创建时，它有自己的存储空间。
 
 String 和 Substring 都符合 StringProtocol 协议，这意味着字符串操作函数通常可以方便地接受 StringProtocol 值。
 您可以使用 String 或 Substring 值调用此类函数。
 */

// note 出于性能考虑， substring 还是使用 string 的内存

/*
 Comparing Strings
 使用 == 和 != 进行比较
 
 如果两个 String 值（或两个 Character 值）的扩展字素簇在规范上是等价的，则它们被认为是相等的。如果扩展字素簇具有相同的语言含义和外观，则它们在规范上是等效的，
 即使它们是由幕后的不同 Unicode 标量组成的
 */
let quotation1 = "We're a lot alike, you and I."
let sameQuotation = "We're a lot alike, you and I."
if quotation1 == sameQuotation {
    print("These two strings are considered equal")
}
// Prints "These two strings are considered equal"

/*
 例如，拉丁小写字母 E WITH ACUTE (U+00E9) 在规范上等同于拉丁小写字母 E (U+0065) 后跟 COMBINING ACUTE ACCENT (U+0301)。这两个扩展字素簇都是表示字符 é 的有效方式，因此它们被认为是规范等价的：
 */
// "Voulez-vous un café?" using LATIN SMALL LETTER E WITH ACUTE
let eAcuteQuestion = "Voulez-vous un caf\u{E9}?"

// "Voulez-vous un café?" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT
let combinedEAcuteQuestion = "Voulez-vous un caf\u{65}\u{301}?"

if eAcuteQuestion == combinedEAcuteQuestion {
    print("These two strings are considered equal")
}
// Prints "These two strings are considered equal"


/*
 相反，英语中使用的拉丁大写字母 A（U+0041 或“A”）不等同于俄语中使用的西里尔大写字母 A（U+0410 或“А”）。
 这些字符在视觉上相似，但没有相同的语言含义：
 
 Swift 中的字符串和字符比较对语言环境不敏感。
 */

let latinCapitalLetterA: Character = "\u{41}"

let cyrillicCapitalLetterA: Character = "\u{0410}"

if latinCapitalLetterA != cyrillicCapitalLetterA {
    print("These two characters aren't equivalent.")
}
// Prints "These two characters aren't equivalent."

/*
 hasPrefix(_:)
 
 hasSuffix(_:)
 */

/*
 字符串的 Unicode 表示
 详细见 https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html
 */


/*:
 Swift的字符串和字符类型提供了一种快速、符合Unicode的方式来处理代码中的文本。

 ## 每个字符串都由独立于编码的Unicode字符组成，并支持在各种Unicode表示中访问这些字符。
 */

let quotation = """
  the whiste,
please

till
"""

/*:
 当您的源代码在多行字符串文字中包含换行符时，该换行符也会出现在字符串的值中。如果您想使用换行符使源代码更容易阅读，但不希望换行符成为字符串值的一部分，请在这些行末尾写一个反斜杠（\）：
 */
let quotation2 = """
  the whiste, \
please

till
"""

/*:
 如何缩进
 ## 结尾引号（“”）前的空格告诉Swift在所有其他行之前要忽略哪个空格。
 但是，如果您在行的开头写空格，除了结束引号之前的内容外，则该空格也包括在内。
 
 */
let quotation3  = """
   the whiste, \
   please

   till
   """

/*:
 一个任意的Unicode标量值，写为\u{n}
 其中n是一个1-8位十六进制数字（Unicode在下面的Unicode中讨论）
 */

//: 转义字符 用 \
let wiseWords = "\" Image"

// u+0024
let dollarSign = "\u{24}"
// u+2665
let blackHeart = "\u{2665}"
// u+1F496
let sparklingHeart = "\u{1F496}"

//let threeMark = """
//escaping the first \"""
//escaping the second \"\"\"
//"""

let threeMarks = #"""
Here are three more quotes: """
"""#

//: String are Value Types
/*:
 Swift的默认复制字符串行为确保当函数或方法向您传递字符串值时，很明显，无论它来自哪里，您都拥有该确切的字符串值。您可以放心，除非您自己修改，否则传递的字符串不会被修改。

 在幕后，Swift的编译器优化了字符串使用，因此只有在绝对必要的情况下才能进行实际复制。这意味着在使用字符串作为值类型时，您总是会获得出色的性能。
 */

let catChars: [Character] = ["C", "a", "t", "!"]
let catStr = String(catChars)

/*:
 您无法将字符串或字符附加到现有字符变量，因为字符值必须仅包含单个字符。
 */

print(#"6 times 7 is \#(6 * 7)"#)
print(#"6 times 7 is \(6 * 7)"#)



//: Unicode
/*:
 Unicode是在不同系统中编码、表示和处理文本的国际标准。
 它使您能够以标准化的形式表示来自任何语言的几乎任何字符，
 并从外部来源（如文本文件或网页）读取和写入这些字符。
 ****Swift的字符串和字符类型完全符合Unicode。
 
 */

/*:
 Unicode标量值

 在幕后，Swift的原生字符串类型是根据Unicode标量值构建的。
 Unicode标量值是字符或修饰符的唯一21位数，例如拉丁小字母A（“a”）的U+0061，或前方婴儿小鸡的U+1F425（“🐥”）。

 请注意，并非所有21位Unicode标量值都分配给一个字符——一些标量保留用于未来的分配或用于UTF-16编码。
 分配给字符的标量值通常也有一个名称，例如上面示例中的拉丁小字母A和前置小鸡。
 
 *** 小结：大部分21位Unicode标量值都分配给一个字符
 
 
 */

/*:
 扩展的语法集群

 Swift类型的每个实例都代表一个扩展的字素集群。扩展字素集群是一个或多个Unicode标量的序列，
 （当组合时）产生单个人类可读字符。
 
 
 */

/*:
 这里有一个例子。字母é可以表示为单个Unicode标量é（带有急性的拉丁小字母E或U+00E9）。然而，同一字母也可以表示为一对标量——标准字母e（拉丁小字母E，或U+0065），然后是组合急性口音标量（U+0301）。COMBINING ACUTE ACCENT标量以图形方式应用于其之前的标量，当它由Unicode感知的文本渲染系统渲染时，将e转换为é。

 在这两种情况下，字母é都表示为单个Swift字符值，表示扩展的字素集群。在第一种情况下，集群包含单个标量；在第二种情况下，它是一个由两个标量组成的集群：
 
 *****即多个标量可组成单个字符
 
 */

let eAcute: Character = "\u{E9}"
let combinedEAcute: Character = "\u{65}\u{301}"

{% endhighlight %}

## 0x04 Collection Types

{% highlight ruby %}
// ## Collection Types
// arrays, sets, and dictionaries

// Swift’s Array type is bridged to Foundation’s NSArray class.

// ## Array
// Creating an Empty Array
var someInts: [Int] = []
print("someInts is of type [Int] with \(someInts.count) items.")

// Creating an Array with a Default Value
var threeDoubles = Array(repeating: 0.0, count: 3)
// threeDoubles is of type [Double], and equals [0.0, 0.0, 0.0]

var anotherThreeDoubles = Array(repeating: 2.5, count: 3)
// anotherThreeDoubles is of type [Double], and equals [2.5, 2.5, 2.5]

var sixDoubles = threeDoubles + anotherThreeDoubles
// sixDoubles is inferred as [Double], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]

// Creating an Array with an Array Literal
var shoppingList: [String] = ["Eggs", "Milk"]
// shoppingList has been initialized with two initial items


// Accessing and Modifying an Array
if shoppingList.isEmpty {
    print("The shopping list is empty.")
} else {
    print("The shopping list isn't empty.")
}
// Prints "The shopping list isn't empty."

shoppingList.append("Flour")

shoppingList += ["Baking Powder"]
shoppingList += ["Chocolate Spread", "Cheese", "Butter"]

var firstItem = shoppingList[0]
shoppingList[0] = "Six eggs"

print("shoppingList----")
print(shoppingList)
// 覆盖掉 index = 4~6 位置
shoppingList[4...6] = ["Bananas", "Apples"]

print(shoppingList)

shoppingList.insert("Maple Syrup", at: 0)


let mapleSyrup = shoppingList.remove(at: 0)

for item in shoppingList {
    print(item)
}

for (index, value) in shoppingList.enumerated() {
    print("Item \(index + 1): \(value)")
}


// ## Sets

// Swift’s Set type is bridged to Foundation’s NSSet class.
// ******** Note Hash Values for Set Types, 类型必须提供 hashable 的 方法
// Swift的所有基本类型（如String、Int、Double和Bool）都是可散列的，可以用作集值类型或字典键类型。
// 默认情况下，没有关联值的枚举用例值（如枚举中所述）也是可散列的
// 你自定义类型也可作为 Set 的 value 但是要实现 Hashable protocol

// Creating and Initializing an Empty Set

var letters = Set<Character>()
print("letters is of type Set<Character> with \(letters.count) items.")
// Prints "letters is of type Set<Character> with 0 items."

letters.insert("a")
// letters now contains 1 value of type Character
letters = []
// letters is now an empty set, but is still of type Set<Character>

// Creating a Set with an Array Literal
var favoriteGenres: Set<String> = ["Rock", "Classical", "Hip hop"]
// favoriteGenres has been initialized with three initial items

var favoriteGenress: Set = ["Rock", "Classical", "Hip hop"]
print("favoriteGenress is of \(type(of: favoriteGenress)).")

// Accessing and Modifying a Set
print("I have \(favoriteGenres.count) favorite music genres.")

if favoriteGenres.isEmpty {
    print("As far as music goes, I'm not picky.")
} else {
    print("I have particular music preferences.")
}
// Prints "I have particular music preferences."

// add new item
favoriteGenres.insert("Jazz")
// favoriteGenres now contains 4 items


if let removedGenre = favoriteGenres.remove("Rock") {
    print("\(removedGenre)? I'm over it.")
} else {
    print("I never much cared for that.")
}
// Prints "Rock? I'm over it."

// Iterating Over a Set

for genre in favoriteGenres {
    print("\(genre)")
}
// Classical
// Jazz
// Hip hop

// Swift’s Set type doesn’t have a defined ordering. To iterate over the values of a set in a specific order, use the sorted() method, which returns the set’s elements as an array sorted using the < operator.
for genre in favoriteGenres.sorted() {
    print("\(genre)")
}
// Classical
// Hip hop
// Jazz


// Fundamental Set Operations
// setOperations.png
let oddDigits: Set = [1, 3, 5, 7, 9]
let evenDigits: Set = [0, 2, 4, 6, 8]
let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]

oddDigits.union(evenDigits).sorted()
// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
oddDigits.intersection(evenDigits).sorted()
// []
oddDigits.subtracting(singleDigitPrimeNumbers).sorted()
// [1, 9]
oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()
// [1, 2, 9]


// Set Membership and Equality
// Use the “is equal” operator (==) to determine whether two sets contain all of the same values.
// Use the isSubset(of:) method to determine whether all of the values of a set are contained in the specified set.

// Use the isSuperset(of:) method to determine whether a set contains all of the values in a specified set.


// Use the isStrictSubset(of:) or isStrictSuperset(of:) methods to determine whether a set is a subset or superset, but not equal to, a specified set.


// Use the isDisjoint(with:) method to determine whether two sets have no values in common.

let houseAnimals: Set = ["🐶", "🐱"]
let farmAnimals: Set = ["🐮", "🐔", "🐑", "🐶", "🐱"]
let cityAnimals: Set = ["🐦", "🐭"]

houseAnimals.isSubset(of: farmAnimals)
// true

houseAnimals.isStrictSubset(of: farmAnimals)
// true

farmAnimals.isSuperset(of: houseAnimals)
// true


// isDisjoint 没有交集
farmAnimals.isDisjoint(with: cityAnimals)
// true



// ## Dictionaries
// Swift’s Dictionary type is bridged to Foundation’s NSDictionary class.
// Dictionary<Key, Value>
// *********** Note: A dictionary Key type must conform to the Hashable protocol, like a set’s value type.
// 您还可以将字典的类型以简写形式写为 [Key: Value]

// Creating an Empty Dictionary
var namesOfIntegers: [Int: String] = [:]
// namesOfIntegers is an empty [Int: String] dictionary
namesOfIntegers[16] = "sixteen"
// namesOfIntegers now contains 1 key-value pair
namesOfIntegers = [:]
// namesOfIntegers is once again an empty dictionary of type [Int: String]

var airports: [String: String] = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]

if airports.isEmpty {
    print("The airports dictionary is empty.")
} else {
    print("The airports dictionary isn't empty.")
}
// Prints "The airports dictionary isn't empty."

airports["LHR"] = "London"

// updateValue 更新 value，同时返回旧值
if let oldValue = airports.updateValue("Dublin Airport", forKey: "DUB") {
    print("The old value for DUB was \(oldValue).")
}
// Prints "The old value for DUB was Dublin."

if let airportName = airports["DUB"] {
    print("The name of the airport is \(airportName).")
} else {
    print("That airport isn't in the airports dictionary.")
}
// Prints "The name of the airport is Dublin Airport."

airports["APL"] = nil


if let removedValue = airports.removeValue(forKey: "DUB") {
    print("The removed airport's name is \(removedValue).")
} else {
    print("The airports dictionary doesn't contain a value for DUB.")
}
// Prints "The removed airport's name is Dublin Airport."

// Iterating Over a Dictionary
for (airportCode, airportName) in airports {
    print("\(airportCode): \(airportName)")
}
// LHR: London Heathrow
// YYZ: Toronto Pearson

for airportCode in airports.keys {
    print("Airport code: \(airportCode)")
}
// Airport code: LHR
// Airport code: YYZ

for airportName in airports.values {
    print("Airport name: \(airportName)")
}
// Airport name: London Heathrow
// Airport name: Toronto Pearson


// If you need to use a dictionary’s keys or values with an API that takes an Array instance, initialize a new array with the keys or values property:
let airportCodes = [String](airports.keys)
// airportCodes is ["LHR", "YYZ"]

let airportNames = [String](airports.values)
// airportNames is ["London Heathrow", "Toronto Pearson"]

// Swift’s Dictionary type doesn’t have a defined ordering. To iterate over the keys or values of a dictionary in a specific order, use the sorted() method on its keys or values property.
{% endhighlight %}





