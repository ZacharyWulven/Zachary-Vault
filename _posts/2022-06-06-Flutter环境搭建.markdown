---
layout: post
title: Flutter环境搭建
date: 2022-06-06 16:45:30.000000000 +09:00
tag: Flutter
---


Flutter 是一个 UI SDK，可以进行移动端、Web 端（beta 版本）、桌面的跨平台解决方案。
Flutter 的 UI 渲染性能很好，在生产环境 Flutter 将代码编译成机器码执行，并充分利用 GPU 的图形加速能力，Flutter 即使在低配手机也能每秒 60 帧。
Flutter 引擎使用 C++ 编写。支持 Hot Reload （热重载）。


### 跨平台方案历史
#### 跨平台解决方案一：Webview
基于 JavaScript 和 Webview。

#### 跨平台解决方案二：React Native（RN）
RN 通信比较低效，不基于 Webview。必须通过某些桥接方式先转成原生后进行调用，之后再进行渲染。通过 JavaScript 虚拟机扩展调用系统组件，由安卓或 iOS 系统进行组件渲染。

#### 跨平台解决方案三：Flutter
Flutter 利用 Skia 绘制引擎，直接通过 CPU GPU 进行绘制，不需要依赖任何原生控件。有自己独立的绘制闭环。


### Flutter 绘制原理
1. GPU 将信号同步到 UI 线程
2. UI 线程用 Dart 来构建图层树
3. 图层树在 GPU 线程进行合成
4. 合成后的视图数据提供给 Skia 引擎
5. Skia 引擎通过 OpenGL 或 Vulkan 将显示内容提供给 GPU


{% highlight ruby %}
当图片连续播放频率超过 16 帧（16张图），人眼就感觉很流畅。
{% endhighlight %}

#### 两个重要的概念
* 帧率（fps）：Frames Per Second
* 刷新率：显示器的刷新频率

#### 绘制细节
GPU 绘制图形，GPU 绘制图像放到 buffer 缓存，屏幕刷新就会从 buffer 里取数据，然后用于显示在屏幕上。
CPU/GPU 向 Buffer 中生成图像，屏幕从 Buffer 中取图像、刷新后展示，是一个典型的生产者--消费者模型。
理想情况帧率和刷新率相同，每绘制一帧就显示一帧，但实际往往不同，如果没有锁来控制同步，很容易出现撕裂问题。

撕裂问题：即当帧率大于刷新率时，上半部分显示的前一帧，下半部分显示的后一帧情况。

如何解决 撕裂：通过双重缓存（Double Buffer）和 VSync（垂直信号），
两个缓存区分别为 Back Buffer 和 Frame Buffer。
GPU 向 Back Buffer中写数据，屏幕从 Frame Buffer 中读数据。
Vsync 信号负责调度从 Back Buffer 到 Frame Buffer的复制操作。
当屏幕显示完当前一帧，会发出 Vsync 信号，将下一帧从 Back Buffer 复制到 Frame Buffer，之后通知 GPU 绘制下一画面。
当然底层不是通过复制而是通过交换内存地址，只有 Vsync 信号产生时，GPU 才会绘制画面。

但双重缓存容易产生 jank（卡顿）现象，当 CPU 和 GPU 绘制时间过长就会产生 Jank（画面停顿），CPU 提供数据让 GPU 进行绘制。

三重缓存即多缓存一个 buffer 作为备用。


### 渲染引擎 Skia
Skia 就是 Flutter 向 GPU 提供数据的途经。
Skia (全称 skia Graphics Library)是一个由 C++ 编写的开源图形库。
Skia 公司能在低端手机上呈现高质量2D图形，被 Google 收购了。
而安卓就是基于 Skia 绘制的，Skia 是安卓官方图像渲染引擎，但对 IOS Skia 是跨平台的，嵌入到了 Flutter 的 IOS SDK 中，替代了 Core Graphic/Core Animation/Core Text，所以打出的 app 包会比安卓大一些。


### 环境搭建
1. 下载 Flutter SDK：
{% highlight ruby %}
https://docs.flutter.dev/development/tools/sdk/releases?tab=macos
{% endhighlight %}

2. 配置 Flutter 环境变量
去目录 ~/.bash_profile，修改 ~/.bash_profile，如果用了 zsh 则修改 ~/.zshrc 文件
{% highlight ruby %}
配置 Flutter 环境变量
export FLUTTER_HOME=/Users/zacharyah/Tech/Flutter/flutter
export PATH=$PATH:$FLUTTER_HOME/bin
export PATH=$PATH:$FLUTTER_HOME/bin/cache/dart-sdk/bin    //配置 Dart 环境变量

配置 Flutter 镜像
export PUB_HOSTED_URL=https://pub.flutter-io.cn
export FLUTTER_STOREAGE_BASE_URL=https://storage.flutter-io.cn
{% endhighlight %}

如果修改完没有生效则，可以执行命令 source  ~/.bash_profile       

3. 命令行执行 flutter --version 查看 flutter 是否安装好，
4. 命令行执行 dart --version 查看 dart 是否安装好  
5. 命令行执行 flutter doctor 检测环境

以上 3、4 步能正常显示版本说明安装正常。此时环境搭建完成

{% highlight ruby %}
https://docs.flutter.dev/get-started/install/macos
{% endhighlight %}

执行命令 flutter create 项目名称，可以创建 flutter 项目，flutter run 可以运行。

### VSCode VS Android Studio
推荐学习 Dart 语法使用 VSCode，开发使用 Android Studio。
无论使用哪个都需要安装 Flutter 和 Dart 插件。
