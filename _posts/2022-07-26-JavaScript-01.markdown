---
layout: post
title: JavaScript-01
date: 2022-07-26 16:45:30.000000000 +09:00
tag: javascript
---

## 0x01 A tour
{% highlight ruby %}
console.log("Hello World!");


let book = { //对象包含在一个大括号中
    topic: "JavaScript", //属性 topic 的值是 JavaScript
    edition: 7
};

book.topic
book["edition"] // => 另一种访问属性的方式
book.author = "tom" //通过赋值创建新属性
book.contents = {} // 没有属性的空对象

book.contents?.ch01?.sect1 // book.contents 没有 ch01 这个属性

let points = [{x: 0, y: 0}, {x: 1, y: 1}] //数组元素时对象
console.log(points);

// a 形式的注释意味着注释前的代码运行后，a 的值是 42
// a ! 形式的注释意味着注释前代码抛出了异常，！后边的内容解释抛出异常的原因

// 表达式只用于计算值
let x = 2, y = 3;
x === y  // => false 相等操作符
x !== y  // => true 不相等操作符

function plus(x) {
    return x + 1
}
console.log(plus(1))

Note
ES6 及以后有一种定义函数的简写方式，使用 => 来分隔参数列表和函数体
因此这种方式被称为箭头函数，
常用于把一个未命名的函数作为参数传给另一个函数
Note
const plus1 = x => x + 1
console.log(plus1(1))

const square = x => x * x

//所有 js 对象和数组都有方法

let a = []
a.push(1, 2, 3)
console.log(a)
console.log(a.reverse())

points.dist = function() {
    let p1 = this[0] // this 即 points 数组
    let p2 = this[1]
    let a = p2.x - p1.x
    let b = p2.y - p1.y
    return Math.sqrt(a * a + b * b)
}

// for 
function sum(array) {
    let sum = 0
    for (let x of array) {
        sum += x
    }
    return sum
}
console.log("sum is", sum([1,2,3,4]))

function factorial(n) {
    let product = 1
    while(n > 1) {
        product *= n
        n--;
    }
    return product
}

function factorial2(n) {
    let i, product = 1
    for(i = 2; i < n; i++) {
        product *= i
    }
    return product
}
{% endhighlight %}

## 0x02 词法结构
* JavaScript 区分大小写
* JavaScript 忽略程序记号 token 之间的空格，也忽略换行符，tab ASCII 控制符和 Unicode 间格识别为空格；将换行和回车识别为终止符

### 注释
* 单行以 // 开头
* 多行 /* */

### 标识符
* 必须以字母、下划线、$ 开头
* 后边可以是字母、下划线、$ 和数字

JavaScript 是使用 Unicode 字符集编写的，因此在字符串和注释中可以使用任意 Unicode 字符，建议标识符使用 ASCII、字母和数字，
标识符不支持表情
*  打印一个笑脸，console.log("\u{1f600}");

### 可选的分号
* JavaScript 使用分号分隔语句
* 如果两条语句分别写在两行，通常可以省略它们之间的分号
* 如果接下来的记号是 } 也可省略分号

* Note 最好是分号，分号意味着一条语句结束就可以进行解释了。

* JavaScript 并非任何时候都把换行符当做分号，而只在不隐式添加分号就无法解析代码情况下才这么做，
确切的说只在下一个非空格字符无法被解释为当前语句一部分时才把换行符当做分号

* 有些程序员喜欢在所有语句前加分号，这样即使前面语句被修改也不会影响当前语句
{% highlight ruby %}
Note 例如
let x0 = 0
; [x0, x0 + 1, x0 + 2].forEach(console.log)
{% endhighlight %}

### JavaScript 不能把第二行解析为第一行的连续部分时，对换行符的解释有三种例外情况

* 1 涉及 return、throw、yield、break、continue 语句后有其他字符+换行符
{% highlight ruby %}
如 return 
true;

则 js 解释为 return; true;

这意味着一定不能在 return、throw、yield、break、continue 后与它后边的表达中间加换行符
{% endhighlight %}

* 2 涉及 ++、--，作为后置操作符时必须与自己操作表达式在同一行
* 3 涉及 =>，=> 必须跟参数列表在同一行


## 0x03 类型、值和变量
### JavaScript 类型分两类
1. 原始类型
* Note 存储在 stack 中，栈内存赋值是 拷贝
* 数值：默认是浮点数
* 字符串
* 布尔型
* null，属于特殊类型
* undefined，属于特殊类型
* ES6 新增了特殊类型 Symbol，用于对语言进行扩展而不破坏向后兼容性

2. 对象类型：
* Note 引用值，存储在 heap 里，引用值在栈上拷贝过去是地址
* Note 任何不是数值、字符串、布尔、符号、null、undefined 的值都是对象，对象是属性的集合
* 对象是一个命名值的无序集合
* 数组表示一个数字值的有序集合，数组本身有区别于普通对象的行为
* JavaScript 与静态语言的区别在于函数和类不仅仅是语言的语法，它们本身就是可以被 JavaScript 程序操作的值。
函数和类也是特殊的对象

### 内存管理
JavaScript 有自动垃圾回收机制，当一个值无法触达时，或当程序无法以任何方式引用这个值时，解释器就知道这个值已经用不到了，
会自动释放它占用的内存。JavaScript 程序员要留意，不能让某些值在不经意间存留过长时间后仍可触达，从而导致无法被回收

### 类型
* Note：JavaScript 中只有 null 和 undefined 是不能调用方法的。
* Note：JavaScript 对象类型是可修改的（mutable），原始类型：数值、字符串、布尔、符号、null、undefined 的值是不可修改的
* JavaScript 可以自由的转换不同类型的值，比如程序期待一个字符串，而你提供的是数值，则这个数值会自动转为字符串
* 常量声明用 const
* 变量声明用 let（较老的版本使用 var）
* JavaScript 中常量和变量是无类型的，声明不会限定赋值的类型

### 数值
* JavaScript 主要数值类型是 Number 用于表示整数和近似实数
* JavaScript 中某些操作如索引或位运算是按照 32 位整数计算的
* 数值真正出现在程序中称为数值字面量，任何数值字面量前都可以加减号将数值变为负值

### 整数字面量
* 0x 或 0X 表示 16 进制，例如 0xff
* 0b 或 0B 表示二进制，例如 0b1011
* 0o 或 0O 表示八进制，例如 0o377

### 浮点数字面量
格式 [digits][.digits][(E|e)[(+\|-)] digits]

### 数值字面量
{% highlight ruby %}
let billion = 1_000_000_000
let bytes = 0x89_AB_CD_ED
let bits = 0b0001_1101_0111
let fraction = 0.123_456_789
{% endhighlight %}

### Infinity 与 NaN

JavaScript 中的算术遇到上溢出、下溢出、或被零除时不会发生错误
* 在数值结果超过最大时结果是 Infinity
* 当负数的绝对值超过了最大可表示负数的绝对值时，结果是 -Infinity
* 除 0 返回 Infinity 或 -Infinity
* 但 0 除以 0 是一个没有意义的值，结果是“非数值” (Nan, Not a Number)
* 无穷除以无穷、负数的平方根或午饭转换为数值的非数值都是 NaN

{% highlight ruby %}
Number.POSITIVE_INFINITY  // => Infinity
Number.MAX_VALUE * 2      // => Infinity 溢出
-Number.MAX_VALUE * 2     // => -Infinity 溢出

Number.NaN                // => NaN
Infinity / Infinity       // => NaN
0 / 0                     // => NaN
-Number.MIN_VALUE / 2     // => -0
-1 / Infinity             // => -0

Number.isFinite(x) x 不是 NaN、Infinity、-Infinity 时返回 true

NaN 与任何值比较都不相等，也不等于自己，可写成 x != x 或 Number.isNaN(x)
{% endhighlight %}

### 二进制浮点数与舍入错误
{% highlight ruby %}
let f1 = .3 - .2; // 0.09999999999999998
let f2 = .2 - .1; // 0.1
console.log("f1 = f2 is", f1 == f2);
切记不要比较他们相等
{% endhighlight %}

### 通过 BigInt 表示任意精度整数
* ES2020 为 JavaScript 定义了新的数值类型 BigInt。Chrome、Firfox Edge 和 Node 都实现了这个类型，Safari 也实现中
* 主要为表示 64 位整数
* 但不适合加密，因为它们没有考虑防止时序攻击
* 格式 一串数字后+n，默认是 10 进制，但可通过 0b、0o、0x 表示二进制、八进制、十六进制
* 可以用 BigInt() 函数把常规 JavaScript 数值或字符串转换为 BigInt 值
* BigInt 除法会丢弃余数并向下（向 0）舍入，其他运算符与常规的一样
* 不允许在使用算术操作符时混用 BigInt 和常规 JavaScript 数值类型；
{% highlight ruby %}
Note：BigInt 只能表示整数

BigInt(Number.MAX_SAFE_INTEGER);
let str = "1" + "0".repeat(100); // 1 后跟 100 个 0
BigInt(str);
console.log(BigInt(str));

== 与 === 区别
console.log(0 == 0n); // true
console.log(0 === 0n); // 也检查类型是否相等, false
{% endhighlight %}
* 位操作符通常可以用于 BigInt 操作数，但 Math 对象的任何函数都不接收 BigInt 操作数

### 日期和时间
* Date 对象
{% highlight ruby %}
let timestamp = Date.now(); // 当前时间的时间戳
let now = new Date();       // 当前时间的日期对象
let ms = now.getTime();      // 转换为毫秒时间戳
let iso = now.toISOString();  // 转换为标准格式的字符串
{% endhighlight %}

## 0x04 文本 String
* 字符串是 16 位值不可修改的有序序列，其中每个值都表示一个 Unicode 字符。
* 字符串的 length 属性是它包含的 16 位值的个数，空字符串长度为 0
* Note：JavaScript 没有表示单个字符串元素的专门类型，要表示一个 16 位值使用长度为 1 的字符串即可

### 字符、码点、JavaScript 字符串
* JavaScript 使用 Unicode 字符集的 UTF-16 编码，因此 JavaScript 字符串是无符号 16 位值的序列
* 最长用的 Unicode 字符的码点是 16 位的
* Note：码点超过 16 位的会用 UTF-16 编码为两个 16 位值的序列（称为 surrogate pair，代理对），
即一个长度为 2（2 个 16 位） 的 JavaScript 字符串可能表示只是一个 Unicode 字符
* Note：JavaScript 字符串操作方法一般是操作 16 位值，而不是字符，即不会对代理对有特殊处理，
不对字符串进行序列化可能不能保证字符串是格式正确的 UTF-16。
* 但 ES6 中，for/of 迭代的是字符

### 字符串字面量
* 可以把字符串放到单引号、双引号、反引号中
* 反引号可支持字符串字面量中包含 js 表达式
* ES5 后可以在每行末尾加反斜杠(\)，从而把字符串放到多行（OC 也行）
* Note 在使用单引号定界字符串时候，必须注意英文中的缩写和所有格，因为那就包含单引号
{% highlight ruby %}
let s = "one\
two\
three"
{% endhighlight %}

* js 与 HTML 混在一起时最好分别使用不同的字符串；如 
{% highlight ruby %}
<button onclick="alert('Thank you')">Click Me</button>
{% endhighlight %}

### 转义序列
{% highlight ruby %}
\0     Null 字符
\b     退格符
\t     水平制表符
\n     换行符
\v     垂直制表符
\f     进纸符
\r     回车符
\"     双引号
\'     单引号或撇号
\\     反斜杠
\xnn   由 2 位 十六进制数字 nn 指定的 Unicode 字符
\unnnn 由 4 位十六进制数字 nnnn 指定的 Unicode 字符
\u{n}  由码点 n 指定的 Unicode 字符，其中 n 是介于 0 和 10FFFF 之间的 1~6 位十六进制数字
{% endhighlight %}

### 使用 String
* 可以用 === 和 !== 操作符比较字符串
* Note：只有两个字符串具有完全相同的 16 位的序列时才相等
* Note：字符串比较是通过比较 16 位值完成的
* Note Note Note JavaScript 字符串是不可修改的
{% highlight ruby %}
let msg = "Hello," + "World"


msg.substring(1, 4)     // ell, [start,end)
msg.slice(1, 4);        // ell
msg.slice(-3);          // rld 最后 3 个字符
msg.split(",");         // [ 'Hello', 'World' ]

msg.indexOf("l");       // 第一个字母 l 的位置
msg.indexOf("l", 3)     // 位置 3 后第一个 l 的位置
msg.indexOf("zz");      // -1, msg 不包含子串 zz
msg.lastIndexOf("l")    // 最后一个字母 l 的位置

// ES6 后布尔值搜索函数 
msg.startsWith("Hell"); // true 以 Hell 开头
msg.endsWith("!");   // false 不以 ! 结尾
msg.includes("or");  // true, msg 包含 "or"

msg.replace("llo", "ya"); // Heya, world
msg.toLowerCase();        // 全小写
msg.toUpperCase();        // 全大写
msg.normalize();       //Unicode NFC 归一化： ES6 新增
msg.normalize("NFD");   // NFD 归一化，还有 "NFKC" 和 "NFKD"

msg.charAt(0);              // 第一个字符
msg.charCodeAt(0);          // 指定位置的 16 位数值
msg.codePointAt(0);         // ES6 适用于码点大于 16 位的情形


// ES2017 新增字符串填充函数
"x".padStart(3);            // "  x" 在左侧添加空格，让长度变为 3
"x".padEnd(3);              // "x  " 在右侧添加空格，让长度变为 3
"x".padStart(3, "\*");       // "\*\*x" 在左侧添加星号，让长度变为 3
"x".padEnd(3, "-");         // "x--", 在右侧添加星号，让长度变为 3

" test ".trim();            // "test" 删除开头和结尾空格
" test ".trimStart();       // "test " 删除开头的空格
" test ".trimEnd();         // " test" 删除结尾空格

msg.concat("!"); // Hello, World! ,可以用 + 代替
"<>".repeat(5);  // "<><><><><>" 重复 n 次

msg[0] 字符串也可看作是只读数值
{% endhighlight %}

### 模板字面量
* ${  } 括号内是表达式，求值后转换为字符串并插入模板中，替换 ${  }
{% highlight ruby %}

let name = "Bill";
let greeting = `Hello ${ name }` // Hello Bill


//
let errorMsg = `\
\u2718 Test failure at ${filenmae}:${linenumber}:
${exception}
Stack trace:
${stack}
`;
{% endhighlight %}

### 标签化模板字面量
* 如果在开头的反引号前有一个函数名，那么模板字面量中的文本和表达式的值将作为参数传递给这个函数
* 标签化模板字面量 的值就是这个函数的返回值
* 这个特性用于对某些值进行 HTML 或 SQL 转义，然后再插入文本

{% highlight ruby %}
`\n`.length            // 1 一个换行符
String.raw`\n`.length  // 2 一个反斜杠和字母 n
这个 case 反引号充当 () 作用
{% endhighlight %}

### 模式匹配 RegExp 正则表达式
{% highlight ruby %}
/^HTML/; // 匹配字符串开头字母 HTML
/[1-9][0-9]*/;  // 匹配非 0 数字，后面跟任意字符
/\bjavascript\b/i;  // 匹配 "javascript" 这个词，不区分大小写

let text = "testing: 1, 2, 3";
let pattern = /\d+/g;  // 匹配一个或多个数字
pattern.test(text); // true 存在匹配项
text.search(pattern);  // 9 第一个匹配项的位置
text.match(pattern);   // ["1", "2", "3"] 所有匹配项的数组
text.replace(pattern, "#");  // "testing: #, #, #"
text.split("/\D+/");       // ["", "1", "2", "3"] 基于非数字拆分
{% endhighlight %}

## 0x05 布尔值
* 只有两个值 true 或 false
* Note：JavaScript 中任何值都可以转换为布尔值 

下面这些值都转为 false
* undefined
* null
* 0 or -0
* NAN
* "" 空字符串

除上述 6 种情况，其他都转为 true
{% highlight ruby %}
if (o !== null) // o 不等于 null，if 被执行
if (o)          // 没上边那么严格，只要 o 不是 false 或其他假值，if 就会执行
{% endhighlight %}

* 布尔值有个 toString() 方法，将自己转化为字符串 "true" or "false"

## 0x06 null 与 undefined
1. null
* null 是特殊值，通常表示某个值不存在
* 对 null 使用 typeof 操作符返回字符串 "object"
* 用来表示没有值

2. undefined
* 表示值不存在，表示更深层次的不存在
* 变量的值未初始化时就是 undefined
* 没有明确返回值的函数返回的值是 undefined （有点类似 void）
* 没有传值的参数也是 undefined（有点类似 void） 
* undefined 是一个预定义的全局变量，而非 null 那样的关键字，实践中这点区别不重要
* 对 undefined 使用 typeof 返回 "undefined"，表示这个值是该特殊类型的唯一成员

### null VS undefined
* Note：== 操作符认为 null 与 undefined 相等
* 必须使用全等操作符 === ，因为他俩都是假性值 console.log(null === undefined); false
* null 与 undefined 都没有属性和方法
* Note：使用 . 或 [] 访问这俩值或方法会导致 TypeError
* undefined 可用于表示一种系统级别、意料之外或类似错误的没有值
* null 可以用于表示程序级别、正常或意料之中的没有值
* Note：实际编码中尽量避免使用 null 和 undefined，如果需要给一个变量赋值，或向函数传入这样一个值，通常使用 null

## 0x07 符号 Symbol
* 用于非字符串的属性名，js 的基础类型 Object 是一个属性无序集合，每个属性都有一个名字和一个值。
* 属性名通常是字符串，但 ES6 以及之后符号也可以作为属性名
* Symbol 类型没有字面量语法，要获得一个 Symbol 值，需要调用 Symbol() 函数，“返回唯一的符号值”
这个函数永远不会返回相同的值，即使每次传入的参数都一样。这意味着调用 Symbol() 函数能安全的为对象新增属性
* 类似的，如果定义了符号属性但没有共享相关符号，也可以确信程序中其他代码不会意外重写这个属性
* 符号可以用于迭代器，作为语言的扩展机制 Symbol.iterator

{% highlight ruby %}
let strname = "string name"; 
let symname = Symbol("proname"); // 可用于属性的符号
typeof strname; // 类型是字符串
typeof symname; // 类型是符号
let o = {};     // 创建新对象
o[strname] = 1; // 使用字符串定义一个属性
o[symname] = 2; // 使用符号定义一个属性
o[strname];
o[symname];

symname.toString() 函数
{% endhighlight %}

为了定义一些与其他代码共享的符号值，js 定义了一个全局符号注册表
* Symbol.for() 函数接收一个字符串参数，返回一个与该字符串关联的符号值
如果没有符号与该字符串关联，则会创建返回一个新符号，否则就返回已有符号
* Symbol.for() 与 Symbol() 完全不同，
* Symbol() 永远不会返回相同的值
* Symbol.for() 如果参数是以相同字符串传递时，始终返回相同值

{% highlight ruby %}
let ss = Symbol.for("shared");
let t = Symbol.for("shared");
console.log("ss === t is", ss === t);
console.log(ss.toString());
console.log(Symbol.keyFor(t));

每次 Symbol 返回不一样的值
console.log("test symbol is", Symbol("proname") === Symbol("proname")); // false

{% endhighlight %}

## 0x08 全局对象
* 全局对象的属性是全局性定义的标识符，可在 js 程序任何地方使用
* Note js 解释器启动后或每次浏览器加载新页面时，都会创建一个新的全局对象并为其添加一组初始的属性
1. undefine、Infinity、NaN 这样的全局变量
2. isNaN()、parseInt()、eval() 这样的全局函数
3. Date()、RegExp()、String()、Object()、Array() 这样的构造函数
4. Math 和 JSON 这样的全局对象

* 全局对象的初始属性并不是保留字，但他们应该都被当成保留字
* 在 Node 程序中始终可以通过 global 来引用全局对象
* 在浏览器中 Window 对象对浏览器窗口中所有 js 代码而言充当全局对象角色，Window 对象有一个自引用的 window 属性，可以引用全局对象
* 工作线程代码可以通过 self 引用它们的全局对象

## 0x09 不可修改的原始值 & 可修改的对象引用
1. 原始值（数值、字符串、布尔、符号、null、undefined）
* 原始值不可修改
* 原始值按值比较，即只有它们的值相同时才是相同的

2. 对象（数组、函数等）
* 对象是可修改的
* 被称为引用类型
* 对象是按引用比较的，即两个对象引用同一底层对象才是相等的

{% highlight ruby %}
let a2 = ["a", "b", "c"];
let c = Array.from(a2); ES6 中可以使用 Array.from 复制数组
console.log(a2 === c); // false
{% endhighlight %}

## 0x0A 类型转换
* js 会自动转换类型
* 如果就是想要数值，会尝试把你的值转为数值（无法进行有意义转换时就转换为 NaN）
* let n = 1 - "x", "x" 就被转为 NaN，因为 x 无法转换为数值
* "" 转换为布尔值是 false
* NaN 转换为布尔值是 false

### 转换与相等
js 有两个操作符用于测试两个值是否相等
* 一个是严格相等操作符 ===，如果两个值不是同一种类型，那么这个操作符就不会判断它们相等
* 由于js 在类型转换上很灵活，所以 == 操作符判定相等相对灵活些，下边结构都是 true
{% highlight ruby %}
null == undefined  // true
"0" == 0           // true
0 == false         // true
"0" == false       // true
{% endhighlight %}
* js 操作符和语句期待不同类型的值，if 语句会将 undefined 转换为 false，但 == 永远不会将其操作数转换为布尔

### 显示转换
* 执行 Boolean()、Number()、String() 转为各自类型
* 除了 null 和 undefined 之外所有值都有 toString() 方法，这函数返回结果通常与 String() 函数返回结果相同
{% highlight ruby %}
Boolean("3")
Number(false)
{% endhighlight %}

js 操作符会执行隐私转换
* Note：\+ 如果碰到字符串结果还是字符串，即 字符串 + 任何值 都还是字符串
* Note： 一元操作符 + 会把操作数转为 数值， +x 即 Number(x)
* Note： 一元操作符 ! 会把操作数转为 布尔， !!x 即 Boolean(x)
* Number 类型定义了 toString() 方法接收一个可选参数，指定基数，默认是 10 进制
{% highlight ruby %}
let n = 17
let binary = "0b" + n.toString(2); ”0b10001“
{% endhighlight %}

* Number 定义了转换字符串后控制小数部分
{% highlight ruby %}
let nn = 123456.789;
//toFixed 把数值转换为字符串可以指定小数点后位数
let f11 = nn.toFixed(0); // 123457
nn.toFixed(2); // 123456.79
console.log(f11);

//toExponential 使用指数计数法将数组转为字符串
nn.toExponential(1) // 1.2e+5
nn.toExponential(3) // 1.235e+5

// toPrecision 按照指定有效数字个数将数值转换为字符串
// 如果有效位数不足 会使用科学计数法
nn.toPrecision(4) // 1.235e+5
nn.toPrecision(7) // 123456.8

// 以上三种方法必要时会舍去末尾的数字或补零
{% endhighlight %}

* 把字符串传给 Number() 函数，会尝试把其当成整数或浮点数字面量来解析，但只能处理 10 进制的

### parseInt() 和 parseFloat() 
* 函数都是全局函数，不是任何类的方法，都会跳过开头的空格尽量多解析数字字符，忽略后边无关字符
* 如果第一个字符不是有效的数值字符将返回 NaN

{% highlight ruby %}
parseInt("3 blind mice"); // 3
parseFloat("3.14 meters");  // 3.14
parseInt("-12.34");  // -12
parseInt("0xFF");  // 255
parseInt("0xff");  // 255
parseInt("-0xff");  // -255
parseFloat(".1");  // 0.1
parseInt("0.1");  // 0
parseInt(".1");  // NaN 数值不能以 . 开头
parseFloat("$72.47");  // NaN 数值不能以 $ 开头
{% endhighlight %}

* parseInt() 接收可选的第二个参数，用于指定要解析数值的基数，范围为 2~36
{% highlight ruby %}
parseInt("11", 2); // 3
parseInt("ff", 16); // 255
parseInt("zz", 36); // 1295: (35 * 36) + 35
parseInt("077", 8); // 63
parseInt("077", 10); // 77
{% endhighlight %}

### 对象到原始值转换
js 对象到原始值转换的复杂性，主要原因是某些对象类型由不止一种原始值的表示，比如 Date 对象，可以用字符串表示也可用时间戳表示

js 定义了对象->原始值转换的 3 种基本算法
1. 偏字符串：该算法返回原始值，而且只要可能就返回字符串
* 首先尝试 toString() 方法，如果这个方法有定义且返回原始值，则 js 使用该原始值
* 如果 toString() 不存在或存在返回对象，则尝试 valueOf()，如果 valueOf() 存在且返回原始值，则 js 使用该值，否则转换失败，报 TypeError

2. 偏数值：该算法返回原始值，而且只要可能就返回数值
* 与偏字符串类似，只不过先尝试 valueOf()，再尝试 toString()
* Note Array 继承了默认 valueOf() 它不返回原始值，因此最终调用 toString()， 空数组转换为空串，空串转换为 0，只有一个元素的数组转换为该元素对应的数值

3. 无偏好：该算法不倾向任何原始值类型，而是由类定义自己的转换规则，js 内置类型除 Date 都实现了偏数值算法，Date 实现了偏字符串算法
* 取决于被换行对象的类型，如果是一个 Date 对象 则 js 使用偏字符串算法，如果是其他类型则使用偏数值算法

#### 用法
1. 对象转换为布尔值：所有对象都转换为 true
2. 对象转换为字符串：js 首先用偏字符串算法将它转换为一个原始值，然后将得到的原始值再转成字符串
* 比如使用 String() 函数或把对象插入模板字面量
* 即 对象->原生值->字符串
3. 对象转换为数值：js 先用偏数值算法把它转为一个原始值，然后再将得到的原始值再转成数值
* 即 对象->原生值->数值


#### 操作符转换特例
1. \+ 操作符
* 如果一个操作数是对象，js 会使用无偏好算法将对象转为原始值
* 如果两个操作数都是原始值，则先检查它们的类型：如果一个参数时字符串，则把两一个操作数转为字符串进行拼接，否则都转换为数值把它们相加
2. == 和 != 允许类型转换宽松方式执行相等或不相等
* 如果一个操作数是对象，另一个操作数是原始值，则这俩操作符会使用无偏好算法将对象转换为原始值，然后进行比较
3. <、<=、>、>= 即可比较数值也可比较字符串
* 如果一个操作数是对象，则会使用偏数值算法将对象转换为原始值，要注意偏数值算法返回的原始值不会再被转为数值
* Date 对象的数值可以用 < > 进行比较，但它的字符串表示则不行。

4. 所有对象都会继承两个在对象到原始值转换时使用的方法 toString() 和 valueOf()
* toString() 返回对象的字符串表示
* valueOf() 没有太明确的定义，认为它是把对象转换为代表对象的原始值（如果存储这样的原始值），一般 valueOf() 返回对象本身

#### 对象到原始值的转换算法





## 0x0B 变量声明与赋值
* ES6 以及之后使用 let 和 const 定义变量
* ES6 之前用 var，ES6 之前无法声明常量，语法与 let 相同

{% highlight ruby %}
变量：用 let 声明变量时不指定初始值，其值为 undefined

常量：用 const 声明，常量声明时必须初始化常量值
常量声明通常是全大写，例如 const H0 = 74;
只对必须不变的值使用常量
{% endhighlight %}

### for 中 let 和 const
{% highlight ruby %}
let list = [1, 2, 3]

for(let num in list) {
    console.log(num);
}

for(const num in list) {
    console.log(num);
}
{% endhighlight %}

### 作用域
* 如果声明位于顶级，在任何代码块外部，称为全局变量或常量，具有全局作用域
* 在 Node 和 客户端 JavaScript 模块中，全局作用域是它们的文件
* 在传统客户端 JavaScript 中全局作用域是定义它们的 HTML 文档，即如果有 <script> 标签声明了一个全局变量或常量，
则该变量或常量在同一个文档的任何 <script> 元素中都有定义
* 在同一作用域使用 let 或 const 声明同一个名字是语法错误的
* 在嵌套作用域中声明同名变量是合法的（虽然不推荐这样）

* Note js 变量声明与值的类型无关，js 可以保存任何类型的值
{% highlight ruby %}
这样是合法的
let i = 10;
i = "ten";
{% endhighlight %}

### 使用 var 声明变量
* ES6 之前用 var，ES6 之前无法声明常量，语法与 let 相同

与 let 区别
* 使用 var 声明的变量不具有块作用域，这种变量的作用域仅限于包含函数的函数体，无论嵌套层次多深
* 如果在函数外声明 var 则是一个全局变量，通过 var 声明的全局变量被实现为全局对象的属性，
1. 全局对象可通过 globalThis 引用。
2. 如果你声明了 var x = 2，类似等于 globalThis.x = 2。全局 var 属性不能用 delete 操作符删除。
3. 通过 let 和 const 声明的全局对象不是全局对象属性
* 与 let 不同，使用 var 多次声明同名变量是合法的，var 是函数作用域
* var 可以有作用域提升，该声明会被提高到包含函数的顶部，但 var 的初始化仍然在代码所在位置完成，只有变量定义转移到函数顶部，
所以如果在 var 初始化前使用它得到的值是 undefined，而 let 则会报错

### 解构赋值
ES6 新增实现一种复合与赋值语法，等号右边是数组或对象，左边是通过模拟数组或字面量语法指定多个变量
{% highlight ruby %}
let [h, g] = [1, 2]; // 相当于 let h = 1, g = 2
[h, g] = [h+1, g+1]; // 相当于 h = h + 1, g = g + 1
[h, g] = [g, h];     // 交换两个变量 
console.log([h, g]);

function toPolar(x, y) {
    return [Math.sqrt(x * x + y * y), Math.atan2(y, x)];
}

let [r, theta] = toPolar(1.0, 1.0);

let o1 = {x: 1, y: 2};
for(const [name, value] of Object.entries(o1)) {
    console.log(name, value);
}
{% endhighlight %}

* Note 解构左边与右边的数量不一定相同，左边多余的变量值设置为 undefined，右边多余的值会被忽略
{% highlight ruby %}
let [x1, y1] = [1]; // x1 == 1, y1 == undefined
[x1, y1] = [1,2,3]; // x1 == 1, y1 == 2, 3 is ignore
[,x1,,y1] = [1,2,3,4] // x1 == 2, y1 == 4
{% endhighlight %}

* 如果想把所有未使用或剩余的值收集到一个变量中，可以在左侧最后一个变量名前加 ...
{% highlight ruby %}
let [x, ...y] = [1,2,3,4]; // y == [2,3,4]


赋值也可以用于嵌套数组
let [a, [b, c]] = [1, [2, 2.5], 3]; // a == 1, b == 2, c == 2.5


赋值右边可以是任何可迭代的对象
let [first, ...rest] = "Hello"; // first == "H" rest == ["e", "l", "l", "o"]

右边是对象也可以
let color = {r: 0.0, g: 0.5, b: 1.0};
let {r, g, b} = color; // r == 0.0 g == 0.5 b == 1.0


// 相当于 const sin = Math.sin, cos = Math.cos, tan = Math.tan
const {sin, cos, tan} = Math;
如果左边包含一个不是 Math 的变量名，将被赋值为 undefined
这里解构对象的属性与左边变量名一致，但也不不必这样

// 相当于 const cosine = Math.cos, tangent = Math.tan
const {cos: cosine, tan: tangent} = Math;

右边是对象
let points = [{x: 1, y: 2},{x: 3, y: 4}];
let [{x: x1, y: y1}, {x: x2, y: y2}] = points;
// x1 == 1 y1 == 2, x2 == 3 y2 == 4

let points1 = {p1: [1, 2], p2: [3, 4]};
let {p1: [x3, y3], p2 :[x4, y4]} = points1;
// x3 == 1 y3 == 2, x4 == 3 y4 == 4
（但这样不易于理解）还不如 let x3 = points1.p1[0]

{% endhighlight %}


