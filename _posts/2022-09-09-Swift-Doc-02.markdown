---
layout: post
title: Swift-Doc-02
date: 2022-09-09 16:45:30.000000000 +09:00
tag: Swift
---

## 0x01 Control Flow
{% highlight ruby %}
 switch case 中的匹配值可以绑定到临时常量或变量以在 case 的主体中使用，
 并且可以使用 where 子句为每个 case 表示复杂的匹配条件

// ## For-In Loops

let names = ["Anna", "Alex", "Brian", "Jack"]
for name in names {
    print("Hello, \(name)!")
}

let numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
for (animalName, legCount) in numberOfLegs {
    print("\(animalName)s have \(legCount) legs")
}

for index in 1...5 {
    print("\(index) times 5 is \(index * 5)")
}

let minutes = 60
let minuteInterval = 5
// for 间格 不包括最后的 60
for tickMark in stride(from: 0, to: minutes, by: minuteInterval) {
    // render the tick mark every 5 minutes (0, 5, 10, 15 ... 45, 50, 55)
  print("tickMark is \(tickMark)")
}
// for 间格 包括最后的 60

for tickMark in stride(from: 0, through: minutes, by: minuteInterval) {
    // render the tick mark every 3 hours (3, 6, 9, 12)
  print("--tickMark is \(tickMark)")

}

// ## While Loops

// while evaluates its condition at the start of each pass through the loop.

// repeat-while evaluates its condition at the end of each pass through the loop.

let finalSquare = 25
var board = [Int](repeating: 0, count: finalSquare + 1)
board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
var square = 0
var diceRoll = 0

repeat {
    // move up or down for a snake or ladder
    square += board[square]
    // roll the dice
    diceRoll += 1
    if diceRoll == 7 { diceRoll = 1 }
    // move by the rolled amount
    square += diceRoll
} while square < finalSquare
print("Game over!")

// Conditional Statements


// ## Switch
let someCharacter: Character = "z"
switch someCharacter {
case "a":
    print("The first letter of the alphabet")
case "z":
    print("The last letter of the alphabet")
default:
    print("Some other character")
}
// Prints "The last letter of the alphabet"


// is mistake
//let anotherCharacter: Character = "a"
//switch anotherCharacter {
//case "a": // Invalid, the case has an empty body
//case "A":
//    print("The letter A")
//default:
//    print("Not the letter A")
//}
// This will report a compile-time error.


let anotherCharacter: Character = "a"
switch anotherCharacter {
case "a", "A":
    print("The letter A")
default:
    print("Not the letter A")
}
// Prints "The letter A"


let approximateCount = 62
let countedThings = "moons orbiting Saturn"
let naturalCount: String
switch approximateCount {
case 0:
    naturalCount = "no"
case 1..<5:
    naturalCount = "a few"
case 5..<12:
    naturalCount = "several"
case 12..<100:
    naturalCount = "dozens of"
case 100..<1000:
    naturalCount = "hundreds of"
default:
    naturalCount = "many"
}
print("There are \(naturalCount) \(countedThings).")
// Prints "There are dozens of moons orbiting Saturn."



let somePoint = (1, 1)
switch somePoint {
case (0, 0):
    print("\(somePoint) is at the origin")
case (_, 0):
    print("\(somePoint) is on the x-axis")
case (0, _):
    print("\(somePoint) is on the y-axis")
case (-2...2, -2...2):
    print("\(somePoint) is inside the box")
default:
    print("\(somePoint) is outside of the box")
}
// Prints "(1, 1) is inside the box"

// Value Bindings
let anotherPoint = (2, 0)
switch anotherPoint {
case (let x, 0):
    print("on the x-axis with an x value of \(x)")
case (0, let y):
    print("on the y-axis with a y value of \(y)")
case let (x, y):
    print("somewhere else at (\(x), \(y))")
}
// Prints "on the x-axis with an x value of 2"

// Where
let yetAnotherPoint = (1, -1)
switch yetAnotherPoint {
case let (x, y) where x == y:
    print("(\(x), \(y)) is on the line x == y")
case let (x, y) where x == -y:
    print("(\(x), \(y)) is on the line x == -y")
case let (x, y):
    print("(\(x), \(y)) is just some arbitrary point")
}
// Prints "(1, -1) is on the line x == -y"

// Compound Cases
switch someCharacter {
case "a", "e", "i", "o", "u":
    print("\(someCharacter) is a vowel")
case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",
     "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":
    print("\(someCharacter) is a consonant")
default:
    print("\(someCharacter) isn't a vowel or a consonant")
}
// Prints "e is a vowel"


let stillAnotherPoint = (9, 0)
switch stillAnotherPoint {
case (let distance, 0), (0, let distance):
    print("On an axis, \(distance) from the origin")
default:
    print("Not on an axis")
}
// Prints "On an axis, 9 from the origin"


// ## Control Transfer Statements

// Fallthrough

/*
 The fallthrough keyword doesn’t check the case conditions for the switch case that it causes execution to fall into. The fallthrough keyword simply causes code execution to move directly to the statements inside the next case (or default case) block, as in C’s standard switch statement behavior.
 */

let integerToDescribe = 5
var description = "The number \(integerToDescribe) is"
switch integerToDescribe {
case 2, 3, 5, 7, 11, 13, 17, 19:
    description += " a prime number, and also"
    fallthrough
default:
    description += " an integer."
}
print(description)
// Prints "The number 5 is a prime number, and also an integer."


// Labeled Statements
gameLoop: while square != finalSquare {
    diceRoll += 1
    if diceRoll == 7 { diceRoll = 1 }
    switch square + diceRoll {
    case finalSquare:
        // diceRoll will move us to the final square, so the game is over
        break gameLoop
    case let newSquare where newSquare > finalSquare:
        // diceRoll will move us beyond the final square, so roll again
        continue gameLoop
    default:
        // this is a valid move, so find out its effect
        square += diceRoll
        square += board[square]
    }
}
print("Game over!")

// ## Early Exit
// guard
/*
Note
 If that condition isn’t met, the code inside the else branch is executed. 
 That branch must transfer control to exit the code block in which the guard statement appears. 
 It can do this with a control transfer statement such as return, break, continue, or throw, 
 or it can call a function or method that doesn’t return, such as fatalError(_:file:line:).
 */

// ## Checking API Availability
if #available(iOS 10, macOS 10.12, *) {
    // Use iOS 10 APIs on iOS, and use macOS 10.12 APIs on macOS
} else {
    // Fall back to earlier iOS and macOS APIs
}

/*
 if #available(platform name version, ..., *) {
     statements to execute if the APIs are available
 } else {
     fallback statements to execute if the APIs are unavailable
 }

 */

@available(macOS 10.12, *)
struct ColorPreference {
    var bestColor = "blue"
}

func chooseBestColor() -> String {
    guard #available(macOS 10.12, *) else {
        return "gray"
    }
    let colors = ColorPreference()
    return colors.bestColor
}

if #available(iOS 10, *) {
} else {
    // Fallback code
}
// Swift also supports the opposite check using an unavailability condition
if #unavailable(iOS 10) {
    // Fallback code
}
{% endhighlight %}


## 0x02 Functions

{% highlight ruby %}

/*
 Every function in Swift has a type, consisting of the function’s parameter types and return type
 函数类型即参数+返回值类型
 */

func minMax(array: [Int]) -> (min: Int, max: Int) {
    var currentMin = array[0]
    var currentMax = array[0]
    for value in array[1..<array.count] {
        if value < currentMin {
            currentMin = value
        } else if value > currentMax {
            currentMax = value
        }
    }
    return (currentMin, currentMax)
}

// Any function that you write as just one return line can omit the return.
func greeting(for person: String) -> String {
    "Hello, " + person + "!"
}


// Default Parameter Values
func someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) {
    // If you omit the second argument when calling this function, then
    // the value of parameterWithDefault is 12 inside the function body.
}
someFunction(parameterWithoutDefault: 3, parameterWithDefault: 6) // parameterWithDefault is 6
someFunction(parameterWithoutDefault: 4) // parameterWithDefault is 12

//Variadic Parameters
/*
 一个函数可以有多个可变参数。
 可变参数之后的第一个参数必须有一个参数标签。
 参数标签明确哪些参数传递给可变参数，哪些参数传递给可变参数之后的参数
 */
func arithmeticMean(_ numbers: Double...) -> Double {
    var total: Double = 0
    for number in numbers {
        total += number
    }
    return total / Double(numbers.count)
}
arithmeticMean(1, 2, 3, 4, 5)


// In-Out Parameters
// You can only pass a variable as the argument for an in-out parameter.
// Note:In-out parameters can’t have default values, and variadic parameters can’t be marked as inout.

func swapTwoInts(_ a: inout Int, _ b: inout Int) {
    let temporaryA = a
    a = b
    b = temporaryA
}

// Function Types

func printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {
    print("Result: \(mathFunction(a, b))")
}

// Nested Functions
func chooseStepFunction(backward: Bool) -> (Int) -> Int {
    func stepForward(input: Int) -> Int { return input + 1 }
    func stepBackward(input: Int) -> Int { return input - 1 }
    return backward ? stepBackward : stepForward
}
var currentValue = -4
let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)
// moveNearerToZero now refers to the nested stepForward() function
while currentValue != 0 {
    print("\(currentValue)... ")
    currentValue = moveNearerToZero(currentValue)
}
print("zero!")
// -4...
// -3...
// -2...
// -1...
// zero!

{% endhighlight %}

## 0x03 Closures

{% highlight ruby %}

/*
 Closures take one of three forms:
    全局函数是有名字但不捕获变量的闭包
    Global functions are closures that have a name and don’t capture any values.
 
    Nested functions are closures that have a name and can capture values from their enclosing function.

    Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.

 */

let names = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]
func backward(_ s1: String, _ s2: String) -> Bool {
    return s1 > s2
}
var reversedNames = names.sorted(by: backward)
// reversedNames is equal to ["Ewa", "Daniella", "Chris", "Barry", "Alex"]

// Closure Expression Syntax
/*
 { (parameters) -> return type in
     statements
 }
 Note：闭包表达式语法中的参数可以是 in-out 参数，但不能有默认值。
 如果您命名可变参数，则可以使用可变参数。
 元组也可以用作参数类型和返回类型
 */

reversedNames = names.sorted(by: { (s1: String, s2: String) -> Bool in
    return s1 > s2
})

// Inferring Type From Context
reversedNames = names.sorted(by: { s1, s2 in return s1 > s2 } )

// Implicit Returns from Single-Expression Closures
// Single-expression closures can implicitly return the result of their single expression by omitting the return keyword from their declaration
reversedNames = names.sorted(by: { s1, s2 in s1 > s2 } )

// Shorthand Argument Names
// Swift automatically provides shorthand argument names to inline closures, which can be used to refer to the values of the closure’s arguments by the names $0, $1, $2, and so on.
reversedNames = names.sorted(by: { $0 > $1 } )

// Operator Methods
reversedNames = names.sorted(by: >)


// ## Trailing Closures

/*
 重要：
 如果您需要将闭包表达式作为函数的最后一个参数传递给函数并且闭包表达式很长，
 则将其编写为尾随闭包会很有用。
 你在函数调用的括号之后写一个尾随闭包，即使尾随闭包是函数的参数。
 Note：这时当您使用尾随闭包语法时，您不需要写第一个闭包的参数标签。
 一个函数调用可以包含多个尾随闭包；但是，下面的前几个示例使用单个尾随闭包
 */

func someFunctionThatTakesAClosure(closure: () -> Void) {
    // function body goes here
}

// Here's how you call this function without using a trailing closure:

someFunctionThatTakesAClosure(closure: {
    // closure's body goes here
})

// Here's how you call this function with a trailing closure instead:

someFunctionThatTakesAClosure() {
    // trailing closure's body goes here
}

reversedNames = names.sorted() { $0 > $1 }
/*
 Note：
 如果闭包表达式作为函数或方法的唯一参数提供，并且您将该表达式作为尾随闭包提供，则在调用函数时无需在函数或方法的名称后写一对括号 ()：
 */

reversedNames = names.sorted { $0 > $1 }


let digitNames = [
    0: "Zero", 1: "One", 2: "Two",   3: "Three", 4: "Four",
    5: "Five", 6: "Six", 7: "Seven", 8: "Eight", 9: "Nine"
]
let numbers = [16, 58, 510]
let strings = numbers.map { (number) -> String in
    var number = number
    var output = ""
    repeat {
        output = digitNames[number % 10]! + output
        number /= 10
    } while number > 0
    return output
}
//
//func loadPicture(from server: Server, completion: (Picture) -> Void, onFailure: () -> Void) {
//    if let picture = download("photo.jpg", from: server) {
//        completion(picture)
//    } else {
//        onFailure()
//    }
//}
//
//loadPicture(from: someServer) { picture in
//    someView.currentPicture = picture
//} onFailure: {
//    print("Couldn't download the next picture.")
//}


// ## Capturing Values
func makeIncrementer(forIncrement amount: Int) -> () -> Int {
    var runningTotal = 0
    func incrementer() -> Int {
        runningTotal += amount
        return runningTotal
    }
    return incrementer
}
/*
 As an optimization, Swift may instead capture and store a copy of a value if that value isn’t mutated by a closure, and if the value isn’t mutated after the closure is created.

 Swift also handles all memory management involved in disposing of variables when they’re no longer needed.
 */
let incrementBySeven = makeIncrementer(forIncrement: 7)
incrementBySeven()

// ## Closures Are Reference Types
// 重要： This is because functions and closures are reference types.


// ## Escaping Closures
// A closure is said to escape a function when the closure is passed as an argument to the function, but is called after the function returns
// 即函数返回之后才调用闭包就是逃逸闭包
// 逃逸闭包 需要加 @escaping 声明

// An escaping closure that refers to self needs special consideration if self refers to an instance of a class. Capturing self in an escaping closure makes it easy to accidentally create a strong reference cycle


var completionHandlers: [() -> Void] = []
func someFunctionWithEscapingClosure(completionHandler: @escaping () -> Void) {
    completionHandlers.append(completionHandler)
}

func someFunctionWithNonescapingClosure(closure: () -> Void) {
    closure()
}

class SomeClass {
    var x = 10
    func doSomething() {
      // someFunctionWithNonescapingClosure(_:) is a nonescaping closure, which means it can refer to self implicitly.
        someFunctionWithEscapingClosure { self.x = 100 }
        someFunctionWithNonescapingClosure { x = 200 }
    }
}

let instance = SomeClass()
instance.doSomething()
print(instance.x)
// Prints "200"

completionHandlers.first?()
print(instance.x)

// or
class SomeOtherClass {
var x = 10
func doSomething() {
    someFunctionWithEscapingClosure { [self] in x = 100 }
    someFunctionWithNonescapingClosure { x = 200 }
}
}


struct SomeStruct {
    var x = 10
    mutating func doSomething() {
        someFunctionWithNonescapingClosure { x = 200 }  // Ok
      // 如果 self 是结构体或枚举，逃逸闭包不能捕获可变的 self
      // Error escaping closure captures mutating 'self'
      //someFunctionWithEscapingClosure { x = 100 }
    }
}

// Autoclosures
/*
 自动闭包是自动创建的闭包，用于包装作为参数传递给函数的表达式。
 它不接受任何参数，当它被调用时，它返回包装在其中的表达式的值。
 这种语法上的便利让您可以通过编写普通表达式而不是显式闭包来省略函数参数周围的大括号
 */

var customersInLine = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]
print(customersInLine.count)
// Prints "5"

// customerProvider type is "() -> String"
let customerProvider = { customersInLine.remove(at: 0) }
print(customersInLine.count)
// Prints "5"

// call
print(type(of: customerProvider))
print("Now serving \(customerProvider())!")
// Prints "Now serving Chris!"
print(customersInLine.count)
// Prints "4"

// customersInLine is ["Alex", "Ewa", "Barry", "Daniella"]
// customerProvider is marked @autoclosure
func serve(customer customerProvider: () -> String) {
    print("Now serving \(customerProvider())!")
}
serve(customer: { customersInLine.remove(at: 0) } )
// Prints "Now serving Alex!"


// customersInLine is ["Ewa", "Barry", "Daniella"]
func serve(customer customerProvider: @autoclosure () -> String) {
    print("Now serving \(customerProvider())!")
}
serve(customer: customersInLine.remove(at: 0))
// Prints "Now serving Ewa!"


// @autoclosure + @escaping
// customersInLine is ["Barry", "Daniella"]
var customerProviders: [() -> String] = []
func collectCustomerProviders(_ customerProvider: @autoclosure @escaping () -> String) {
    customerProviders.append(customerProvider)
}
collectCustomerProviders(customersInLine.remove(at: 0))
collectCustomerProviders(customersInLine.remove(at: 0))

print("Collected \(customerProviders.count) closures.")
// Prints "Collected 2 closures."
for customerProvider in customerProviders {
    print("Now serving \(customerProvider())!")
}
// Prints "Now serving Barry!"
// Prints "Now serving Daniella!"

{% endhighlight %}

## 0x04 Enum

{% highlight ruby %}
/*
 Swift 中的枚举更加灵活，并且不必为枚举的每种情况都提供一个值。
 如果为每个枚举情况提供了一个值（称为原始值），则该值可以是字符串、字符或任何整数或浮点类型的值。
 
 或枚举 case 可以指定任何类型的关联值与每个不同的案例值一起存储，就像 union 在其他语言中所做的那样。
 您可以将一组常见的相关案例定义为一个枚举的一部分，每个枚举都有一组与其关联的适当类型的不同值
 
 Swift 中的枚举本身就是一等类型。它们采用了许多传统上仅由类支持的特性，
 例如提供有关枚举当前值的附加信息的计算属性，以及提供与枚举表示的值相关的功能的实例方法。
 
 枚举还可以定义初始化器以提供初始 case 值；
 可以扩展以将其功能扩展到其原始实现之外；并且可以符合协议以提供标准功能。
 */

enum CompassPoint {
    case north
    case south
    case east
    case west
}

enum Planet {
    case mercury, venus, earth, mars, jupiter, saturn, uranus, neptune
}

let directionToHead = CompassPoint.south
switch directionToHead {
case .north:
    print("Lots of planets have a north")
case .south:
    print("Watch out for penguins")
case .east:
    print("Where the sun rises")
case .west:
    print("Where the skies are blue")
}
// Prints "Watch out for penguins"


let somePlanet = Planet.earth
switch somePlanet {
case .earth:
    print("Mostly harmless")
default:
    print("Not a safe place for humans")
}
// Prints "Mostly harmless"


// 迭代枚举用例

/* Note Note Note
 对于某些枚举，收集所有该枚举的案例很有用。您可以通过在枚举名称后写入 : CaseIterable 来启用此功能。 Swift 将所有案例的集合公开为枚举类型的 allCases 属性。这是一个例子：
 */
enum Beverage: CaseIterable {
    case coffee, tea, juice
}
let numberOfChoices = Beverage.allCases.count
print("\(numberOfChoices) beverages available")
// Prints "3 beverages available"

// 对所有 类型值进行遍历
for beverage in Beverage.allCases {
    print(beverage)
}
// coffee
// tea
// juice


// ## Associated Values
/*
 Enumerations similar to these are known as discriminated unions, tagged unions, or variants in other programming languages.
 */

/*
 此定义不提供任何实际的 Int 或 String 值——它只是定义当 Barcode 常量和变量等于 Barcode.upc 或 Barcode.qrCode 时可以存储的关联值的类型。
 */
enum Barcode {
    case upc(Int, Int, Int, Int)
    case qrCode(String)
}

/*
 此时，原始 Barcode.upc 及其整数值被新的 Barcode.qrCode 及其字符串值替换。 Barcode 类型的常量和变量可以存储 .upc 或 .qrCode（连同它们的关联值），但它们在任何给定时间只能存储其中一个
 */
var productBarcode = Barcode.upc(8, 85909, 51226, 3)
productBarcode = .qrCode("ABCDEFGHIJKLMNOP")

// check it type
switch productBarcode {
case .upc(let numberSystem, let manufacturer, let product, let check):
    print("UPC: \(numberSystem), \(manufacturer), \(product), \(check).")
case .qrCode(let productCode):
    print("QR code: \(productCode).")
}
// Prints "QR code: ABCDEFGHIJKLMNOP."


switch productBarcode {
case let .upc(numberSystem, manufacturer, product, check):
    print("UPC : \(numberSystem), \(manufacturer), \(product), \(check).")
case let .qrCode(productCode):
    print("QR code: \(productCode).")
}
// Prints "QR code: ABCDEFGHIJKLMNOP."

// ## Raw Values
/*
 枚举可以预先填充默认值（称为原始值）
 原始值可以是字符串、字符或任何整数或浮点数类型。每个原始值在其枚举声明中必须是唯一的。
 */
enum ASCIIControlCharacter: Character {
    case tab = "\t"
    case lineFeed = "\n"
    case carriageReturn = "\r"
}
/*
 Implicitly Assigned Raw Values
 例如，当整数用于原始值时，每种情况的隐含值都比前一种情况多一个。如果第一种情况没有设置值，则其值为 0。
 */
enum Planet1: Int {
    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune
}

/*
  CompassPoint1.south has an implicit raw value of "south", and so on.

 */
enum CompassPoint1: String {
    case north, south, east, west
}

print(CompassPoint1.east)
let earthsOrder = Planet1.earth.rawValue
// earthsOrder is 3

let sunsetDirection = CompassPoint1.west.rawValue
// sunsetDirection is "west"

/*
 Initializing from a Raw Value
 如果您使用原始值类型定义枚举，则该枚举会自动接收一个初始化器，该初始化器采用原始值类型的值（作为称为 rawValue 的参数）并返回枚举 case 或 nil。您可以使用此初始化程序尝试创建枚举的新实例。
 
 Note the raw value initializer always returns an optional enumeration case
 */
// possiblePlanet is of type Planet1?, or “optional Planet1.”
let possiblePlanet = Planet1(rawValue: 7)
// possiblePlanet is of type Planet? and equals Planet.uranus


// If you try to find a planet with a position of 11, the optional Planet value returned by the raw value initializer will be nil:
let positionToFind = 11
if let somePlanet = Planet1(rawValue: positionToFind) {
    switch somePlanet {
    case .earth:
        print("Mostly harmless")
    default:
        print("Not a safe place for humans")
    }
} else {
    print("There isn't a planet at position \(positionToFind)")
}
// Prints "There isn't a planet at position 11"


// ## Recursive Enumerations
/* Note Note Note
 A recursive enumeration is an enumeration that has another instance of the enumeration as the associated value for one or more of the enumeration cases. You indicate that an enumeration case is recursive by writing indirect before it, which tells the compiler to insert the necessary layer of indirection.
 */

enum ArithmeticExpression {
    case number(Int)
    indirect case addition(ArithmeticExpression, ArithmeticExpression)
    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)
}
// 也可以把 indirect 写在 外部
indirect enum ArithmeticExpression2 {
    case number(Int)
    case addition(ArithmeticExpression2, ArithmeticExpression2)
    case multiplication(ArithmeticExpression2, ArithmeticExpression2)
}

let five = ArithmeticExpression.number(5)
let four = ArithmeticExpression.number(4)
let sum = ArithmeticExpression.addition(five, four)
let product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))

func evaluate(_ expression: ArithmeticExpression) -> Int {
    switch expression {
    case let .number(value):
        return value
    case let .addition(left, right):
        return evaluate(left) + evaluate(right)
    case let .multiplication(left, right):
        return evaluate(left) * evaluate(right)
    }
}

print(evaluate(product))
// Prints "18"
{% endhighlight %}


## 0x05 StructuresAndClasses
{% highlight ruby %}

// ## Comparing Structures and Classes

/*
 Swift 中的结构和类有很多共同点。两者都可以：
 定义存储熟悉
 定义方法
 定义 subscripts
 定义 初始化器
 遵守协议
 */

/*
 Classes 特有的
 1 继承
 2 Type Casting ：类型转换使您能够在运行时检查和解释类实例的类型。
 3 Deinitializers
 4 引用计数
 */

// Note 优先使用 structures and enumerations

// ## Definition Syntax
struct SomeStructure {
    // structure definition goes here
}
class SomeClass {
    // class definition goes here
}

struct Resolution {
    var width = 0 // stored properties
    var height = 0
}
class VideoMode {
    var resolution = Resolution()
    var interlaced = false
    var frameRate = 0.0
    var name: String?
}

// Structure and Class Instances
let someResolution = Resolution()
let someVideoMode = VideoMode()

// Accessing Properties


// Memberwise Initializers for Structure Types
let vga = Resolution(width: 640, height: 480)
// Unlike structures, class instances don’t receive a default memberwise initializer.


enum CompassPoint {
    case north, south, east, west
    mutating func turnNorth() {
        self = .north
    }
}
var currentDirection = CompassPoint.west
let rememberedDirection = currentDirection
currentDirection.turnNorth()

print("The current direction is \(currentDirection)")
print("The remembered direction is \(rememberedDirection)")

// ## Classes Are Reference Types

// 查看是否引用相同的对象
// Identical to (===)
// Not identical to (!==)

// == 相等意味着两个实例在值上被视为相等或相等
// 当您定义自己的自定义结构和类时，您有责任决定什么条件是两个实例相等。
// 定义自己的==和！=实现的过程运算符在等价运算符中描述

{% endhighlight %}

## 0x06 Properties

{% highlight ruby %}
// Computed properties are provided by classes, structures, and enumerations
// Stored properties are provided only by classes and structures.

// Property observers can be added to stored properties you define yourself, and also to properties that a subclass inherits from its superclass.


// ## 1 Stored Properties
struct FixedLengthRange {
    var firstValue: Int
    let length: Int
}
var rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3)
// the range represents integer values 0, 1, and 2
rangeOfThreeItems.firstValue = 6
// the range now represents integer values 6, 7, and 8

// Stored Properties of Constant Structure Instances
// let 定义结构体后，不能修改其属性值，但对 class 不适用
let rangeOfFourItems = FixedLengthRange(firstValue: 0, length: 4)
// this range represents integer values 0, 1, 2, and 3
// rangeOfFourItems.firstValue = 6
// this will report an error, even though firstValue is a variable property

// Lazy Stored Properties
// lazy 只能用 var
/*
 lazy 常用于
 1 当属性的初始值依赖于外部因素时，这些因素的值在实例初始化完成后才知道。
 2 当属性的初始值需要复杂或计算量大时，除非需要，否则不应使用
 */
class DataImporter {
    /*
    DataImporter is a class to import data from an external file.
    The class is assumed to take a nontrivial amount of time to initialize.
    */
    var filename = "data.txt"
    // the DataImporter class would provide data importing functionality here
}

class DataManager {
  /* If a property marked with the lazy modifier is accessed by multiple threads simultaneously and the property hasn’t yet been initialized, there’s no guarantee that the property will be initialized only once.
   */
    lazy var importer = DataImporter()
    var data: [String] = []
    // the DataManager class would provide data management functionality here
}

let manager = DataManager()
manager.data.append("Some data")
manager.data.append("Some more data")
// the DataImporter instance for the importer property hasn't yet been created


// ## 2 Computed Properties
struct Point {
    var x = 0.0, y = 0.0
}
struct Size {
    var width = 0.0, height = 0.0
}
struct Rect {
    var origin = Point()
    var size = Size()
    var center: Point { // 计算属性
        get {
            let centerX = origin.x + (size.width / 2)
            let centerY = origin.y + (size.height / 2)
            return Point(x: centerX, y: centerY)
        }
        set(newCenter) { // 默认 newValue
            origin.x = newCenter.x - (size.width / 2)
            origin.y = newCenter.y - (size.height / 2)
        }
    }
}




var square = Rect(origin: Point(x: 0.0, y: 0.0),
                  size: Size(width: 10.0, height: 10.0))
let initialSquareCenter = square.center
// initialSquareCenter is at (5.0, 5.0)
square.center = Point(x: 15.0, y: 15.0)
print("square.origin is now at (\(square.origin.x), \(square.origin.y))")
// Prints "square.origin is now at (10.0, 10.0)"

// 如果返回只有一行表达式，可以直接返回 不写 return
struct CompactRect {
    var origin = Point()
    var size = Size()
    var center: Point {
        get {
            Point(x: origin.x + (size.width / 2),
                  y: origin.y + (size.height / 2))
        }
        set {
            origin.x = newValue.x - (size.width / 2)
            origin.y = newValue.y - (size.height / 2)
        }
    }
}

// Read-Only Computed Properties
struct Cuboid {
    var width = 0.0, height = 0.0, depth = 0.0
    var volume: Double { // use var
        return width * height * depth
    }
}

// ## 3 Property Observers
/*
 属性观察应用场景
 1 定义的存储属性
 2 继承的存储属性
 3 继承的计算属性

 willSet 是值在存储前.

 didSet 是值存储后.

 */


class StepCounter {
    var totalSteps: Int = 0 {
        willSet(newTotalSteps) { // 不声明 newTotalSteps 默认是 newValue
            print("StepCounter About to set totalSteps to \(newTotalSteps)")
        }
        didSet {
          // oldValue 是旧值
            if totalSteps > oldValue  {
                print("StepCounter Added \(totalSteps - oldValue) steps")
            }
        }
    }
}


class Pedometer: StepCounter {
  override var totalSteps: Int {
      willSet(newTotalSteps) { // 不声明 newTotalSteps 默认是 newValue
        // ***** 先执行自己 willSet，再执行父类 willSet
          print("Pedometer About to set totalSteps to \(newTotalSteps)")
      }
      didSet {
        // oldValue 是旧值
        // ***** 先执行父类 didSet，再执行自己 didSet
          if totalSteps > oldValue  {
              print("Pedometer Added \(totalSteps - oldValue) steps")
          }
      }
  }
  // *** Note：inout 返回会触发属性的 willSet didSet
  func addSteps(_ step: inout Int) {
    step = step + 1
  }
}



let stepCounter = Pedometer()
stepCounter.totalSteps = 200
// About to set totalSteps to 200
// Added 200 steps



// ## 4 Property Wrappers
// *****
@propertyWrapper
struct TwelveOrLess {
    private var number = 0
    var wrappedValue: Int {
        get { return number }
        set { number = min(newValue, 12) }
    }
}

var tw = TwelveOrLess()
tw.wrappedValue = 11
print("wrappedValue is \(tw.wrappedValue)")

struct SmallRectangle {
    @TwelveOrLess var height: Int
    @TwelveOrLess var width: Int
}

// 版本二：或不使用 @TwelveOrLess
//struct SmallRectangle {
//    private var _height = TwelveOrLess()
//    private var _width = TwelveOrLess()
//    var height: Int {
//        get { return _height.wrappedValue }
//        set { _height.wrappedValue = newValue }
//    }
//    var width: Int {
//        get { return _width.wrappedValue }
//        set { _width.wrappedValue = newValue }
//    }
//}

var rectangle = SmallRectangle()
print(rectangle.height)
// Prints "0"

rectangle.height = 10
print(rectangle.height)
// Prints "10"

rectangle.height = 24
print(rectangle.height)
// Prints "12"

// Setting Initial Values for Wrapped Properties
@propertyWrapper
struct SmallNumber {
    private var maximum: Int
    private var number: Int

    var wrappedValue: Int {
        get { return number }
        set { number = min(newValue, maximum) }
    }

    init() {
        maximum = 12
        number = 0
    }
    // Initial
    init(wrappedValue: Int) {
        maximum = 12
        number = min(wrappedValue, maximum)
    }
    init(wrappedValue: Int, maximum: Int) {
        self.maximum = maximum
        number = min(wrappedValue, maximum)
    }
}

struct ZeroRectangle {
    // **** height 使用 SmallNumber init() 初始化
    @SmallNumber var height: Int
    @SmallNumber var width: Int
}

var zeroRectangle = ZeroRectangle()
print(zeroRectangle.height, zeroRectangle.width)
// Prints "0 0"

struct UnitRectangle {
  // *** height 使用 SmallNumber init(wrappedValue:) 初始化
    @SmallNumber var height: Int = 1
    @SmallNumber var width: Int = 1
}

var unitRectangle = UnitRectangle()
print(unitRectangle.height, unitRectangle.width)
// Prints "1 1"


struct NarrowRectangle {
   // **** height 使用 SmallNumber init(wrappedValue: Int, maximum: Int) 初始化
    @SmallNumber(wrappedValue: 2, maximum: 5) var height: Int
    @SmallNumber(wrappedValue: 3, maximum: 4) var width: Int
}

var narrowRectangle = NarrowRectangle()
print(narrowRectangle.height, narrowRectangle.width)
// Prints "2 3"

narrowRectangle.height = 100
narrowRectangle.width = 100
print(narrowRectangle.height, narrowRectangle.width)


struct MixedRectangle {
    @SmallNumber var height: Int = 1
    @SmallNumber(maximum: 9) var width: Int = 2
}

var mixedRectangle = MixedRectangle()
print(mixedRectangle.height)
// Prints "1"

mixedRectangle.height = 20
print(mixedRectangle.height)
// Prints "12"


// Projecting a Value From a Property Wrapper
@propertyWrapper
struct SmallNumber2 {
    private var number: Int
    private(set) var projectedValue: Bool

    var wrappedValue: Int {
        get { return number }
        set {
            if newValue > 12 {
                number = 12
                projectedValue = true
            } else {
                number = newValue
                projectedValue = false
            }
        }
    }

    init() {
        self.number = 0
        self.projectedValue = false
    }
}
struct SomeStructure {
    @SmallNumber2 var someNumber: Int
}
var someStructure = SomeStructure()

someStructure.someNumber = 4
print(someStructure.$someNumber)
// Prints "false"

someStructure.someNumber = 55
print(someStructure.$someNumber)
// Prints "true"

enum Sizes {
    case small, large
}

struct SizedRectangle {
    @SmallNumber2 var height: Int
    @SmallNumber2 var width: Int

    mutating func resize(to size: Sizes) -> Bool {
        switch size {
        case .small:
            height = 10
            width = 20
        case .large:
            height = 100
            width = 100
        }
        // **** 可以省略 self. 访问 $height 的 projected value
        return $height || $width
    }
}

// ## 5 Global and Local Variables
// *** 1 计算和观察属性的能力也可用于全局变量和局部变量
/*
 2 *** 全局常量和变量总是 lazy 计算，类似于延迟存储属性。
 与 lazy 存储属性不同，全局常量和变量不需要使用 lazy 修饰符进行标记。
 */
// *** 3 property wrapper  不能用于全局变量
func someFunction() {
    @SmallNumber2 var myNumber: Int

    myNumber = 10
    // now myNumber is 10

    myNumber = 24
    // now myNumber is 12
}

// ## 6 Type Properties
/*
 存储类型属性是 lazy 的直到第一次访问它的类型，
 保证只初始化一次，甚至在多线程中
 不需要 lazy 标记

 */
// Type Property Syntax
// *** for struct and enum use static keyword
// *** for class use static keyword or class keyword, class 可以被子类 override

struct SomeStructure2 {
    static var storedTypeProperty = "Some value."
    static var computedTypeProperty: Int {
        return 1
    }
}
enum SomeEnumeration {
    static var storedTypeProperty = "Some value."
    static var computedTypeProperty: Int {
        return 6
    }
}
class SomeClass {
    static var storedTypeProperty = "Some value."
    static var computedTypeProperty: Int {
        return 27
    }
    class var overrideableComputedTypeProperty: Int {
        return 107
    }
}

// Querying and Setting Type Properties
SomeClass.storedTypeProperty = "123"
SomeStructure2.storedTypeProperty = "456"
print(SomeClass.storedTypeProperty)
print(SomeStructure2.storedTypeProperty)

struct AudioChannel {
    static let thresholdLevel = 10
    static var maxInputLevelForAllChannels = 0
    var currentLevel: Int = 0 {
        didSet {
            if currentLevel > AudioChannel.thresholdLevel {
                // cap the new audio level to the threshold level
              // *** 这里不会再触发 didSet
                currentLevel = AudioChannel.thresholdLevel
            }
            if currentLevel > AudioChannel.maxInputLevelForAllChannels {
                // store this as the new overall maximum input level
                AudioChannel.maxInputLevelForAllChannels = currentLevel
            }
        }
    }
}

{% endhighlight %}

## 0x07 Methods
{% highlight ruby %}
// ## 1 Instance Methods
// Classes, structures, and enumerations 都可定义方法

// 结构和枚举是值类型。默认情况下，值类型的属性不能从其实例方法中修改。
// 如果想修改自身属性需要加 mutating
struct VPoint {
    var x = 0.0, y = 0.0
    mutating func moveBy(x deltaX: Double, y deltaY: Double) {
        x += deltaX
        y += deltaY
    }
}
var somePoint = VPoint(x: 1.0, y: 1.0)
somePoint.moveBy(x: 2.0, y: 3.0)
print("The point is now at (\(somePoint.x), \(somePoint.y))")
// Prints "The point is now at (3.0, 4.0)"

// mutating 不能用于常量
let fixedPoint = VPoint(x: 3.0, y: 3.0)
// fixedPoint.moveBy(x: 2.0, y: 3.0)
// this will report an error


// Assigning to self Within a Mutating Method
struct Point {
    var x = 0.0, y = 0.0
    mutating func moveBy(x deltaX: Double, y deltaY: Double) {
        self = Point(x: x + deltaX, y: y + deltaY)
    }
}
 
enum TriStateSwitch { // for enum
    case off, low, high
    mutating func next() {
        switch self {
        case .off:
            self = .low
        case .low:
            self = .high
        case .high:
            self = .off
        }
    }
}
var ovenLight = TriStateSwitch.low
ovenLight.next()
// ovenLight is now equal to .high
ovenLight.next()
// ovenLight is now equal to .off


// ## 2 Type Methods
// classes, structures, and enumerations 都可定义类方法
class SomeClass {
    class func someTypeMethod() {
        // type method implementation goes here
    }
}
SomeClass.someTypeMethod()

//
struct LevelTracker {
    static var highestUnlockedLevel = 1
    var currentLevel = 1

    static func unlock(_ level: Int) {
        if level > highestUnlockedLevel { highestUnlockedLevel = level }
    }

    static func isUnlocked(_ level: Int) -> Bool {
        return level <= highestUnlockedLevel
    }
    
    // @discardableResult ignore the return value
    @discardableResult
    mutating func advance(to level: Int) -> Bool {
        if LevelTracker.isUnlocked(level) {
            currentLevel = level
            return true
        } else {
            return false
        }
    }
}

class Player {
    var tracker = LevelTracker()
    let playerName: String
    func complete(level: Int) {
        LevelTracker.unlock(level + 1)
        tracker.advance(to: level + 1)
    }
    init(name: String) {
        playerName = name
    }
}


var player = Player(name: "Argyrios")
player.complete(level: 1)
print("highest unlocked level is now \(LevelTracker.highestUnlockedLevel)")
// Prints "highest unlocked level is now 2"

player = Player(name: "Beto")
if player.tracker.advance(to: 6) {
    print("player is now on level 6")
} else {
    print("level 6 hasn't yet been unlocked")
}
// Prints "level 6 hasn't yet been unlocked"

{% endhighlight %}

{% highlight ruby %}
{% endhighlight %}
