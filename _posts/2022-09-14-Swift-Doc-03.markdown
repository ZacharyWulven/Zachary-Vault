---
layout: post
title: Swift-Doc-03
date: 2022-09-14 16:45:30.000000000 +09:00
tag: Swift
---

## 0x01 Subscripts
{% highlight ruby %}
// Subscripts 通常用作访问集合、列表或序列中成员元素的快捷方式
// 类, 结构体, 枚举 都可以定义 subscripts
// 一个类型可以有多个 Subscripts，Subscripts 可以有多个参数
// Subscripts 类似计算属性

// ## 1 Subscript Syntax
/*
  基本语法
 subscript(index: Int) -> Int {
     get {
         // Return an appropriate subscript value here.
       0
     }
   // 默认是 newValue，可以写成 set {}
     set(newValue) {
         // Perform a suitable setting action here.
     }
 }
 
 a get subscript
 subscript(index: Int) -> Int {
     // Return an appropriate subscript value here.
 }

 */
struct TimesTable {
    let multiplier: Int
    // a get subscript
    subscript(index: Int) -> Int {
        return multiplier * index
    }
}
let threeTimesTable = TimesTable(multiplier: 3)
print("six times three is \(threeTimesTable[6])")
// Prints "six times three is 18"

// ## 2 Subscript Options

/*
 下标可以接受任意数量的输入参数，并且这些输入参数可以是任何类型。
 下标也可以返回任何类型的值。
 
 与函数一样，下标可以采用不同数量的参数并为其参数提供默认值，
 如可变参数和默认参数值中所述。但是，与函数不同的是，下标不能使用 inout 参数
 
 
 一个类或结构可以根据需要提供尽可能多的下标实现，
 并且将根据使用下标时下标括号中包含的一个或多个值的类型推断要使用的适当下标。
 这种多下标的定义称为下标重载
 */

struct Matrix {
    let rows: Int, columns: Int
    var grid: [Double]
    init(rows: Int, columns: Int) {
        self.rows = rows
        self.columns = columns
        grid = Array(repeating: 0.0, count: rows * columns)
    }
    func indexIsValid(row: Int, column: Int) -> Bool {
        return row >= 0 && row < rows && column >= 0 && column < columns
    }
    subscript(row: Int, column: Int) -> Double {
        get {
            assert(indexIsValid(row: row, column: column), "Index out of range")
            return grid[(row * columns) + column]
        }
        set {
            assert(indexIsValid(row: row, column: column), "Index out of range")
            grid[(row * columns) + column] = newValue
        }
    }
}

var matrix = Matrix(rows: 2, columns: 2)
matrix[0, 1] = 1.5
matrix[1, 0] = 3.2
print(matrix)

// ## 3 Type Subscripts
// 类下标可以使用 static 或 class 关键字
enum Planet: Int {
    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune
    static subscript(n: Int) -> Planet {
        return Planet(rawValue: n)!
    }
}
let mars = Planet[4]
print(mars)
{% endhighlight %}

## 0x02 Inheritance

{% highlight ruby %}
// ## 1 Defining a Base Class
class Vehicle {
    var currentSpeed = 0.0
    var description: String {
        "traveling at \(currentSpeed) miles per hour"
    }
    func makeNoise() {
        // do nothing - an arbitrary vehicle doesn't necessarily make a noise
    }
}
let someVehicle = Vehicle()
print("Vehicle: \(someVehicle.description)")

// ## 2 Subclassing

class Bicycle: Vehicle {
    var hasBasket = false
}
let bicycle = Bicycle()
bicycle.hasBasket = true
bicycle.currentSpeed = 15.0
print("Bicycle: \(bicycle.description)")
// Bicycle: traveling at 15.0 miles per hour

// ## 3 Overriding
/*
 1 An overridden method named someMethod() can call the superclass version of someMethod() by calling super.
 someMethod() within the overriding method implementation.

 2 An overridden property called someProperty can access the superclass version of someProperty as super.
 someProperty within the overriding getter or setter implementation.

 3 An overridden subscript for someIndex can access the superclass version of the same subscript as super[someIndex] from within the overriding subscript implementation.

 */

// Overriding Methods

// Overriding Property Getters and Setters
// 你可以 Overriding 属性自定义 setter、getter 或添加 property observe
/*
 ***重要：Overriding 属性时，可以将只读属性变为读写，不能将读写变为只读属性
 */

class Car: Vehicle {
    var gear = 1
    override var description: String {
        super.description + " in gear \(gear)"
    }
}

let car = Car()
car.currentSpeed = 25.0
car.gear = 3
print("Car: \(car.description)")
// Car: traveling at 25.0 miles per hour in gear 3

// Overriding Property Observers
/*
 您可以使用 Overriding 将属性观察者添加到继承的属性中。 这使您能够在继承属性的值发生更改时收到通知
 
 不能添加 property observers 到一个继承的常量存储属性或 readonly 的计算属性，
 因为它们不能被改变
 
 **** 重要：您不能同时为同一属性提供 Overriding setter 和 Overriding Property Observers
 */

class AutomaticCar: Car {
    override var currentSpeed: Double {
        didSet {
            gear = Int(currentSpeed / 10.0) + 1
        }
    }
}

let automatic = AutomaticCar()
automatic.currentSpeed = 35.0
print("AutomaticCar: \(automatic.description)")
// AutomaticCar: traveling at 35.0 miles per hour in gear 4


// ## 4 Preventing Overrides
/*
 防止属性、方法、下标被 Overrides 可以使用 final 关键字，
 如： final var, final func, final class func, and final subscript
 
 extension 中也可以使用 final 关键字
 
 ***重要：final class 表示这个类不能被继承
 */

{% endhighlight %}


## 0x03 Initialization
{% highlight ruby %}
// Initialization will setup stored property

// Setting Initial Values for Stored Properties

/*
 在创建 类或结构体的实例时，类和结构体必须将其所有存储的属性设置为适当的初始值。 存储的属性不能处于不确定状态。
 **** 初始化不会触发  property observers.

 */

// 1 Initializers
struct Fahrenheit {
  var temperature = 32.0
  init() {
    //temperature = 32.0
  }
}

var f = Fahrenheit()
print("the default temperature is \(f.temperature) Fahrenheit")

// ## 2 Customizing Initialization
struct Celsius {
  var temperatureInCelsius: Double
  init(fromFahrenheit fahrenheit: Double) {
    temperatureInCelsius = (fahrenheit - 32.0) / 1.8
  }
  init(fromKelvin kelvin: Double) {
    temperatureInCelsius = (kelvin - 273.15)
  }
  init(_ celsius: Double) {
    temperatureInCelsius = celsius
  }
}

let boilingPointOfWater = Celsius(fromFahrenheit: 212.0)
print("boilingPointOfWater is \(boilingPointOfWater)")
let freezingPointOfWater = Celsius(fromKelvin: 273.15)
print("freezingPointOfWater is \(freezingPointOfWater)")


// When you assign a default value to a stored property, or set its initial value within an initializer, the value of that property is set directly, without calling any property observers.”
// ****重要：1 初始化，和默认初始化值不会触发 KVO ，类和结构体必须为所以存储属性设置一个初始化值，或使用默认值作为初始化值

// Parameter Names and Argument Labels
struct Color {
  let red, green, blue: Double
  
  init(red: Double, green: Double, blue: Double) {
    self.red = red
    self.green = green
    self.blue = blue
  }
  
  init(white: Double) {
    red = white
    green = white
    blue = white
  }
}

let magenta = Color(red: 1.0, green: 0.0, blue: 1.0)
let halfGray = Color(white: 0.5)

// ****重要：对于类实例，常量属性只能由引入它的类在初始化期间修改。 它不能被子类修改


// ## 3 Default Initializers
// Swift 为任何结构或类提供了一个默认初始化器，它为其所有属性提供默认值，
// 并且本身不止提供至少一个初始化器。
// 默认初始值设定项只是创建一个新实例，并将其所有属性设置为默认值。

// ShoppingListItem 类有默认值，因为它是一个没有超类的基类，ShoppingListItem 自动获得一个默认初始化器
//class ShoppingListItem {
//    var name: String?
//    var quantity = 1
//    var purchased = false
//}
//var item = ShoppingListItem()

// Memberwise Initializers for Structure Types
/*
 如果结构体没有任何自定义的初始化器，则结构体会自动接收成员初始化器。
 与默认初始化器不同，成员初始化器允许它存储了没有默认值的属性。
 */
struct Size {
  var width = 0.0
  var height = 0.0
}

struct Size2 {
  var width: Double
  var height: Double
}


// *** Default init 2 结构体成员 init 方法
let twoByTwo = Size(width: 2.0, height: 2.0)
let size2 = Size2(width: 1, height: 1)
// 当您调用成员初始化器时，您可以省略任何具有默认值的属性的值。
let size3 = Size(width: 1)



// ## 4 Initializer Delegation for Value Types
/*
 ****重要：
 初始化器可以调用其他初始化器来执行实例的部分初始化。
 此过程称为初始化程序委托，可避免跨多个初始化程序重复代码。
 
 初始化器委托的工作方式以及允许的委托形式的规则对于值类型和类类型是不同的。
 值类型（结构和枚举）不支持继承，因此它们的初始化器委托过程相对简单，
 因为它们只能委托给它们自己提供的另一个初始化器。
 但是，类可以从其他类继承，如继承中所述。
 这意味着类有额外的责任来确保在初始化期间为它们继承的所有存储属性分配一个合适的值
 
 ****重要：对于值类型，在编写自己的自定义初始化程序时，您可以使用 self.init 来引用来自相同值类型的其他初始化程序。您只能从初始化程序中调用 self.init 。
 
 ****重要：请注意，如果您为值类型定义自定义初始化程序，
 您将无法再访问该类型的默认初始化程序（或成员初始化程序，如果它是结构）。
 此约束可防止在更复杂的初始化程序中提供的附加基本设置被使用自动初始化程序
 之一的人意外规避的情况。
 
 总结：****重要
 对于值类型：
 1 要么用默认的，要么自定义初始化器
 2 只能 delegate 到自己，call self.init
 3 如果您希望自定义值类型可以使用默认初始化程序和成员初始化程序，
 以及您自己的自定义初始化程序进行初始化，请将自定义初始化程序编写在扩展中，
 而不是作为值类型原始实现的一部分
*/

struct Point {
  var x = 0.0
  var y = 0.0
}

//struct Rect {
//  var origin = Point()
//  var size = Size()
//}
//// *****自己的初始化器放到 extension
//extension Rect {
//  init(center: Point, size: Size) {
//    let originX = center.x - (size.width / 2)
//    let originY = center.y - (size.height / 2)
//    self.init(origin: Point(x: originX, y: originY), size: size)
//  }
//}

struct Rect {
    var origin = Point()
    var size = Size()
    init() {}
    init(origin: Point, size: Size) {
        self.origin = origin
        self.size = size
    }
    init(center: Point, size: Size) {
        let originX = center.x - (size.width / 2)
        let originY = center.y - (size.height / 2)
        self.init(origin: Point(x: originX, y: originY), size: size)
    }
}

let basicRect = Rect()
let originRect = Rect(origin: Point(x: 2.0, y: 2.0),
                      size: Size(width: 5.0, height: 5.0))
let centerRect = Rect(center: Point(x: 4.0, y: 4.0),
                      size: Size(width: 3.0, height: 3.0))
// centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)


// ## 6 Class Inheritance and Initialization
// Swift 为类定义了两种初始化器,指定初始化器和便利初始化器

// Designated Initializers and Convenience Initializers
/*
 每个类必须至少有一个指定的初始化器。
 在某些情况下，通过从超类继承一个或多个指定的初始化程序来满足此要求
 */

/*
 Syntax for Designated and Convenience Initializers
 init(parameters) {
     statements
 }

 convenience init(parameters) {
     statements
 }
 */

// **** 重要 Initializer Delegation for Class Types
/*
 Swift 对初始化器之间的委托调用应用了以下三个规则：
 规则 1：指定初始化程序必须从其直接超类调用指定初始化程序。
 规则 2：便利构造器必须从同一个类中调用另一个构造器。
 规则 3：便利构造器最终必须调用指定构造器。
 
 即：指定的初始化程序必须始终向上委托。便利初始化器必须平级委托。
 */

// Two-Phase Initialization
/*
 Swift 中的类初始化是一个两阶段的过程。 在第一阶段，每个存储的属性都由引入它的类分配一个初始值。 一旦确定了每个存储属性的初始状态，第二阶段就开始了，每个类都有机会在新实例被认为可以使用之前进一步自定义其存储属性。
 
 Swift 的两阶段初始化过程类似于 Objective-C 中的初始化。 主要区别在于，在阶段 1，Objective-C 为每个属性分配零值或空值（例如 0 或 nil）。 Swift 的初始化流程更加灵活，它允许您设置自定义初始值，并且可以处理 0 或 nil 不是有效默认值的类型。
 
 
 Swift 的编译器执行四项有用的安全检查，以确保两阶段初始化完成时没有错误：
 安全检查 1
 指定的初始化程序必须确保其类引入的所有属性在委托给超类初始化程序之前都已初始化。
 如上所述，一个对象的内存只有在其所有存储属性的初始状态已知时才被认为是完全初始化的。 为了满足这个规则，指定的初始化器必须确保它自己的所有属性都在它移交链之前被初始化。
 
 安全检查 2
 在将值分配给继承的属性之前，指定的初始化程序必须委托给超类初始化程序。 如果没有，指定初始化器分配的新值将被超类覆盖，作为其自身初始化的一部分。
 
 安全检查 3
 在为任何属性（包括由同一类定义的属性）分配值之前，便利构造器必须委托给另一个构造器。 如果没有，便利构造器分配的新值将被它自己类的指定构造器覆盖。
 
 安全检查 4
 在初始化的第一阶段完成之前，初始化器不能调用任何实例方法、读取任何实例属性的值或将 self 作为值引用。
 直到第一阶段结束，类实例才完全有效。 只有在第一阶段结束时知道类实例有效时，才能访问属性，并且只能调用方法。
 
 两个阶段：
 阶段 1
     在类上调用指定的或便利的初始化程序。为该类的新实例分配内存。内存还没有初始化。
该类的指定初始化程序确认该类引入的所有存储属性都有一个值。这些存储属性的内存现在已初始化。
指定的初始值设定项移交给超类初始值设定项，以对其存储的属性执行相同的任务。
这将继续沿类继承链向上，直到到达链的顶部。一旦到达链的顶端，并且链中的最后一个类确保其所有存储的属性都有值，则认为实例的内存已完全初始化，阶段 1 完成。

 阶段2
从链的顶部向下工作，链中的每个指定初始化程序都可以选择进一步自定义实例。初始化器现在能够访问 self 并可以修改其属性、调用其实例方法等等。
最后，链中的任何便利初始化器都可以选择自定义实例并使用 self.
 
 即阶段 1 从下往上，阶段 2 从上往下

 */

// ### Initializer Inheritance and Overriding
/*
 Swift 子类默认不继承它们的超类初始化器。
 */
class Vehicle {
    var numberOfWheels = 0
    var description: String {
        return "\(numberOfWheels) wheel(s)"
    }
}
let vehicle = Vehicle()
print("Vehicle: \(vehicle.description)")
// Vehicle: 0 wheel(s)


class Bicycle: Vehicle {
    override init() {
        super.init()
        numberOfWheels = 2
    }
}

/*
 如果子类初始化程序在初始化过程的第 2 阶段没有执行自定义，并且超类有一个同步的、零参数指定的初始化程序，您可以在将值分配给子类的所有存储属性后省略对 super.init() 的调用。 如果超类的初始化器是异步的，则需要显式编写 await super.init()。
 
 子类可以在初始化期间修改继承的变量属性，但不能修改继承的常量属性。
 */

class Hoverboard: Vehicle {
    var color: String
    init(color: String) {
        self.color = color
      // *****父类初始器必须是同步并且没有参数
        // super.init() implicitly called here
    }
    override var description: String {
        return "\(super.description) in a beautiful \(color)"
    }
}
let hoverboard = Hoverboard(color: "silver")
print("Hoverboard: \(hoverboard.description)")
// Hoverboard: 0 wheel(s) in a beautiful silver

// ### Automatic Initializer Inheritance

/*
 如上所述，默认情况下，子类不会继承它们的超类初始化器。 但是，如果满足某些条件，则会自动继承超类初始化器。

 假设您为在子类中引入的任何新属性提供默认值，则适用以下两条规则：
 规则1
      如果你的子类没有定义任何指定的初始化器，它会自动继承它的所有超类"指定初始化器"。
 规则 2
      如果您的子类提供了其所有超类指定初始化器的实现（通过按照规则 1 继承它们，或者通过提供自定义实现作为其定义的一部分），那么它会自动继承所有超类便利初始化器。
 即使您的子类添加了更多便利初始化程序，这些规则也适用。
 
 作为满足规则 2 的一部分，子类可以实现父类指定初始化器作为子类便利初始化器。
 
 
 */

// ### Designated and Convenience Initializers in Action
//类没有默认的成员初始化器，因此 Food 类提供了一个指定的初始化器，它接受一个名为 name 的参数。 此初始化程序可用于创建具有特定名称的新 Food 实例：
class Food {
    var name: String
    init(name: String) {
        self.name = name
    }
    convenience init() {
        self.init(name: "[Unnamed]")
    }
}
let namedMeat = Food(name: "Bacon")
// namedMeat's name is "Bacon"

class RecipeIngredient: Food {
    var quantity: Int
    init(name: String, quantity: Int) {
        self.quantity = quantity
        super.init(name: name)
    }
    override convenience init(name: String) {
        self.init(name: name, quantity: 1)
    }
}
// 继承自 Food 的便利构造器
let oneMysteryItem = RecipeIngredient()
let oneBacon = RecipeIngredient(name: "Bacon")
let sixEggs = RecipeIngredient(name: "Eggs", quantity: 6)

/*
 因为ShoppingListItem为它引入的所有属性提供了一个默认值，
 并且它本身没有定义任何初始化程序，
 所以 ShoppingListItem 自动从其超类继承所有指定的和便利的初始化程序。
 */
class ShoppingListItem: RecipeIngredient {
    var purchased = false
    var description: String {
        var output = "\(quantity) x \(name)"
        output += purchased ? " ✔" : " ✘"
        return output
    }
}

var breakfastList = [
    ShoppingListItem(),
    ShoppingListItem(name: "Bacon"),
    ShoppingListItem(name: "Eggs", quantity: 6),
]
breakfastList[0].name = "Orange juice"
breakfastList[0].purchased = true
for item in breakfastList {
    print(item.description)
}
// 1 x Orange juice ✔
// 1 x Bacon ✘
// 6 x Eggs ✘


// ## 6 Failable Initializers
//

/*
 定义初始化可能失败的类、结构或枚举有时很有用。 此失败可能由无效的初始化参数值、缺少所需的外部资源或阻止初始化成功的某些其他条件触发。
 
 
 您不能定义具有相同参数类型和名称的可失败和不可失败初始化程序。
 
 严格来说，初始化程序不返回值。 相反，它们的作用是确保 self 在初始化结束时完全正确地初始化。 虽然你写了 return nil 来触发初始化失败，但你并没有使用 return 关键字来表示初始化成功。
 */

// 例如，为数字类型转换实现了可失败的初始化程序。 为确保数值类型之间的转换准确地保持值，请使用 init(exactly:) 初始化程序。 如果类型转换无法保持该值，则初始化程序失败。
let wholeNumber: Double = 12345.0
let pi = 3.14159

if let valueMaintained = Int(exactly: wholeNumber) {
    print("\(wholeNumber) conversion to Int maintains value of \(valueMaintained)")
}
// Prints "12345.0 conversion to Int maintains value of 12345"

let valueChanged = Int(exactly: pi)
// valueChanged is of type Int?, not Int

if valueChanged == nil {
    print("\(pi) conversion to Int doesn't maintain value")
}
// Prints "3.14159 conversion to Int doesn't maintain value"


struct Animal {
    let species: String
    init?(species: String) {
        if species.isEmpty { return nil }
        self.species = species
    }
}

let someCreature = Animal(species: "Giraffe")
// someCreature is of type Animal?, not Animal

if let giraffe = someCreature {
    print("An animal was initialized with a species of \(giraffe.species)")
}
// Prints "An animal was initialized with a species of Giraffe"

let anonymousCreature = Animal(species: "")
// anonymousCreature is of type Animal?, not Animal

if anonymousCreature == nil {
    print("The anonymous creature couldn't be initialized")
}
// Prints "The anonymous creature couldn't be initialized"


// #### Failable Initializers for Enumerations
enum TemperatureUnit {
    case kelvin, celsius, fahrenheit
    init?(symbol: Character) {
        switch symbol {
        case "K":
            self = .kelvin
        case "C":
            self = .celsius
        case "F":
            self = .fahrenheit
        default:
            return nil
        }
    }
}
let fahrenheitUnit = TemperatureUnit(symbol: "F")
if fahrenheitUnit != nil {
    print("This is a defined temperature unit, so initialization succeeded.")
}
// Prints "This is a defined temperature unit, so initialization succeeded."

let unknownUnit = TemperatureUnit(symbol: "X")
if unknownUnit == nil {
    print("This isn't a defined temperature unit, so initialization failed.")
}
// Prints "This isn't a defined temperature unit, so initialization failed."


// #### Failable Initializers for Enumerations with Raw Values
enum TemperatureUnit2: Character {
    case kelvin = "K", celsius = "C", fahrenheit = "F"
}

let fahrenheitUnit2 = TemperatureUnit2(rawValue: "F")
if fahrenheitUnit2 != nil {
    print("This is a defined temperature unit, so initialization succeeded.")
}
// Prints "This is a defined temperature unit, so initialization succeeded."

let unknownUnit2 = TemperatureUnit2(rawValue: "X")
if unknownUnit2 == nil {
    print("This isn't a defined temperature unit, so initialization failed.")
}
// Prints "This isn't a defined temperature unit, so initialization failed."


// #### Propagation of Initialization Failure
/*
 类、结构或枚举的可失败初始化器可以委托给来自同一类、结构或枚举的另一个可失败初始化器。 类似地，子类可失败初始化器可以委托给超类可失败初始化器。
 
 在任何一种情况下，如果您委托给另一个导致初始化失败的初始化程序，初始化时失败，会导致立即返回，并且不会执行进一步的初始化代码。
 
 
 一个可失败的初始化器也可以委托给一个不可失败的初始化器。
 
 */
class Product {
    let name: String
    init?(name: String) {
        if name.isEmpty { return nil }
        self.name = name
    }
}

class CartItem: Product {
    let quantity: Int
    init?(name: String, quantity: Int) {
        if quantity < 1 { return nil }
        self.quantity = quantity
        super.init(name: name)
    }
}
if let twoSocks = CartItem(name: "sock", quantity: 2) {
    print("Item: \(twoSocks.name), quantity: \(twoSocks.quantity)")
}
// Prints "Item: sock, quantity: 2"

if let zeroShirts = CartItem(name: "shirt", quantity: 0) {
    print("Item: \(zeroShirts.name), quantity: \(zeroShirts.quantity)")
} else {
    print("Unable to initialize zero shirts")
}
// Prints "Unable to initialize zero shirts"


if let oneUnnamed = CartItem(name: "", quantity: 1) {
    print("Item: \(oneUnnamed.name), quantity: \(oneUnnamed.quantity)")
} else {
    print("Unable to initialize one unnamed product")
}
// Prints "Unable to initialize one unnamed product"


// ### Overriding a Failable Initializer
/*
 您可以在子类中覆盖超类的可失败初始化程序，就像任何其他初始化程序一样。 或者，您可以使用子类不可失败初始化程序覆盖超类可失败初始化程序。 这使您能够定义一个初始化不会失败的子类，即使允许超类的初始化失败。

 请注意，如果您使用不可失败的子类初始化程序覆盖可失败的超类初始化程序，则委托给超类初始化程序的唯一方法是强制解包可失败的超类初始化程序的结果。
 
 *****重要：您可以使用不可失败的初始化程序覆盖可失败的初始化程序，但反之则不行。
 可失败->不可失败
 
 
 */
class Document {
    var name: String?
    // this initializer creates a document with a nil name value
    init() {}
    // this initializer creates a document with a nonempty name value
    init?(name: String) {
        if name.isEmpty { return nil }
        self.name = name
    }
}
class AutomaticallyNamedDocument: Document {
    override init() {
        super.init()
        self.name = "[Untitled]"
    }
    // ****  override init?(name: String)
    override init(name: String) {
        super.init()
        if name.isEmpty {
            self.name = "[Untitled]"
        } else {
            self.name = name
        }
    }
}

class UntitledDocument: Document {
    override init() {
        // **** 强制解包，调用父类的 init?(name: String)
        super.init(name: "[Untitled]")!
    }
}

// ### The init! Failable Initializer
/*
 ****** 重要：
 你可以从 init? 到 init! 委托初始化，反之也行
 你可以用 init? override init!，反之也行
 你可以从 init 到 init! 委托初始化，但这样会触发一个断言，如果 init! 初始化失败
  */

// ## 7 Required Initializers
/*
 required 表示所有子类必须实现这个方法
 */
class SomeClass {
    required init() {
        // initializer implementation goes here
    }
}
/*
 您必须在所需初始化程序的每个子类实现之前编写 required 修饰符，
 以指示初始化程序要求适用于链中的其他子类。
 重写所需的指定初始化程序时，您无需编写 override 修饰符：
 */
class SomeSubclass: SomeClass {
    required init() {
        // subclass implementation of the required initializer goes here
    }
}

// ## 8 Setting a Default Property Value with a Closure or Function
class SomeClass2 {
    let someProperty: SomeType = {
        // create a default value for someProperty inside this closure
        // someValue must be of the same type as SomeType
        return someValue
    }() // 即将闭包的返回值赋值给属性
}
/*
 如果您使用闭包来初始化属性，请记住实例的其余部分在执行闭包时尚未初始化。 这意味着您不能从闭包中访问任何其他属性值，即使这些属性具有默认值。 您也不能使用隐式 self 属性，或调用任何实例的方法。
 */

struct Chessboard {
    let boardColors: [Bool] = {
        var temporaryBoard: [Bool] = []
        var isBlack = false
        for i in 1...8 {
            for j in 1...8 {
                temporaryBoard.append(isBlack)
                isBlack = !isBlack
            }
            isBlack = !isBlack
        }
        return temporaryBoard
    }()
    func squareIsBlackAt(row: Int, column: Int) -> Bool {
        return boardColors[(row * 8) + column]
    }
}

let board = Chessboard()
print(board.squareIsBlackAt(row: 0, column: 1))
// Prints "true"
print(board.squareIsBlackAt(row: 7, column: 7))
// Prints "false"
{% endhighlight %}


## 0x04 Deinitialization

{% highlight ruby %}
// **** Deinitializers are only available on class types.

// ## 1 How Deinitialization Works

//deinit {
//    // perform the deinitialization
//}
// 超类反初始化器在子类反初始化器实现结束时自动调用。 总是调用超类的反初始化器，即使子类没有提供自己的反初始化器。

// ## 2 Deinitializers in Action
class Bank {
    static var coinsInBank = 10_000
    static func distribute(coins numberOfCoinsRequested: Int) -> Int {
        let numberOfCoinsToVend = min(numberOfCoinsRequested, coinsInBank)
        coinsInBank -= numberOfCoinsToVend
        return numberOfCoinsToVend
    }
    static func receive(coins: Int) {
        coinsInBank += coins
    }
}

class Player {
    var coinsInPurse: Int
    init(coins: Int) {
        coinsInPurse = Bank.distribute(coins: coins)
    }
    func win(coins: Int) {
        coinsInPurse += Bank.distribute(coins: coins)
    }
    deinit {
        Bank.receive(coins: coinsInPurse)
    }
}
var playerOne: Player? = Player(coins: 100)
print("A new player has joined the game with \(playerOne!.coinsInPurse) coins")
// Prints "A new player has joined the game with 100 coins"
print("There are now \(Bank.coinsInBank) coins left in the bank")
// Prints "There are now 9900 coins left in the bank"

playerOne!.win(coins: 2_000)
print("PlayerOne won 2000 coins & now has \(playerOne!.coinsInPurse) coins")
// Prints "PlayerOne won 2000 coins & now has 2100 coins"
print("The bank now only has \(Bank.coinsInBank) coins left")
// Prints "The bank now only has 7900 coins left"


playerOne = nil
print("PlayerOne has left the game")
// Prints "PlayerOne has left the game"
print("The bank now has \(Bank.coinsInBank) coins")
// Prints "The bank now has 10000 coins"

{% endhighlight %}


## 0x05 Optional Chaining
{% highlight ruby %}
/*
 可选链是查询和调用当前可能为 nil 的可选的属性、方法和下标的过程。
 如果可选包含值，则属性、方法或下标调用成功；
 如果可选项为 nil，则属性、方法或下标调用返回 nil。
 多个查询可以链接在一起，如果链中的任何链接为零，则整个链都会优雅地失败。
 
 Swift 中的可选链接类似于 Objective-C 中的消息传递 nil，
 **** 但它适用于任何类型，并且可以检查成功或失败。
 
 */

// ## Optional Chaining as an Alternative to Forced Unwrapping


// ## Defining Model Classes for Optional Chaining


class Person {
    var residence: Residence?
}
class Residence {
    var rooms: [Room] = []
    var numberOfRooms: Int {
        return rooms.count
    }
    subscript(i: Int) -> Room {
        get {
            return rooms[i]
        }
        set {
            rooms[i] = newValue
        }
    }
    func printNumberOfRooms() {
        print("The number of rooms is \(numberOfRooms)")
    }
    var address: Address?
}
class Room {
    let name: String
    init(name: String) { self.name = name }
}
class Address {
    var buildingName: String?
    var buildingNumber: String?
    var street: String?
    func buildingIdentifier() -> String? {
        if let buildingNumber = buildingNumber, let street = street {
            return "\(buildingNumber) \(street)"
        } else if buildingName != nil {
            return buildingName
        } else {
            return nil
        }
    }
}

// ## Accessing Properties Through Optional Chaining

let john = Person()
if let roomCount = john.residence?.numberOfRooms {
    print("John's residence has \(roomCount) room(s).")
} else {
    print("Unable to retrieve the number of rooms.")
}
// Prints "Unable to retrieve the number of rooms."


let someAddress = Address()
someAddress.buildingNumber = "29"
someAddress.street = "Acacia Road"
john.residence?.address = someAddress
// 设置 address property of john.residence will fail, because john.residence is currently nil.

// ***** 重要：赋值是可选链接的一部分，这意味着等号右侧的任何代码都不会被执行
func createAddress() -> Address {
    print("Function was called.")

    let someAddress = Address()
    someAddress.buildingNumber = "29"
    someAddress.street = "Acacia Road"

    return someAddress
}
john.residence?.address = createAddress()


// ## Calling Methods Through Optional Chaining
// 您可以使用可选链接来调用可选值的方法，
// 并检查该方法调用是否成功。 即使该方法没有定义返回值，您也可以这样做。
// the method’s return type will be Void?, not Void
func printNumberOfRooms() {
    print("The number of rooms is \(numberOfRooms)")
}

// 可选链始终返回可选值
if john.residence?.printNumberOfRooms() != nil {
    print("It was possible to print the number of rooms.")
} else {
    print("It was not possible to print the number of rooms.")
}
// Prints "It was not possible to print the number of rooms."


// ## Accessing Subscripts Through Optional Chaining
// 当您通过可选链接访问可选值的下标时，您将问号放在下标括号之前，而不是之后。
if let firstRoomName = john.residence?[0].name {
    print("The first room name is \(firstRoomName).")
} else {
    print("Unable to retrieve the first room name.")
}
// Prints "Unable to retrieve the first room name."

john.residence?[0] = Room(name: "Bathroom")

let johnsHouse = Residence()
johnsHouse.rooms.append(Room(name: "Living Room"))
johnsHouse.rooms.append(Room(name: "Kitchen"))
john.residence = johnsHouse

if let firstRoomName = john.residence?[0].name {
    print("The first room name is \(firstRoomName).")
} else {
    print("Unable to retrieve the first room name.")
}
// Prints "The first room name is Living Room."


var testScores = ["Dave": [86, 82, 84], "Bev": [79, 94, 81]]
testScores["Dave"]?[0] = 91
testScores["Bev"]?[0] += 1
testScores["Brian"]?[0] = 72
// the "Dave" array is now [91, 82, 84] and the "Bev" array is now [80, 94, 81]

// ## Linking Multiple Levels of Chaining
// 如果您尝试检索的类型不是可选的，则由于可选链接，它将变为可选。
// 如果您尝试检索的类型已经是可选的，那么它不会因为链接而变得更加可选。
// 多级可选链始终返回可选值
if let johnsStreet = john.residence?.address?.street {
    print("John's street name is \(johnsStreet).")
} else {
    print("Unable to retrieve the address.")
}
// Prints "Unable to retrieve the address."


// ## Chaining on Methods with Optional Return Values

if let buildingIdentifier = john.residence?.address?.buildingIdentifier() {
    print("John's building identifier is \(buildingIdentifier).")
}
// Prints "John's building identifier is The Larches."

if let beginsWithThe =
    john.residence?.address?.buildingIdentifier()?.hasPrefix("The") {
    if beginsWithThe {
        print("John's building identifier begins with \"The\".")
    } else {
        print("John's building identifier doesn't begin with \"The\".")
    }
}
// Prints "John's building identifier begins with "The"."
{% endhighlight %}


## 0x06 Error Handling
{% highlight ruby %}

// ## Representing and Throwing Errors
// 在 Swift 中，错误由符合 Error 协议的类型的值表示。 这个空协议表示一个类型可以用于错误处理。
// 抛出错误可以表明发生了意外情况并且正常的执行流程无法继续。 您使用 throw 语句来引发错误

enum VendingMachineError: Error {
    case invalidSelection
    case insufficientFunds(coinsNeeded: Int)
    case outOfStock
}

// ## Handling Errors
/*
 ****
 Swift 中的错误处理类似于其他语言中的异常处理，使用 try、catch 和 throw 关键字。
 与许多语言（包括 Objective-C）中的异常处理不同，Swift
 中的错误处理不涉及展开调用堆栈，这是一个计算成本很高的过程。
 因此， throw 语句的性能特征与 return 语句的性能特征相当。
 */

// ### Propagating Errors Using Throwing Functions
/*
 只有带 throws 的函数能抛出错误，没有 throws 的函数必须在函数内自己处理掉
 */

func canThrowErrors() throws -> String {
  "d"
}

func cannotThrowErrors() -> String {
  "d"
}

struct Item {
    var price: Int
    var count: Int
}

class VendingMachine {
    var inventory = [
        "Candy Bar": Item(price: 12, count: 7),
        "Chips": Item(price: 10, count: 4),
        "Pretzels": Item(price: 7, count: 11)
    ]
    var coinsDeposited = 0

    func vend(itemNamed name: String) throws {
        guard let item = inventory[name] else {
            throw VendingMachineError.invalidSelection
        }

        guard item.count > 0 else {
            throw VendingMachineError.outOfStock
        }

        guard item.price <= coinsDeposited else {
            throw VendingMachineError.insufficientFunds(coinsNeeded: item.price - coinsDeposited)
        }

        coinsDeposited -= item.price

        var newItem = item
        newItem.count -= 1
        inventory[name] = newItem

        print("Dispensing \(name)")
    }
}
let favoriteSnacks = [
    "Alice": "Chips",
    "Bob": "Licorice",
    "Eve": "Pretzels",
]
// 处理错误使用 a do-catch statement 或 try? 或 try!
func buyFavoriteSnack(person: String, vendingMachine: VendingMachine) throws {
    let snackName = favoriteSnacks[person] ?? "Candy Bar"
    try vendingMachine.vend(itemNamed: snackName)
}
print("--------")

// throws 初始化器可以像 throws 函数一样传播错误。
struct PurchasedSnack {
    let name: String
    init(name: String, vendingMachine: VendingMachine) throws {
        try vendingMachine.vend(itemNamed: name)
        self.name = name
    }
}

// ### Handling Errors Using Do-Catch
/*
 您可以使用 do-catch 语句通过运行代码块来处理错误。 如果 do 子句中的代码抛出错误，它会与 catch 子句进行匹配，以确定其中哪一个可以处理错误。
 语法
 do {
     try expression
     statements
 } catch pattern 1 {
     statements
 } catch pattern 2 where condition {
     statements
 } catch pattern 3, pattern 4 where condition {
     statements
 } catch {
     statements
 }

 */
var vendingMachine = VendingMachine()
vendingMachine.coinsDeposited = 8
do {
    try buyFavoriteSnack(person: "Alice", vendingMachine: vendingMachine)
    print("Success! Yum.")
} catch VendingMachineError.invalidSelection {
    print("Invalid Selection.")
} catch VendingMachineError.outOfStock {
    print("Out of Stock.")
} catch VendingMachineError.insufficientFunds(let coinsNeeded) {
    print("Insufficient funds. Please insert an additional \(coinsNeeded) coins.")
} catch {
  //  如果 catch 子句没有匹配，则该子句匹配任何错误并将错误绑定到名为 error 的局部常量。
    print("Unexpected error: \(error).")
}
// Prints "Insufficient funds. Please insert an additional 2 coins."



func nourish(with item: String) throws {
    do {
        try vendingMachine.vend(itemNamed: item)
    } catch is VendingMachineError {
        print("Couldn't buy that from the vending machine.")
    }
  // 没有 catch 的类型继续 throws
}

do {
    try nourish(with: "Beet-Flavored Chips")
} catch {
    print("Unexpected non-vending-machine-related error: \(error)")
}
// Prints "Couldn't buy that from the vending machine."


// 使用“逗号”分隔多个需要 catch 的
func eat(item: String) throws {
    do {
        try vendingMachine.vend(itemNamed: item)
    } catch VendingMachineError.invalidSelection, VendingMachineError.insufficientFunds, VendingMachineError.outOfStock {
        print("Invalid selection, out of stock, or not enough money.")
    }
}

// #### Converting Errors to Optional Values
// ***** 你用 try？将错误转换为可选值来处理错误，如果在评估尝试时抛出错误 try 表达式的值为 nil。

func someThrowingFunction() throws -> Int {
    throw VendingMachineError.outOfStock
}

let x = try? someThrowingFunction()

let y: Int?
do {
    y = try someThrowingFunction()
} catch {
    print("catch error, set y = nil")
    y = nil
}

/*
func fetchData() -> Data? {
    if let data = try? fetchDataFromDisk() { return data }
    if let data = try? fetchDataFromServer() { return data }
    return nil
}
*/

// #### Disabling Error Propagation
// 你可以在表达式前加 try! 来阻止 error 传播，
// 并将调用包装在运行时断言中，即不会引发错误。 如果实际抛出错误，您将收到运行时错误。
let photo = try! loadImage(atPath: "./Resources/John Appleseed.jpg")

// ## Specifying Cleanup Actions
/*
 你可以使用 defer statement 执行一些语句在代码离开当前代码块
 
 该语句允许您执行任何必要的清理，无论执行如何离开当前代码块
 - 无论是因为抛出错误还是因为 return 或 break 之类的语句而离开。
 例如，您可以使用 defer 语句来确保关闭文件描述符并释放手动分配的
 
 defer 语句延迟执行，直到退出当前范围。
 延迟语句可能不包含任何将控制权转移到语句之外的代码，例如 break 或 return 语句，或者抛出错误。
 延迟操作的执行顺序与它们在源代码中编写的顺序相反。即第一个 defer 语句中的代码最后执行，第二个 defer 语句中的代码倒数第二个执行，以此类推。源代码顺序中的最后一个 defer 语句首先执行。
 
 defer 执行时倒序的
 */

func processFile(filename: String) throws {
    if exists(filename) {
        let file = open(filename)
        defer {
            close(file)
        }
        while let line = try file.readline() {
            // Work with the file.
        }
        // close(file) is called here, at the end of the scope.
    }
}
{% endhighlight %}
