---
layout: post
title: BTC-08-比特币的匿名性与思考
date: 2022-08-04 16:45:30.000000000 +09:00
tag: 区块链
---

## 0x01 
匿名性通常跟隐私（Privacy）相关。比特币系统不是真的匿名，有的人管它叫 pseudonymity
如果银行允许使用化名（没有 KYC）它的匿名性比 BTC 要好，因为 BTC 账本是公开的谁都能查，但银行不是


## 0x02 那些情况可能破坏比特币的匿名性？
1. output 中一般会有交易找零钱的地址（即不太可能你买的东西跟账户的钱刚刚好），是否能从 output 中知道哪个地址？
* 答案是可以的，可以从交易中分析出买家的地址，因为目前生成地址都是用软件钱包，软件钱包就那么几个，不会有额外操作生成不必要的地址去迷惑人
* 用户可以生成多个地址账户，但这些账户是有可能被关联起来的
* 不同账户之间可能关联

2. 任何跟实体世界交换都有可能暴露用户的身份
* 比如在交易所购买比特币
* 场外私下交易
* 反洗钱，即关注转入转出链的操作，很容易被司法部门捕获到
* 实体咖啡厅支持 BTC 支付，但用 BTC 买咖啡不太值，首先交易费就很贵，另外还要等 1 个小时确认 😂

比特币中匿名性最好的是中本聪

## 0x03 丝路
Silk road（中文叫丝路）是一个非法网站，卖一些违禁品，被称为 eBay for illegal drugs，它用的支付方式就是 BTC，
网络用的是洋葱路由（TOR），还用了些匿名的邮件服务，这个网站经营了两三年，最后老板在旧金山被抓，当时政府没收了十几万个 BTC，
当时价值几千万，但不敢花，因为花了就暴露了

## 0x04 如何提高匿名性
* 比特币是在应用层，底层还用网络层，提高匿名性要从这两方面入手
* IP 可以暴露真实世界的用户

### 网络层方案
1. 通过多路转发实现的，比如洋葱路由
* 多路转发原理是，不是由 sender 直接给 receiver，而是中间有很多跳（很多次转发）
* 每一跳只知道上一条是谁，只要中间有一个节点是好的，就能隐藏 sender

### 应用层方案 
1. coin mixing
* 即把你的币和别人的币混在一起，有一些做 coin mixing 的网站，你把币给他，他给你弄，然后收些手续费
* coin mixing 是个技术活，弄不好还是能分析出来
* 但 coin mixing 有风险，有可能捐比跑路

2. 在线钱包
* 不刻意去做 coin mixing，但有 coin mixing 的效果，比如你把币存在在线钱包，将来拿回来时候不一定是你之前的了
* 但在线钱包并不保证有 coin mixing 的功能

3. 加密货币交易所
* 天然有 coin mixing 的性质（前提是交易所不会泄露提币交易等记录）

区块链的不可篡改是匿名的灾难性，可能因为你一笔错误的交易暴露身份而无法修改。如果账户都是独立使用一个账户暴露可能没什么，但如果账户关联使用那就完了。

## 0x05 零知识证明（Zero-knowledge proof）
* 指一方（证明者）向另一方（验证者）证明一个陈述是正确的，而无需透露除该陈述是正确的外的任何信息。

### 一个有争议的例子
比如 A 说这个账户是 A 的，B 怎么相信？这其实是 A 要证明他有这个账户的私钥，那么可以用签名
* 这个例子中证明者是 A，验证者是 B，A 可以给一个签名，B 拿公钥取验证，这时 A 并没有告诉 B 私钥。
* 这个例子争议在于 A 还是提供了签名，与定义中“无需透露除该陈述是正确的外的任何信息”有差距，但具体有没有问题要看应用场景

### 同态隐藏
* 零知识证明的数学基础是同态隐藏
* 同态隐藏的三个性质
1. 如果 x，y 不同，那么它们的加密函数值 E(x) 和 E(y) 也不相同
* 即不会碰撞
* 反之，如果 E(x) == E(y)，那么 x == y
2. 给定 E(x) 的值，很难反推出 x 的值
* 说明加密函数不可逆
3. 同态运算：给定 E(x) 和 E(y) 的值，我们可以很容易的计算出某些关于 x，y 的加密函数值
3.1 同态加法：通过 E(x) 和 E(y) 计算出 E(x+y) 的值
3.2 同态乘法：通过 E(x) 和 E(y) 计算出 E(xy) 的值
3.3 扩展到多项式

### 例子
Alice 想要向 Bob 证明她知道一组数 x，y 使得 x+y = 7，同时不让 Bob 知道 x，y 的具体数值 

简单版本
1. Alice 把 E(x) 和 E(y) 的数值发给 Bob（利用性质2）
2. Bob 通过  E(x) 和 E(y) 计算出  E(x+y) 的值 （利用性质3）
3. Bob 同时计算 E(7) 的值，如果 E(x+y) = E(7)（利用性质1），那么验证通过，否则失败

这里 Bob 其实可以对 x 暴力遍历 x 的各种取值求解，
所以真实环境，Alice 把输入给 Bob 前要做随机化的处理，随机化处理要保证 x+y 还是不变的


## 0x06 盲签
需求：有没有办法让央行即做记账检测双花又保护自己隐私？
* 即虚拟货币的编号由用户自己产生
步骤
1. 用户 A 提供 SerialNum，银行在不知道 SerialNum 的情况下签名返回 Token（对这个序号的签名），同时减少 A 的存款（比如我是来取钱的）
2. 用户 A 把 SerialNum（明文） 和 Token 交给 B 完成交易
3. 用户 B 拿 SerialNum（明文） 和 Token 交给银行验证，银行验证通过后，增加 B 的存款

银行不知道币的来源，无法把 A 和 B 联系起来
{% highlight ruby %}
盲签即不知道具体内容时候，还要对它进行签名
{% endhighlight %}

## 0x07 零币和零钞
* 比特币虽然有匿名性，但无法消除关联性，能否设计一个新的货币保证匿名性？那就是零币和零钞专门为了匿名性发明的

### 零币 zerocoin
* 零币系统中存在基础币（可以是 BTC）和零币，通过基础币和零币的来回转换，消除旧地址和新地址的关联性，其原理类似于混币服务
* 比如你有一个基础币，用的时候把基础币搞的不能花了，换取一个零币，然后零币花的时候，用零知识证明证明你花掉的币是系统中存在的某一个合法的币就行了，
但不用透露你花的具体是哪个一个币，而比特币花掉的币都需要知道来源

### 零钞 zerocash
* 使用 zk-SNARKs 协议，不依赖一种基础币，区块链中只记录交易的存在性和矿工用来验证系统正常运行所需要关键属性的证明。
* 区块链上既不显示交易地址也不显示交易金额，所有交易通过零知识证明验证方式进行

{% highlight ruby %}
零币和零钞证明时从数学上保证你花的币是之前区块链系统中的某一个币，但不知道具体是哪个，从而达到破坏了关联性，无法追溯
{% endhighlight %}

零币和零钞不是很主流的原因
* 因为为了匿名性牺牲了一些东西，
* 并且在数学上对其初始化有严格要求，即初始化用的随机源要能销毁掉，否则可能有安全漏洞
* 需要这么强匿名性的用户也不是很多，比特币的匿名性基本够用了
* 没有解决与真实世界交互时暴露的问题


## 0x08 比特币引发的思考
### 哈希指针：很多地方用到了哈希指针，指针保存的是本机的内存地址，发到其他节点还有意义么？
* 哈希指针只是一种形象的说法，很多地方用的时候只有哈希没有指针
* 可以看下 block header 里内容，只有哈希没有指针

![](/assets/images/btc/block_header2.png)

那怎么找到前一区块内容呢？
全节点一般把这些区块存储在一个 key-value 数据库里，key 就是 hash，value 就是区块
* 常用的数据库是 LevelDB，只要知道最后一个区块 hash 就能把所有区块查出


{% highlight ruby %}
可以认为 hash 值就是其指针，hash 指针的性质保证内容不可篡改
{% endhighlight %}

### 区块恋
情侣一起买 BTC，把私钥分成两份，如果两人分手，那么这个钱永远也取不出来了。这样做有什么问题？扩展一下用在其他场景比如 4 个人一起买，私钥分四份。
* 这种截断私钥的做法会降低私钥的安全性，正常 BTC 私钥是 256 位，即 2^256 个可能性，如果 4 个人中的 3 个瞒着另一个人想穷举私钥那么只需要
尝试 2^64 次即可，这远远比 2^256 简单的多
* 任何一个人丢了私钥，那钱就取不出来了
* 还有个问题，如果情侣分手那么钱永久性保存在 UTXO 里，这对矿工是不友好的，矿工并不知道他们分手了，这是死钱（取不出来的钱），造成了 UTXO 集合的膨胀

{% highlight ruby %}
所以这个例子告诉我们，多于多人共享账户不要用私钥截断的方法，而是用多重签名（n 个人中给出 m 个即可，m<n）
{% endhighlight %}

### 分布式系统共识
为什么比特币系统能绕过分布式共识中的那些不可能结论？
* 严格上说比特币并没有取得严格意义上的共识，因为达成的共识随时可能被推翻，比如分叉攻击。
* 分布式系统共识严格意义是一旦达成共识，就不能改了，所以比特币并没有绕过分布式共识那些不可能的结论，因为它并没有取得严格意义上的共识
* 这个还有个另外的启示，理论与实际往往不符，对应实际是不适用的，因为某些理论是针对某个模型将的，而实际当中你把模型改改，理论的结论可能就不成立了。
比如在一个异步网络中无法知道远程服务器是运行缓慢还是死机了，这两种情况无法区分的，
但如果给服务器中心值班人员打电话让他现场确认下这就可能了，就也就打破了模型上异步的假设

{% highlight ruby %}
不要被学术界思维限制了头脑，不要被程序员的思维限制了想象力
{% endhighlight %}

### 比特币的稀缺性
比特币如果做冷启动，吸引人挖矿
* 早期的挖矿难度低
* 早期出块奖励多

{% highlight ruby %}
总数固定的东西不适合作为货币使用，因为有通货膨胀
货币要有通胀性
{% endhighlight %}

### 量子计算
比特币是建立在密码学基础上的，量子计算发展起来比特币是不是就不安全了？
* 不必担心，量子计算还需要很多年，在比特币有生之年够不成威胁，就是量子计算发展能破坏任何加密算法，首先受到冲击的传统金融业，网上转账等都不安全了
* 将来会有量子加密算法
* 比特币并没有把公钥直接暴露，而是公钥取 hash 得到一个地址，如果有人想偷你公钥，需要地址转公钥逆运算，这是无法完成的

加密与取 hash 是两个不同操作
* 加密是为了将来解密，所以要保证信息的完整性，加密过程不能丢失信息
* 取 hash 会造成信息损失，而且不可逆
{% highlight ruby %}
所以比特币地址最好就用一次，零钱转到其他地址，这样提高了安全性也是可以保护隐私
以太坊地址也是通过公钥生成的，而且做了截断
这说明即使是公钥也不要随意泄露
{% endhighlight %}
