---
layout: post
title: ### Swift-进阶-01
date: 2022-04-12 16:45:30.000000000 +09:00
tag: Swift
---

### ABI
- 应用程序二进制接口，应用程序与操作系统之间的底层接口
- 涉及内容有：目标文件格式 数据类型的大小 布局 对齐
- 随着 ABI 稳定 swift 语法基本不会变


### Swiftc 编译器
Swiftc 是 swift 编译器 存 Xcode 内部 Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin

### Swift 编译流程
Swift code -> 
swift AST (语法树) -> 
Raw swift IL (swift 特有中间代码) -> 
canonical swift IL （更简洁 swift 中间码）-> 
LLVM IR -> 
汇编代码 -> 
二进制代码

- 生成语法树： swiftc -dump-ast main.swift
- 生成最简洁的 SIL 代码：swiftc -emit-sil main.swift
- 生成 LLVM 代码：swiftc -emit-ir main.swift -o main.ll
- 生成汇编代码：swiftc -emit-assembly main.swift -o main.s


{% highlight ruby %}
sizeof(int) 不是函数
{% endhighlight %}


不用编写 main 函数，底层帮做了，Swift 将全局范围内的首句可执行代码作为入口，多句代码在同一行要写分号 ;

{% highlight ruby %}
Playground ：command + shift + enter 运行
{% endhighlight %}

### 变量
#### 常量 let
- 只能赋值一次，不要求在编译时确定值
- 在使用前保证有值就行

{% highlight ruby %}
let age: Int
age = 10
{% endhighlight %}


### 常见数据类型
#### 值类型
1. 枚举 Optional
- 可选类型是枚举 所以 nil 与 .none 对等，可选值的本质是枚举
2. 结构体 (Bool, Int, Float, Double, Character, String, Array, Dictionary, Set)

#### 引用类型
- 类 class

#### 整数类型
- Int8(1字节) Int16(2字节) Int32 Int64  UInt8 UInt16 UInt32 UInt64
- 32 bit 平台 Int 等价于 Int32 ， 64 bit 平台 等价于 Int64

#### 浮点类型
- Float 32位，精度只有 6 位， Double 64 位 精度至少 15 位

#### 字符类型 可以存储 ASCII字符，Unicode字符

#### 例子
- 0b1001 二进制 ， 0o21 八进制， 0x11 十六进制
- 0xFp2  十六进制，等价于 15x2^2
- 12.1875 等价于 1.21875e1,


### 条件控制
- if 后只能是 Bool 类型
- repeat-while 相当于C语言的 do-while
- swift 舍弃了 ++，-- 因为 ++ -- 不同编译器结果是不同的


### 区间运算符
1. a...b，a <= 取值 <=b
2. a..<b，a <= 取值 < b
{% highlight ruby %}
names[2...] index 2 到最后
name[...2] index 0 到 2

let names = [1, 2, 3, 4]
for name in names[0...3] {
  print(name)
}
//: index 2-3
for name in names[2...] {
  print(name)
}

for var i in 1...3 {
  i += 5
}

let range = ...5
range.contains(-3) == true

{% endhighlight %}


### 区间类型
- let range1: ClosedRange<Int> = 1...3
- let range2: Range<Int> = 1..<3
- let range3: PartialRangeThrough<Int> = ...5

- 字符、字符串也能用区间，但是不能用在 for-in 里
{% highlight ruby %}
let strRange = "cc"..."ff"
strRange.contains("cd") == true
{% endhighlight %}

几乎所有 ASCII 码
- let characterRange: ClosedRange<Character> = "\0"..."~"
- characterRange.contains("G") == true

#### 带间隔的区间
- 从 4 开始到 11 取 【4，11）， 每隔 hourInterval 取一次  4 6 8 10
{% highlight ruby %}
print("stride---")
let hours = 11
let hourInterval = 2
for tickMark in stride(from: 4, to: hours, by: hourInterval) {
  print(tickMark)
}
{% endhighlight %}

### switch
- case、default 后不写 {}
- 可以不写 break
- fallthrough 贯穿效果
- case default 后至少要有一条语句
- switch 要保证处理所有情况
- 复合条件 switch 支持 Character String 类型
- 复合条件 通过逗号分割


### where 过滤
var nums = [10, 20, -10, -20, 30, -30]
var sum = 0
for num in nums where num > 0 {
  sum += num
}
print("sum is \(sum)")

### 标签语句
{% highlight ruby %}
outer: for i in 1...4 {
  for k in 1...4 {
    if k == 3 {
      continue outer
    }
    if i == 3 {
      break outer
    }
    print("i == \(i), k == \(k)")
  }
}
{% endhighlight %}


### 函数
函数形参默认是 let，只能是 let


#### 隐式返回和注释
-  如果整个函数体是一个单一表达式，那么函数会隐式返回整个表达式

{% highlight ruby %}
文档注释参考 https://swift.org/documentation/api-design-guidelines/

//: 注释格式

/// 求和
///
/// 将 2 个整数相加
///
/// - Parameter v1: 第一个整数
/// - Parameter v2: 第二个整数
/// - Returns: 2个整数和
///
/// - Note: 传入 2 个整数即可
func sum(v1: Int, v2: Int) { // v1 v2 是参数标签
  v1 + v2 // 隐式返回
}
sum(v1: 10, v2: 20)
{% endhighlight %}

C++ 默认参数值 必须从右往左设置，由于 Swift 有参数标签，因此并没有此类限制。但是在省略参数标签时，需要特别注意，避免出错。这里 middle 不可以省略参数标签

{% highlight ruby %}
func test(_ first: Int = 10, middle: Int, _ last: Int = 30) {
  
}
{% endhighlight %}



#### 可变参数
- 一个函数最多只能有 1 个可变参数
- 紧跟在可变参数后的参数不能省略参数标签
{% highlight ruby %}
func sum(_ numbers: Int...) -> Int {
  var sum = 0
  for n in numbers {
    sum += n
  }
  return sum
}

print("1", "2", "3")
print("1", "2", "3", separator: "|")
{% endhighlight %}


#### inout 参数, 可在函数内改变量的值
- 可变参数不能是 inout
- inout 参数不能有默认值
- inout 的本质是地址传递, 因为汇编是 leap 指令
- inout 参数只能传入可以被多次赋值的

#### 通过元组交换变量
{% highlight ruby %}
func swapValue(_ v1: inout Int, _ v2: inout Int) {
  (v1, v2) = (v2, v1)
}
var x1 = 10
var x2 = 20
swapValue(&x1, &x2)
print(x2)
{% endhighlight %}

- 汇编的函数调用时： callq 函数地
- 汇编 leaq 是传地址
-  movq   $0x14, (%rdi) 将 0x14（20）放入 rdi 存储空间，()表示找地址, mov 就是赋值的意思

#### 函数重载
- 函数名相同，参数个数不同 或 参数类型不同 或 参数标签不同

##### 函数重载注意点
-  返回值类型与函数重载无关
-  默认参数值和函数重载一起使用会产生二义性，编译器不会报错（C++中会报错）
-  可变参数、省略参数标签、函数重载一起用会产生二义性，编译器有可能报错

#### 内联函数
- 如果开启了编译器优化，编译器会自动将某些函数变成内联函数

{% highlight ruby %}
func test() -> Void {
  print("123")
}
{% endhighlight %}

以 test 方法为例子，其实是将函数展开成函数体, 直接打印 test

##### 不会变成内联情况
- 函数体比较长
- 有递归调用
- 包含动态派发 (运行时才知道调用哪个方法)


#### 函数类型
- 每一个函数都有类型，函数类型由形式参数类型，返回值类型组成
- var fun: (Int, Int) -> Int
- fun(3, 5) 不需要参数标签
- 返回值是函数类型的函数叫做高阶函数

#### typealias
- typealias Byte = Int8
- typealias Short = Int16
- typealias Long = Int64
- typealias Date = (year: Int, month: Int, day: Int)


{% highlight ruby %}
按照 swift 标准库定义 Void就是空元组()， 定义 public typealias Void = ()
{% endhighlight %}

编译器会决定哪些需要内联，没必要用 @inline 了解即可
- 永远不会被内联
{% highlight ruby %}
@inline(never) func test1() {
  print("test1")
}
{% endhighlight %}

- 开启编译器优化后，即使代码很长，也会被内联(递归调用函数， 动态派发函数除外)
{% highlight ruby %}
@inline(__always) func test2() {
  print("test12")
}
{% endhighlight %}

