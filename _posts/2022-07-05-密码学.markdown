---
layout: post
title: 密码学
date: 2022-07-05 16:45:30.000000000 +09:00
tag: 区块链
---


密码学中算法不对称性 都归结于密码学的计算困难性理论。计算困难性是密码学的基石。

计算困难性理论表现为同一隐私数据主体，通过不同计算路径，获得相同信息的计算难度具有不对称性，
构造不对称性方式有很多，最经典就是 P 和 NP 问题。
* P 问题是确定性图灵机，通过计算机计算模型，在多项式时间 O（n^k）内可以计算获得答案的一类问题
* NP 问题是确定性图灵机在多项式时间内可以验证答案的正确性，但不一定能计算出答案的一类问题
* 同一份答案验证过程比计算过程要容易的多，由此我们可以构造出密码学算法所需的计算难度不对称性

NP问题能否通过有效多项式时间算法转换成 P 问题，目前尚无定论，所以现在可以基于密码学 P 和 NP 问题构造算法。
构造可以为是构造一个迷宫。


### 非对称密码学中三大计算困难问题
1 大数分解困难问题
* 给定 p 和 q 计算 n=p*q 是容易的， 给定 n 求救 p q 是困难的，
* RSA 系列算法将其困难性规约为大数分解困难问题，

2 离散对数困难问题
* 在摸为 n 生成元为 g 的有限域中，给定整数 a，计算 g^a=b 是容易的，然而，给定 b 和 g 计算 a 则是困难的
* 看起来进行一次 log 运算就可以反推知道 a 的值，但在有限域中元素之间并不存在全序关系
* 建立在离散对数困难问题上的算法：Diffie-Hellman、ElGamal、DSA


3 椭圆曲线上离散对数困难问题
* 是当前密码学应用的主流，每一个隐私数据都能以坐标（x，y）的形式，表示为椭圆曲线上的一个点，与一般离散对数困难问题类似，
* 在有限域 F 上的椭圆曲线群，点 p 为曲线上某点，给定整数a，计算 a *p = Q 是容易的，然而，跟进 p 和 q 计算 a 则是困难的
* 常用的基于椭圆曲线上离散对数困难问题的算法：公钥密码算法 ECDSA、EdDSA、国密SM2

### 安全参数 
不同困难问题也势必会引入不同的安全假设，理解这些假设是企业技术选型 客观判断基于不同密码学算法构造隐私保护方案的关键。

这里引入 安全参数的概念。
安全参数是一个衡量密码学算法保护隐私数据强度的数值，对于位于同一等级的安全参数值来说，不同密码学算法的安全级别基本相同，即面对已知最有效的攻击方式，算法被破解导致隐私数据泄露概率相同。
一般，安全参数值的大小，直接体现为密钥长度的长短，在同一等级下，安全参数数值有大有小，对应的密钥长度也有长有短。
基于不同的困难问题的密码学算法密钥最小长度不同。一般密钥长度越长 安全性越高，相应的系统效率越低。

### 不同场景应按照业务需求选择合适的技术方案和密钥长度，具体有以下几点需要特别注意
* 隐私保护技术方案的安全性取决于其使用密码学算法实现中最低的安全参数等级
* 在位指定安全参数的前提下，进行密码学算法的安全性比较没有实际意义
* 2010 年后 RSA 1024 位密钥已经不再安全，需要增加到 2048 位，预计安全有效性到 2030 年。所以隐私保护方案具有时效性，不能简单认为永久有效
* 选择密码算法要注意其有效期


### 同态加密
例子：客户有一张面额 1000 元的电子支票，支票以密文凭证形式存储，假设现在客户消费 200 元，这支票被拆分成两份密文凭证，面额 200 元给商户，
面额 800 给客户自己。

这个过程，存在三个隐私保护相关功能点
* 客户不希望其他人知道找零钱金额是 800 元，相当于在消费时候保护了客户自身财产总额不被泄露
* 商户需要验证密文支票在本次消费前金额不小于 200 元，但无需知道具体金额
* 签发密文支票的银行需要验证，客户和商户在交易后，没有凭空造出更多的钱，即消费与找零相加等于拆分之前的支票额度

解决核心即同态加密的思路，
同态（Homomorphism）加密概念起源于抽象代数，具体指两个代数结构（如群环，向量空间等）之间保持结构不变的映射。
密码学意义上同态指一类代数结构能够满足在指定运算下结构不变的性质，例如 函数 f(x)=3x 对应代数结构满足加法同态性，
函数 f(x)=x^3 对应代数结构满足乘法同态

{% highlight ruby %}
同态性在密码学中最常见的应用之一就是同态加密算法。同态加密允许在不解密的条件下，直接对密文形式下的隐私数据进行特定形式的代数运算，
运算效果等同于将隐私数据明文直接计算后再加密。这项技术试图实现隐私数据协同计算中的数据密文可计算，但明文不可见的效果。
{% endhighlight %}

同态加密与具有同态性的密码学承诺在功能上区别在于
* 同态加密重在计算，即对多方提供的隐私数据的密文形式进行一定计算后，对结果密文解密后得到的值，等同于对明文数据进行对应运算得到的结果。
这个过程不会泄露隐私数据明文，但解密之前无法获知结果。
* 具有同态性的密码学承诺重在验证，即通过密码学承诺密文形式的同态性，对于已知结果，构造相应的零知识证明，用以验证多个承诺满足一定的约束条件。
密码学承诺难以支持计算结果未知，且需要从多方收集隐私数据的密文计算过程。

### 半同态 VS 全同态
根据支持的运算类型限制分为半同态和全同态

1. 半同态加密算法：其密文形式仅仅对部分运算方式满足同态性。优点是构造相对简单，工程实现效率高，目前已经可以达到商用的性能要求了
* 加法运算同态性代表算法：Unpadded RSA、Benaloh、Paillier、ElGamal
* 逻辑运算同态性代表算法：Goldwasser-Micali

上例可以使用加法运算同态性算法即可满足需求，其他场景还有选举、竞拍、投票等


2. 全同态加密算法：其密文形式理论上对任何运算方式都满足同态性
* 对数据密文计算相关同态加密算法设计，通常要求为密文对应代数结构对加法和乘法同时满足同态性
* 相比半同态加密算法，全同态加密算法功能更强大，设计更复杂，但整体性能远远不如半同态加密算法。
例如可能面临密文数据膨胀问题，因为将隐私数据进行编码转换，映射到密文的向量空间中。1M 明文编码后可能膨胀到 10G 密文数据。同时耗时也高

{% highlight ruby %}
由此可见，全同态加密算法的愿景虽美，但目前还处于理论探索层面，离工程实用化、支持高频次和大数据量的业务需求尚有一定距离。
简单的理解：
半同态加密算法：仅支持加法或乘法
全同态加密算法：同时支持加法和乘法
{% endhighlight %}


### 单密钥 VS 多密钥
同态加密根据数据控制方数量分为单密钥同态加密和多密钥同态加密。

1. 单密钥
* 早期同态加密算法都是单密钥算法，主要应用于外包计算常见，先加密再给外包进行计算
* 优点是构造相对简单、性能高，可用于有一定信任基础或强监管环境下的联合计算场景
* 缺点是信任问题

2. 多密钥（解决了信任相关的问题）
* 一个多密钥同态加密算法，允许不同参与方使用各自不同的密钥对加密，加密后的密文可以通过各个参与方的公钥进行密文扩展，
扩展后的密文对于指定的运算方式依旧满足同态性。解密过程可以通过分布式解密协议，在不泄露各自数据私钥的前提下，对约定的结果密文进行解密。

* 典型的多密钥同态加密算法可以参考Clear and McGoldrick (CRYPTO 2015)、Mukherjee and Wichs (EUROCRYPT 2016)相关的论文。
{% highlight ruby %}
目前多密钥同态加密方案，随着参与方个数的增加，系统性能会急剧降低。对于一些需求比较明确的多方协作场景，
相较于多密钥同态加密方案，定制构造的安全多方计算协议或许更有效

一般参与方数量不超过 5 个，超过 5 个性能就不太好了
{% endhighlight %}


## 多方门限签名
其实就是多签，BTC 是不支持多签权重分配的。经典数字签名技术，由于只能由“单一主体来掌控私钥”，所以无法直接用以解决上述问题。为此，我们需要引入门限签名技术。

基本形式是由多方管理签名，各方的权重不同，避免权力过于集中。门限签名是门限密码学中的一个重要分支，从构造上来看，门限签名可以看作数字签名和秘密分享的结合体。

{% highlight ruby %}
历史上虎符就是一个例子，而虎符生效所需的最小数量其实就对应了密码学中的术语--门限值，只有达到了门限的授权数量，授权才生效。
{% endhighlight %}

对于一个 (t, n) 门限签名算法，其典型的使用过程如下：
在一个由 n 个参与方组成的群体中，群体中各参与方通过一定方法获得相应的签名私钥分片，
群体中至少有 t 方使用各自的签名私钥分片对同一份数据进行签名，产生签名分片，然后将各方签名分片合并，才能产生最终有效的签名。
其中，t 为门限值，当签名方的个数小于t时，无法产生有效的签名。

{% highlight ruby %}
Note
由于各方权重不同 t 不代表， 是 n 个人就行，因为可能随机的 n 个人权重达不到 t

核心原理就是对私钥进行了分片
{% endhighlight %}

### 门限签名的两个典型场景
1. 基金会区块链资金账户管理：针对其账户资金权需要由多方共同授权才能动用的需求，可以使用门限签名来解决其中的业务痛点：
* 管理资金账户的n个参与方可以各自拥有一个私钥分片，可以进行独立的决策过程。
* 动用资金账户必须获得由至少t个参与方进行签名授权，才能生成有效的门限签名。
* 少于t个参与方签名授权，无法动用资金账户。

除此之外，门限签名还提供了以下额外特性：
* 身份隐匿：第三方无法从聚合的门限签名中恢复出授权签名的参与方的个体身份。
* 容灾恢复：最多允许n-t方私钥丢失，不影响资金账户的使用。


2. 跨机构投票决议
针对其多数独立决策方同意才能通过决议的需求，利用门限签名可以容易地实现这种规则效果。
假定投票决议通过的条件是获得多于50%同意，则可以设置门限值为t > n/2。由此，只有当某个决议项收集了至少t个决策方的签名时，才能针对该决议项生成有效的签名，进而通过该项决议。
同时，正如基金会区块链资金账户所有展示的身份隐匿特性，所有决策方的身份都受到匿名保护，可以安心独立地完成做出符合自身意愿的决策。
对于不同决策方拥有不同权重的投票决议过程，门限签名也可以轻易支持。
简单设计是按权重分配不同数量的私钥给对应决策方，这样各个决策方能产生不同个数的签名分片，体现其分布式协作中的权重分配。
高阶设计可以采用带权重的门限签名方案，即参与方均是一个私钥，但产生的签名自带权重。
由此可见，对于多方协作中所涉及的联合决策、权重分配、身份保护、容灾恢复等核心需求，门限签名都能提供很好的支持

### 门限签名的使用注意事项
1. 基本算法选型

首先，我们需要区分一类与门限签名功能类似的签名技术，即多重签名技术。其实现机制是让多个参与方进行多次签名操作，
最终生成多个签名，但不能对这些签名进行合并，验证时需要按各个参与方的签名公钥依次验证

多重签名在公私钥对的初始化便捷度指标上占优，但综合各项指标，门限签名通常是更优的选择。
多重签名只能一个一个的验证，而且签名不能合并。不匿名。

目前比较常见的门限签名算法有，基于RSA的Shoup门限签名方案、基于Elgamal 的Harn 门限签名方案、基于ECDSA的门限签名方案，以及基于BLS的门限签名方案。

从综合性能方面考量，比较推荐使用基于ECDSA的门限签名方案和基于BLS的门限签名方案，目前其签名效率均可以达到毫秒级

2. 是否引入可信第三方
回到公私钥对的初始化指标，门限签名需要一个协商过程才能完成初始化。如何安全地进行初始化，让各个参与方获得自身的私钥分片，是保障门限签名有效性的关键。

根据这一初始化过程中，是否需要引入可信第三方，门限签名可以分成以下两个大类： 
* 中心化门限签名：由可信第三方生成所有签名方的私钥分片，然后进行私钥分片分发，最后各签名方使用私钥分片进行签名。签名方之间不需要进行私钥分片生成过程中的数据交互。
* 分布式门限签名：不需要引入可信第三方，签名方可以通过交互进行相关参数的协商，完成各自私钥分片的生成过程。获得私钥分片后，签名方使用其进行签名。

上述两类门限签名方式的不同之处在于，中心化门限签名的签名方之间，数据交互少，甚至没有交互，极大程度降低通信开销，
但所有签名方均需信任一个第三方。分布式门限签名不需要可信第三方，但是签名方之间需要进行数据交互，增加了通信开销。
具体业务场景中，如果存在一个可以担任可信第三方的角色，采用中心化门限签名方案是较好的选择，可以提高系统效率。如果不存在此类角色，则可以选择分布式门限签名


### 门限签名的应用赏析 
公钥证书服务 PKI（Public Key Infrastructure）的分布式版本 DPKI（Decentralized Public Key Infrastructure）。
PKI作为鉴别数字签名有效性的三大必备共性技术之一，其解决的核心问题是：公钥密码算法中，公钥有效性的认证问题。

PKI一般由一个权威机构运营，提供对实体身份和公钥的认证服务，认证通过后签发一个对应的数字证书。通过数字证书可以证明身份的真实性，以及身份与公钥的关联性。
传统PKI面临的不足之处主要体现在，传统PKI证书签发机构在签发和管理证书的过程中，可能存在单点脆弱性，
即出现单一证书签发机构的证书签发私钥泄露或被窃取，从而导致重大声誉和财务损失。

例如，黑客从中心化的证书签发机构获得签名证书并窃取私钥，然后对恶意软件进行签名，生成看似安全的签名认证软件，但这实际是一个恶意软件，非常容易导致网络安全事故。
保障数字证书的有效性是PKI 系统的信任基础，影响到整个系统的可靠性。为了提高系统可靠性，可以基于门限签名来构造分布式公钥证书服务DPKI。

在证书签发过程中，使用门限签名算法，使得一个有效的数字证书必须获得来自不少于门限个数的签名分片才能生效。同时，证书的验证过程只需要使用单个合并公钥，所以也不会影响原有的证书验证过程。
DPKI实现了一种分布式公钥证书管理体系，要求多方授权才能签发数字证书，不再依赖单一实体对签名私钥的保护能力。当黑客获取的签名私钥个数少于门限值，就无法自行签发有效的数字证书，无法进行网络破坏和攻击行为。
门限签名使得传统PKI的单一信任点变为了分布式PKI的信任网，可以有效提高PKI的稳健性，使其签发的数字证书更安全、更可信。

正是：平等分权契约须联名，门限签名不合则不达！

在多方协同、互利互惠的分布式商业大环境中，如何有效地支持各个参与方之间权利分配、独立决策是至关重要的业务需求。门限签名则是满足这些协作性需求的一类关键技术，控制权利过分集中导致的系统性风险，鼓励更多实体参与合作，并建立公平、对等的伙伴关系，在数字契约的框架下，切实保障各个参与方的合法权益。

门限签名对参与方的身份也提供了一定的匿名保护，但是对于待签数据本身没有提供直接的保护。签名方依旧可以看到待签数据的明文，在某些特定的业务场景中，这是不可接受的。为什么这些业务场景会有这样的隐私保护需求？技术上如何满足这一需求？欲知详情，敬请关注下文分解。

## 群签名 
* 群管理员初始化群设置，负责管理私钥，基于群管理私钥生成群公钥并公开
* 与新的群成员协商，为其生成或分配成员的签名私钥
* 使用自己的群管理私钥对现有的签名进行身份解密
* 群公钥是所有群成员共用的，即当群成员关系发生变更时，当前群公钥可能会因此作废





参考文档
{% highlight ruby %}
https://mp.weixin.qq.com/s/DPyMPksg8kVu7hTSCkRdxw

https://mp.weixin.qq.com/s/_PuE0zH5J7wlfLog36fx1A
{% endhighlight %}
