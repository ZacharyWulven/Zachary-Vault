---
layout: post
title: JavaScript-06-类
date: 2022-09-25 16:45:30.000000000 +09:00
tag: javascript
---

# 类
* 如果两个继承同一原型，意味着它们是通过同一个构造函数或工厂函数创建和初始化的。
* JavaScript 的类和基于原型的继承机制与 Java 等语言中类和基于类的继承机制有着本质区别

## 0x01 类和原型
* 常见做法是定义一个函数来创建和初始化新对象
{% highlight ruby %}
    function range(from, to) {
        // 创建继承下面定义的原型对象，这个原型对象保存为一个函数的一个属性，为所有范围对象定义共享方法
        let r = Object.create(range.methods);

        r.from = from;
        r.to = to;

        return r;
    }

    range.methods = {
        includes(x) { return this.from <= x && x <= this.to; },

        // 生成器函数让这个类的实例可迭代
        // 只适用于数值范围
        /*
            星号 * 表示它是一个生成器函数，非普通函数，
            即实例可以与 for/of 循环和扩展操作符 ... 一起使用
        */
        *[Symbol.iterator]() {
            for(let x = Math.ceil(this.from); x <= this.to; x++) {
                yield x;
            }
        },
        toString() { return "(" + this.from + "..." + this.to + ")"; }
    };

    let r = range(1, 3);
    console.log(r.includes(2)); // true
    console.log(r.toString());  // (1...3)
    console.log([...r]);        // [ 1, 2, 3 ]

{% endhighlight %}

## 0x02 类和构造函数
* 0x01 并非习惯的写法，因为没有定义构造函数
* 构造函数式专门用于初始化新对象的，使用 new 关键字
* Note：构造函数的 prototype 属性将被用做新对象的原型
* Note：只有函数有 prototype 属性
* 构造函数在编写时就会考虑作为构造函数以 new 来调用，把构造函数当成普通函数调用可能会有问题
{% highlight ruby %}
    function Range(from, to) {
        this.from = from;
        this.to = to;
    }

    Range.prototype = {
        includes(x) { return this.from <= x && x <= this.to; },

        // 生成器函数让这个类的实例可迭代
        // 只适用于数值范围
        /*
            星号 * 表示它是一个生成器函数，非普通函数，
            即实例可以与 for/of 循环和扩展操作符 ... 一起使用
        */
        *[Symbol.iterator]() {
            for(let x = Math.ceil(this.from); x <= this.to; x++) {
                yield x;
            }
        },
        toString() { return "(" + this.from + "..." + this.to + ")"; }
    };

    let r = new Range(1, 3);
    console.log(r.includes(2)); // true
    console.log(r.toString());  // (1...3)
    console.log([...r]);        // [ 1, 2, 3 ]   
{% endhighlight %}

* 在函数体内可以通过一个特殊表达式，new.target 判断函数是否作为构造函数被调用了，如果该表达式的值有定义，就说明函数是作为构造函数通过 new 调用的。
* new.target 并非一直引用它所在的构造函数，也可能引用子类的构造函数
* 如果 new.target 是 undefined 那么包含函数就作为普通函数被调用了，没有使用 new。
* Note：箭头函数没有 prototype 属性而且是从定义它们的地方继承 this，所以不用箭头函数作为构造函数
{% highlight ruby %}
Note：这种方式只适用于老代码，使用 class 关键字创建的类不允许不使用 new
    function C() {
        if (!new.target) {
            console.log("new C");    
            return new C();
        }
    }

    let c = C();
{% endhighlight %}

### 2.1 构造函数、类标识和 instanceof
* Note：原型对象是类标识的基本
* 当且仅当两个对象继承同一个原型对象时，它们才是同一个类的实例
{% highlight ruby %}
instanceof 右侧应该是构造函数，左侧是对象
r instanceof Range; // 测试 r 是否是一个 Range 对象
这个实质其实是检查 r 是否继承 Range.prototype

    function Strange() {

    }
    Strange.prototype = Range.prototype;
    let s = new Strange();
    console.log(s instanceof Range); // true
    
{% endhighlight %}

使用 isPrototypeOf 测试某个对象原型链中是否包含指定原型
{% highlight ruby %}
    let d = range.methods.isPrototypeOf(r);
    console.log("d is", d); // true 即 range.methods 是 r 的原型对象
{% endhighlight %}

### 2.2 constructor 属性
* 非箭头函数、生成器函数、异步函数都可以作为构造函数
* 构造函数调用需要一个 prototype，因此普通函数自动有一个 prototype 属性，这个属性是一个对象，有一个不可枚举的 constructor 属性
* 而 constructor 属性的值就是该函数对象
* 除了 ES5 的 Function.bind() 方法返回的函数，绑定函数没有自己的 prototype 属性，但在被当做构造函数调用时，它们使用底层函数的 prototype 属性
{% highlight ruby %}
    let F = function() {};
    let p = F.prototype;
    let c = p.constructor;
    console.log(c === F); // true 

    let o = new F();
    console.log(o.constructor === F); // true
{% endhighlight %}

![](/assets/images/js/prototype.png)

如果原型没有 constructor 属性，可以显示的添加
{% highlight ruby %}

    Range.prototype = {
        constructor: Range,
    }
{% endhighlight %}

## 0x03 使用 class 定义类
* 使用 class 并未改变 JavaScript 类基于原型的本质
* 类体即类花括号中的内容，类体不支持名/值对形式的属性定义
* 类体中可以创建获取方法、设置方法、生成器方法
{% highlight ruby %}
    class Range {
        // 构造函数
        // Note：如果没有参数，可以不写 constructor，解释器为你隐式创建一个空的构造函数
        constructor(from, to){
            this.from = from;
            this.to = to;
        }

        // 方法省略了 function
        includes(x) { return this.from <= x && x <= this.to; }

        *[Symbol.iterator]() {
            for(let x = Math.ceil(this.from); x <= this.to; x++) {
                yield x;
            }
        }

        toString() { return "(" + this.from + "..." + this.to + ")"; }  
    }

    // 定义子类
    class Span extends Range {
        constructor(start, length) {
            if (length >= 0) {
                super(start, start + length);
            } else {
                super(start + length, start);
            }
        }
    }
{% endhighlight %}

* 类定义表达式
{% highlight ruby %}
    let square = function(x) { return x * x; };
    console.log(square(3)); // 9
    // => 等价于
    let Square = class { constructor(x) { this.area = x * x; } };
    console.log(new Square(3).area); // 9
{% endhighlight %}

* Note：即使没有出现 "use strict" 指令， class 声明体内所有代码默认处于严格模式，即在声明前使用变量会导致语法错误，等等
* Note：与函数声明不同，类声明不会被 “提升”，所以不能在声明类之前初始化它

### 3.1 静态方法
* 在 class 体内，把 static 关键字放在方法声明前可以定义静态方法，静态方法是作为构造函数而非原型对象的属性定义的。
* Note：static 就是类方法。静态方法是通过类调用的，而不是实例
* Note：静态方法里 this 没有意义
{% highlight ruby %}
    class A {
        constructor(name) {
            this.name = name;
        }
        // 定义的方法 A.initFunc 而不是 A.prototype.initFunc
        // 必须调用构造函数
        static initFunc(name) {
            return new A(name);
        }
    }
    let a = A.initFunc("tom");
    console.log(a.name); // tom
{% endhighlight %}

### 3.2 获取方法、设置方法、其他方法
* 一般，对象字面量支持的所有简写的方法定义语法都可以在类体中使用
{% highlight ruby %}
    class A {

        constructor(name) {
            this.name = name;
        }

        get accessor() { return this.name; }
    }
    let a = A("tom");
    console.log(a.accessor); // tom
{% endhighlight %}

### 3.3 公有、私有和静态字段
* 如果想定义类实例属性字段，需必须在构造函数或某个方法中定义
* 如果想定义类静态属性，必须在类体外，并在定义类之后定义
* private 属性，语法 #属性名，即只能在类体中使用
* 可以 private 属性加一个 getter
* 如果在公有或私有属性前加了 static，则这个字段会被创建为构造函数属性，即通过 "类名.属性名" 访问

{% highlight ruby %}
    属性不赋初始值就是 undefined，不过最好赋值初始值
    class Buffer {
        #size = 10;
        capacity = 4096;
        buffer = new Uint8Array(this.capacity);
        get size() { return this.#size; };  // 为 private 属性添加 getter

        static name = "Buffer~";  // 创建为构造函数属性
    }
    console.log(new Buffer().size); // 10
    console.log(Buffer.name); // Buffer~
{% endhighlight %}

### 3.4 示例
{% highlight ruby %}
    class Complex {
        // 声明私有变量
        #r = 0;
        #i = 0;

        constructor(real, imaginary) {
            this.r = real;
            this.i = imaginary;
        }   

        plus(that) {
            return new Complex(this.r + that.r, this.i + that.i);
        }

        times(that) {
            return new Complex(this.r * that.r - this.i * that.i,
                               this.r * that.i - this.i * that.r);
        }

        static sum(c, d) {
            return c.plus(d);
        }

        static product(c, d) {
            return c.times(d);
        }

        get real() { return this.r; }

        get imaginary() { return this.i; }

        get magnitude() { return Math.hypot(this.r, this.i); }

        toString() { return `{${this.r}, ${this.i}}`;}

        equals(that) {
            return that instanceof Complex && this.r === that.r && this.i === that.i;
        }

        static ZERO = new Complex(0,0)
                static One = new Complex(1,2)
    }

    console.log(Complex.ZERO.toString()); // {0, 0}
{% endhighlight %}

## 0x04 为已有类添加方法
* 即对象创建后可以给其原型添加方法
* 但最好不要给内置类型（比如 Object、String）添加方法，因为后续广泛可能会增加同名的方法
* 而且 Object.prototype 上的属性是 for/in 循环可见的

{% highlight ruby %}
    Complex.prototype.conj = function() { return new Complex(this.r, -this.i); };
    console.log(Complex.One.conj());  // Complex { r: 1, i: -2 }
{% endhighlight %}


## 0x05 子类

### 1 子类与原型
* 不使用 class 和 super 进行定义
{% highlight ruby %}
    function Span(start, span) {
        if (span >= 0) {
            this.from = start;
            this.to = start + span;
        } else {
            this.to = start;
            this.from = start + span;

        }
    }
    // 继承 Range.prototype
    Span.prototype = Object.create(Range.prototype);
    // 自定义构造函数
    Span.prototype.constructor = Span;
    Span.prototype.toString = function() {
        return `(${this.from}... +${this.to - this.from})`;
    }

//另一种继承写法
    function inherit(Target, Origin) {
        function F() {};
        F.prototype = Origin.prototype;
        Target.prototype = new F();
        Target.prototype.constructor = Target;
    }
    function Father() {}
    function Son() {}
    inherit(Son, Father);
{% endhighlight %}

### 2 通过 extends 和 super 创建子类
* 使用 extends
{% highlight ruby %}
    class EZArray extends Array {
        get first() { return this[0]; }
        get last() { return this[this.length - 1]; }
    }
    let a = new EZArray();
    console.log(a instanceof EZArray); // true
    console.log(a instanceof Array);   // true
    a.push(1,2,3,4);
    console.log(a.first);              // 1
    console.log(a.last);               // 4
    console.log(Array.isArray(a));     // true
    console.log(EZArray.isArray(a));   // true
    // EZArray.prototype 继承了 Array.prototype
    console.log(Array.prototype.isPrototypeOf(EZArray.prototype)); // true
    // extends 特有特性能继承静态方法和属性
    console.log(Array.isPrototypeOf(EZArray)); // true

{% endhighlight %}

* 使用 super

{% highlight ruby %}
    class TypedMap extends Map {
        constructor(keyType, valueType, entries) {
            if (entries) { // 检查它们的类型
                for(let [k, v] of entries) {
                    if (typeof k !== keyType || typeof v !== valueType) {
                        throw new TypeError(`Wrong type for entry [${k}, ${v}]`);
                    }
                }
            }
            // 调用 super 进行初始化
            super(entries);
            
            this.keyType = keyType;
            this.values = valueType;
        }
        
        // override set() 方法，添加了自定义的 check
        set(key, value) {
            if (this.keyType && typeof key !== this.keyType) {
                throw new TypeError(`${key} is not of type ${this.keyType}`);
            }
            if (this.valueType && typeof value !== this.valueType) {
                throw new TypeError(`${value} is not of type ${this.valueType}`);
            }
            return super.set(key, value);
        }

    }
{% endhighlight %}
* Note：使用 super 需要知道
1. 如果 extends 定义了一个类，则这个类的构造函数必须使用 super() 调用父类的构造函数
2. 如果没有为子类定义构造函数，解释器会为子类自动创建一个，内部会将参数传给 super() 并调用 super()
3. 在 super() 调用父类构造函数之前不能在子类构造函数中使用 this
4. 在没有使用 new 关键字调用函数中，new.target 的值是 undefined。而在构造函数中 new.target 的值是被调用的构造函数，
调用 super() 时父类构造函数可以通过 new.target 获取子类的构造函数，父类可以使用 target.name 大日志

### 3 组合而不是继承
{% highlight ruby %}
    class Histogram {
        constructor() { 
            this.map = new Map();
        }

        count(key) {
            return this.map.get(key) || 0;
        }

        has(key) {
            return this.count(key) > 0;
        }

        get size() {
            return this.map.size;
        }

        add(key) {
            this.map.set(key, this.count(key) + 1);
        }

        delete(key) {
            let count = this.count(key);
            if (count === 1) {
                this.map.delete(key);
            } else {
                this.map.set(key, count - 1);
            }
        }

        [Symbol.iterator]() {
            return this.map.keys();
        }

        keys() { return this.map.keys(); }
        values() { return this.map.values(); }
        entries() { return this.map.entries(); }
    }

{% endhighlight %}


### 4 类层次与抽象类
{% highlight ruby %}
    class AbstractSet {
        has(x) { throw new Error("Abstract Method"); }
    }

    class NotSet {
        constructor(set) {
            super();
            this.set = set;
        }

        has(x) { return !this.set.has(x); }

        toString() { return `{x| x - ${this.set.toString()} }`; }
    }
    
    class RangeSet extends AbstractSet {
        constructor(from, to) {
            super();
            this.from = from;
            this.to = to;
        }

        has(x) { return x >= this.from && x <= this.to; }

        toString() { return `{x| ${this.from} <= x <= ${this.to} }`; }
    }
{% endhighlight %}

{% highlight ruby %}

{% endhighlight %}
