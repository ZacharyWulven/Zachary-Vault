---
layout: post
title: ETH-06-真实案例与反思
date: 2022-08-12 16:45:30.000000000 +09:00
tag: 区块链
---

## 0x01 安全漏洞例子一 TheDAO
* DAO（Decentralized Autonomous Organization）
* DAO 有点像 DAC（Decentralized Autonomous Corporation），但 DAC 以盈利为目的

### TheDAO 
TheDAO 通过众筹筹钱方法进行投资，本质是运行在以太坊的智能合约，投 eth 给合约然后得到代币，再通过投票决定投资什么项目，
最终如果有了收益也根据代币权重获得收益。

#### TheDAO 如何取回钱
* 通过 splitDAO 方式即拆分形成子基金（childDAO）的方式
* 如果少部分人认为某个项目可投但无法获得大部分的投票同意，就可以用 splitDAO 方式拆分形成自己的 childDAO，同时之前的 TheDAO 代币被收回，
然后换成相应数量的以太币，这些以太币会打入自己的 childDAO子 基金里，然后就可以投它们想投的项目了
* TheDAO 没有提供 withdraw 函数让用户自己取钱
* 拆分有 7 天讨论期，用于讨论拆分的好坏，是否加入；然后有 28 天的锁定期后才能取钱
* 就是这 28 天锁定期给了以太坊补救措施的时间，拆分的理念并没有错，即民主也要尊重少数人的权利，问题出现在代码实现

### TheDAO 合约代码  

![](/assets/images/eth/the_dao.png)

* withdrawRewardFor 先把钱还给相应的人
* 然后减少总金额的数量，再把调用者的账户清零
* 黑客就是利用先转账再清零进行的重入攻击

{% highlight ruby %}
Warning：正确的做法应该是先清零再转账
{% endhighlight %}

黑客利用重入攻击转走了 5000 万美元的钱，差不多 1/3 的钱，这个事件引起了当时以太坊社区恐慌和以太币的跳水，
然后以太坊社区分两派： 
* 一派认为要回滚交易，这样保证投资者的利益，
* 另一派则认为黑客没有违法，code is law。认为以太坊系统并没有问题，只是 TheDAO 合约代码有问题，而以太坊有那么多合约，不能一个合约出了问题就回滚，
这还怎么维护不可篡改性

之后黑客给以太坊公开信，黑客说他并没有做任何错事，只是利用了你代码中的一段 feature 🤣。

以太坊开发者就是 V 神那帮人是站在补救这边的因为这个事件影响太大了，占当时以太币的 10+%，一个合约占这么多以太币已经很大了，
所以以太坊认为 TheDAO 是 too big to fail（即影响很大，或影响国家或社区）的。

### 如何补救
从发生重入攻击之前的块分叉？这样不行因为其他正常交易会受到影响

{% highlight ruby %}
回滚要遵从精确锁定并保证其他正常的交易不受影响
{% endhighlight %}

### 软分叉方案
以太坊提出了软分叉两步实现：Step1 首先锁定黑客的账户，Step2 再设法把盗取的以太币退回去。

以太坊进行了软件升级，升级中增加了一条规则，凡是跟 TheDAO 这个账户相关的不允许进行交易，大部分矿工都支持都进行了升级，但遗憾的是这个升级有个 bug，
这个 bug 是功能性的是根汽油费相关，正常交易时要收汽油费，但如果看到这个交易跟 TheDAO 相关是非法的，那这种交易是否还需要汽油费，以太坊犯错就是在这个地方
如果发现交易非法，没有收取汽油费，结果出现了大量的 DDoS，导致矿工受不了回滚了软件升级，于是这个软分叉的方案失败了。
软分叉失败后剩下的时间不多了

### 硬分叉方案
软分叉失败后有了硬分叉，通过硬分叉方式把 TheDAO 合约的钱转到一个新的合约中，这个新的合约只有一个功能就是退钱；
这个就是强制执行钱的转移不管有没有相关签名，规定升级了软件的矿工在挖到 192 万个区块时候自动执行转 TheDAO 的钱到新合约的交易，写死在升级代码中，
旧矿工不会认可这个交易的，因为没有合法的签名，交易时非法的，这个方案提出后引起了以太坊社区劲烈的讨论，有的人就认为这是胡搞，一点也不去中心化，
最终以太坊社区写了投票的合约进行投票，经过投票后决定是硬分叉方案。

于是就等着历史性的第 192 万区块出块，最终这次没有出意外，黑客没能获利，那么故事到这里就结束了 ？

### 后续
No 当初那些反对硬分叉的人并没有因为投票结果而改变立场，它们认为
1. 这次投票参与的人不是很多，有很多以太币根本没有进行投票
2. 最重要的一点：投票就能说明问题么，大多数人的意见一定是对的吗？是否公平？
硬分叉后旧的那条链还没有消亡，还有矿工在上边继续挖只不过算力大幅度下降了不到原来的 1/10，但这条链上挖矿难度也下调了，因为竞争没有那么激烈了，
所以还有一些矿工愿意留在旧链上继续挖，新链的币还叫 ETH，旧链挖出的币叫 ETC（Ethereum Classic 经典以太坊），旧链上有些投机目的，因为挖矿难度小，
上交易所有盈利途径，而有些矿工继续挖是因为信仰，认为 ETC 才是根正苗红的去中心化的链，有很多人对旧链的存活产生了质疑，因为以太坊开发者是支持新链的，
但 ETC 至今依然存活，两条链并存
3. 而两条链并存初期是有问题的，因为新旧两链使用相同的代码，相同的账本和私钥，这就有重放攻击的问题，一个新链的合法交易放到旧链上重放也是合法的，
反之旧链上的合法交易放到新链重放也是合法的，就带来了管理上的混乱，后来通过给两条链加 chainID 区分解决的
4. 通过 chainID 真正的分开了新链和旧链 ETH 和 ETC


### 问题
解放方案时候都是把 TheDAO 所有账户作为目标，能不能只针对黑客的账户进行操作？
* 不行，因为代码是公开的其他人可以效仿黑客的攻击手段

## 0x02 反思

1. 智能合约的反思，智能合约并不智能，它就行一个自动售货机，而且很笨
2. Irrevocability is a double edged sword（不可篡改是一把双刃剑）
* 软件升级需要硬分叉，而且需要大量矿工支持
* 需要硬分叉时候需要告诉别人原因，这时很可能泄露 bug 原因，导致还没来得及升级黑客就抢先发动了攻击
* 不会因为你个人的私钥泄露叫搞软分叉，TheDAO 是因为影响太大了
* 一旦自己私钥泄露应该尽快的把账户的钱转到一个新账户中

{% highlight ruby %}
像 TheDAO 出现这样问题，怎么办，可以用黑客的方法把自己的钱转走 😂，即利用黑客的手段出于好的目的把钱转走
{% endhighlight %}

3. Nothing is irrevocable 
* 没有什么是不可篡改的，连宪法都能改，但修宪很难
* 比如美国禁酒令被推翻这个真实案例
* 在美国如果警察发现你拿了开个盖的酒在大街上，他有权逮捕你，这叫 open container laws

4. solidity 这个语言设计上有没有什么问题？
solidity 设计有些反自然

{% highlight ruby %}
solidity 的转账其实就是隐式调用了你的 fallback 函数，而你的 fallback 又可以调用我，这就有了安全隐患
{% endhighlight %}

所以有的人认为应该用函数式的语言，虽然 solidity 还有待改进的地方，但是否需要用函数式语言还有待探讨，
将来可能有智能合约的模板。openzeppelin 就是一个发展的很好的产物


5. 开源代码就一定比不开源的安全么？
many eyeball fallacy

{% highlight ruby %}
fallacy 错误认识的意思 相当于 misbelief
{% endhighlight %}

涉及到财产安全的最好自己看看源代码比如合约代码

6. 去中心化就一定不能修改么？
* 不是，要修改也要用去中心化的方式去完成
* TheDAO 事件硬分叉能成功，还是广大矿工认可以太坊开发者的方案，认为还是符合公正利益的
* 如果以太坊开发者为了一己私利，广大矿工肯定不会跟着它们干的
* 分叉不一定是坏事，分叉才是去中心化的体现，中心化的事件你只能弃权，但不能分叉
* 分叉正是民主的体现

7. 去中心化不 !== 分布式
* 去中心化系统必然是分布式的，但分布式不一定是去中心化的
* 去中心化是 state machine 模式，即多台计算机做相同的事保持状态一致
* 分布式不是 state machine 模式，是让多台计算机做不同的事然后把结果汇总，这样比单机做要快

{% highlight ruby %}
智能合约是用来编写控制逻辑的
{% endhighlight %}

## 0x03 安全漏洞例子二 Beauty Chain（美链）
美链是一个在以太坊上发现的代币。

![](/assets/images/eth/beauty.png)

{% highlight ruby %}
ICO Initial Coin Offering
{% endhighlight %}

这些发现的代币，没有自己的链而是发行在以太坊上，通过智能合约方式，发行这个代币的合约对应以太坊账户中的一个节点，这个节点有它自己的余额，
代币的转账、销毁等都是通过调用合约实现的


### 问题代码

![](/assets/images/eth/beauty1.png)

amount = uint256(cnt) * _value 可能溢出，溢出后 amount 就是很小的数，给 sender 减的是很小的数，但下边给每个人增加是很大的。
这样就造成了系统凭空发现了很多代币


### 攻击细节

![](/assets/images/eth/beauty2.png)

金额高位已经是 8 了，乘以 2 后算出溢出 amount = 0

### 攻击区块情况
![](/assets/images/eth/beauty_b.png)

### 攻击结果 
![](/assets/images/eth/beauty3.png)

币值暴跌

### 交易所禁止提币
![](/assets/images/eth/beauty4.png)


### 反思
在进行数学运算时候一定要考虑溢出的可能性。Solidity 有一个 SafeMath 库会检测有没有溢出

![](/assets/images/eth/beauty5.png)

源代码只有乘法没有检测溢出，下边的减法和加法都检测了溢出 😂


## 0x04 课程总结

### 加密货币的支付方式本来就不应该与已有的支付方式进行竞争
* 加密货币的支付方式应该用在已有支付方式解决的不是很好的地方，而不是咖啡厅、披萨店支持，比如跨国支付
* Information can flow freely on the Internet，but payment cannot。
* 未来发展趋势是信息与支付方式的融合，现在信息的获取是高效的，但支付方式并没有达到信息的高效

### 区块链技术发展，共识协议的改进，支付效率已经是大大提高了

### 评价一个支付方式的效率好坏，要在当时的历史条件下去看，跟当时其他支付手段做对比
* 比如巴西某个人给你报酬，用比特币是很高效的了

### 一个新的技术在早期有问题是正常的
* ATM 机可以看作是物理世界的智能合约
* 软件将改变世界
* 民主制度不是一种最完美的制度，与奴隶制度，封建制度它是进步的，但也有缺陷和弊病

### 去中心化一定是好事情么？
* 不是的
* 不要因为某些产品用去中心化包装一层就把它捧上天，要具体问题具体分析



