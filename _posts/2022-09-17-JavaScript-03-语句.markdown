---
layout: post
title: JavaScript-03-语句
date: 2022-09-17 16:45:30.000000000 +09:00
tag: javascript
---

## 0x01 语句

### 复合语句

{% highlight ruby %}
复合语句
    {
        x = Math.PI;
        x = Math.cos(x);
    }
     
空语句
    if (x) ;
    
if 语句的 else 属于最近的一个 if 
{% endhighlight %}

### switch 语句
* 每个 case 后可以跟任意表达式
* case 判断匹配用的是 === 全等

{% highlight ruby %}

function convert(x) {
    switch(typeof x) {
        case "number":  // case 可不加 {}
            console.log("x is number");
            console.log("x is number");
            return x.toString();  // case 需要加 break 或 return，默认是穿透的
        case "string":
            return "'" + x + "'";
        default:
            return String(x);
    }
}
{% endhighlight %}

### 循环语句
循环语句有 5 种，while、do/while、for、for/of、for/in
{% highlight ruby %}
1 while
let count = 0;
while (count < 10) {
    console.log(count);
    count++;
}

2 do/while
do {
    console.log(count);
    count--;
} while(count > 0); // 这里需要分号

3 for
for(i = 0, j = 10; i<10; i++, j--) {
    ;
}
for(;;) 等于 while(true)

{% endhighlight %}

### for/of
* ES6 新增 for/of , of 后必须是可迭代对象
* 数组、字符串、集合、映射都是可迭代对象
{% highlight ruby %}
let data = [1,2,3,4,5,6], sum = 0;
for(let element of data) {
    sum += element;
       
   // data.push(sum); // Note 造成无限循环

}
console.log(sum);

数组迭代是“实时”的即迭代过程中变化可能影响迭代输出，如果在循环体内加一行 data.push(sum); 
则会是一个无限循环，因为迭代永远不会触及最后一个元素
{% endhighlight %}

* Note：对象是不可迭代的，对对象 for/of 会抛出 TypeError
* Note:如果想迭代对象可以用 for/in 或基于 Object.keys() 方法的结果使用 for/of
* Object.keys() 返回一个对象属性名的数组，而数组是可以用 for/of 的

{% highlight ruby %}
    let o = {x: 2, y: 4};
    let keys = "";
    // keys， Object.keys() 返回对象属性名的数组
    for(let k of Object.keys(o)) {
        keys += "," + k;
        // o.z = 5; Note 这里改变 o 不会影响迭代

    }
    // values
    for(let k of Object.values(o)) {
        console.log(k);
    }

    // keys-values
    for(let [k,v] of Object.entries(o)) {
        console.log(k, v);
    }
{% endhighlight %}

* for/of 与字符串
{% highlight ruby %}
字符串是按照 Unicode 码点而不是 UTF-16 字符迭代的
    let frequency = {};
    for(let letter of "mississipppi") {
        if (frequency[letter]) {
            frequency[letter]++;
        } else {
            frequency[letter] = 1;
        }
    }
{% endhighlight %}

* for/of Set、Map
{% highlight ruby %}
let text = "Na na na na Batman!";
let wordSet = new Set(text.split(" "));
let unique = [];
for(let word of wordSet) {
    unique.push(word);
}
console.log(unique);

// for/of map
let m = new Map([[1, "one"]]);
// 返回 key-value 数组，第一个元素时 key，第二个是 value
for(let [key, value] of m) {
    console.log(key, value);
}
{% endhighlight %}

* for/await 异步迭代器
{% highlight ruby %}
function printStream(stream) {
    for await (let chunk of stream) {
        console.log(chunk);
    }
}
{% endhighlight %}

### for/in
* for/in , in 后可以是任意对象
{% highlight ruby %}
格式：
for (variable in object) 
  statement
  
variable 通常是一个变量，但也可以是变量声明或任何可以作为赋值表达式左值的东西
执行 for/in 时，JavaScript 解释器会先求值 object 表达式，如果它的求值为 null 或 undefined，解释器会跳过循环并转移到下一个语句，
如果 object 表达式求值不是 null 或 undefined，会执行每次迭代，每次迭代前解释器会求值 variable 表达式，将属性名赋值给它
  
Note：variable 可以是任意表达式，只要能求值为赋值表达式的左值就行，这个表达式每次都会求值，即每次求值结果可能都不同
  

例子
let o = {x: 2, y: 4};
let a = [];
let i = 0;
// Note：将 o 属性迭代赋值给 a 数组对应索引
for(a[i++] in o) {

}
console.log("a is", a) a is [ 'x', 'y' ]

JavaScript 数组就是一种特殊的对象，而数组索引是对象的属性

Note：在操作数组时候，基本只会用 for/of，而不是 for/in

for/in 循环 并不会枚举对象的所有属性，比如它不会枚举名字为符号的属性，
而对于名字为字符串的属性，它只会遍历可枚举的属性。JavaScript 核心定义的内部属性时不可枚举的，
默认下，我们手写代码定义的属性和方法都是可枚举的

继承的可枚举属性也可以被 for/in 循环枚举，这意味着如果使用 for/in 循环，并且代码会定义所有对象继承的属性，
那么你的循环有可能出现意外结果，因此很多程序员更愿意基于 Object.key() 使用 for/of 循环，而不是使用 for/in

总之，优先使用 for/of 循环

{% endhighlight %}

### 跳转语句

{% highlight ruby %}
1 语句标签：通过前置一个标识符和一个冒号，可以为任何语句加上标签。
格式：identifier: statment

任何语句都可以有标签，但只要那些有语句体的语句加标签才有意义，比如循环语句和条件语句
标签与变量不在同一个命名空间，所以同一个标识符可以作为标签名和变量或函数名
已经有标签的语句可以再加标签，即任何语句可以有多个标签

let m1 = 10
tester: while(m1 > 0) {
    m1--;
    console.log(m1);
    if (m1 > 5) {
        console.log(m1)
        continue tester;
    } else {
        // ****** 2 break 后可以加标签，表示退出标签语句（类似 swift）
        // break 有标签时，它会跳转到指定标签的语句末尾或终止该语句
        // break 与标签名之间不允许出现换行符
        break tester;
    }
}


3 continue 也可加标签，只能在循环体内使用，
for 中 continue，会先执行 increment 表达式，再返回其条件
while 中 continue，会直接返回到它的条件判断
continue 与标签名之间不允许出现换行符


4 return
如果函数没有 return，最后会返回到其调用者，求值为 undefined

5 yield
类似于 return，是一个操作符而非语句，只能用于 ES6 新增的生成器函数中，以回送生成的值序列中的下一个值，同时又不真正返回


6 throw
语法：throw expression;
expression 可能求值为任何类型的值

异常时沿 JavaScript 方法的词法结构和调用栈向上传播的，如果没有找到任何异常处理程序，则将异常作为错误报告给用户
例：throw new Error("x must not be null")


7 try/catch/finally
是 JavaScript 的异常处理机制
finally 是清理代码
try 必须有，catch 和 finally 选一个就行
**** Note：只要执行了 try 中的任何代码，finally 子句就一定会执行
如果 try 没有异常，执行完 try 后执行 finally，
如果 try 有异常，局部有 catch，执行完 try 后执行 catch，完后再执行 finally，
如果 try 有异常，局部没有 catch， 执行完 try 后执行 finally，然跳转到最近的 catch
如果 finally 执行中抛出异常，会替代当前的其他异常

例：
function parseJSON(s) {
    try {
        return JSON.parse(s);
    } catch {
        // 出错了，但不关心异常
        return undefined;
    }
}
{% endhighlight %}

### 其他语句
{% highlight ruby %}
1 with 
with 会运行一个代码块，就好像指定对象的属性是该代码块作用域中的变量一样
语法： with(object)
        statment 
这个语句创建一个临时作用域，以 object 的属性作为变量，然后在这个作用域中执行 statement
with 在严格模式下是被禁用的，在非严格模式下也应该认为已经废弃了，即尽量不使用它 😂
注意：如果在 with 语句体中使用了 const、let、var 声明变量或常量，只会创建一个普通变量，跟指定对象没关系

2 debugger
什么也不做，就像一个断点
例：
  function foo(o) {
      if (o === undefined) {
          console.log("o is ", o);
          debugger;  // 生效需要打开浏览器以及 console
      }
      console.log("here is foo");
  }
  foo();
{% endhighlight %}

#### 3 "use strict"
* "use strict" 是指令不是语句，与常规语句有两点区别
1. 不包含任何语言关键字：指令是由（包含在单引号或双引号中）特殊字符串字面量构成的表达式语句
2. 只能出现在脚本或函数体的开头，位于所有其他真正语句之前
* Note："use strict" 指令目的是表示（在脚本或函数中）它后面的代码是严格代码
* 如果脚本中有 "use strict" 指令，则脚本的顶级（非函数）代码是严格代码
* 除了显示声明，默认，任何位于 class 体或 ES6 模块中的代码全部默认为严格代码
* 严格模式使 JavaScript的一个受限子集，这个子集修复了重要语言缺陷，提供更强的错误检查

严格模式 VS 非严格模式
1. 严格模式不允许使用 with 语句
2. 严格模式下所有变量都必须声明，如果把值赋值给一个未声明的标识符，会导致异常（非严格模式，给未声明的赋值会隐式全局声明，即给全局加个新属性）
3. 严格模式下函数如果作为函数被调用，其 this 值为 undefined，在非严格模式下函数始终以全局对象作为 this 的值
4. 严格模式下如果函数通过 call() 或 apply() 调用，则 this 值就是作为第一个参数传给 call() 或 apply() 的值，
在非严格模式下，null 和 undefined 值会被替换为全局对象，而非对象的值会被转换为对象
5. 严格模式下，给不可写属性赋值或尝试在不可扩展的对象上创建新属性会抛出 TypeError。非严格模式下，这些操作会静默失败
6. 严格模式下，函数的 Arguments 对象保存着一份传给函数的值的静态副本。非严格模式下，Arguments 数组中的元素与函数命名参数引用相同的值
7. 严格模式下，如果 delete 操作符后面跟一个未限定的标识符，比如变量、函数或函数参数，则会抛出 SyntaxError。
非严格模式下，这样的 delete 表达式什么也不做，并且返回 false
8. 严格模式下，尝试删除一个不可配置的属性会导致抛出 TypeError。非严格模式下，这个尝试会失败，并且 delete 表达式会求值为 false
9. 严格模式下，对象字面量定义两个或多个同名的属性是语法错误 。非严格模式下，不会发生错误。
10. 严格模式下，函数声明中有两或多个同名参数时语法错误。非严格模式下，不会发生错误。
11. 严格模式下，不允许使用八进制整数字面量 。非严格模式下，某些实现允许使用。
12. 严格模式下，；标识符 eval 和 arguments 被当做关键字，不允许修改它们的值。不能给这些标识符赋值，不能把它们声明为变量，不能把它们用作函数名或函数参数名，
也不能把它们作为 catch 块标识符使用。
12. 严格模式下，检测调用栈的能力是受限制的。arguments.caller 和 arguments.callee 在函数中都会抛出 TypeError。严格模式函数也有 caller 和 callee 属性， 但读取它们会抛出 TypeError。


### 声明
1. JavaScript 声明用于定义常量、变量、函数和类。
2. 也用于在模块间导入和导出值
3. 函数声明会生成函数对象，在代码执行前函数名会绑定到相应的函数对象上
4. 重要：***** 无论在什么地方声明函数，这些函数都会被“提升”，就好像在作用域的顶部定义一样
5. class 声明一个类，与函数不同，类不会被提升，因此不能在没有声明类之前使用它
6. import 和 export

{% highlight ruby %}
import 和 export 声明共同用于让一个 JavaScript 模块中定义的值可以在另一个模块中使用
一个模块就是一个 JavaScript 文件，有自己的作用域，完全与其他模块无关
如果在一个模块要使用另一个模块的值，唯一的方法就是在定义值的模块使用 export 导出值，
在使用值的模块中使用 import 导入值
import 指令用于从另一个 JavaScript 代码文件中导入一个或多个值，并在当前模块中为这些值指定名字，下面是几个形式的例子：
import Circle from "./geometry/circle.js"
import { PI, TAU } from "./geometry/constants.js"
import { magnitude as hypotenuse } from "./vectors/utils.js"

 
Note：JavaScript 模块中的值是私有的，除非被显示导出，否则其他模块都无法导入。导出使用 export，export 例子：
const PI = Math.PI
const TAU = 2 * PI
export {PI, TAU}

export 关键字有时也作其他声明标识符，从而构成一种复合声明，在定义常量、变量、函数或类的同时又导出它们，例如
export const TAU = 2 * PI
export function magnitude(x, y) { return Math.sqrt(x * x, y * y)}
export default class Circle { }
{% endhighlight %}

## 0x02 对象

### 1 简介
* 对象属性名通常是字符串，也可以是符号
* JavaScript 的对象是动态的，即可以动态添加和删除属性
* JavaScript 中任何不是字符串、数组、布尔、符号、null、undefined 的值都是对象
* 字符串、数组、布尔类似不可修改的对象，但他们不是对象
* 重要：对象是按引用操作的
* JavaScript 属性有一个名字和一个值，值可以是任何 JavaScript 值
* JavaScript “自有属性”指代非继承属性，即成员变量
* 重要：属性除了名字和值外，每个属性还有 3 个属性特性
1. writable 可写特性，指定是否可以设置属性的值
2. enumerate 可枚举特性，指定是否可以在 for/in 循环中返回属性的名字
3. configurable 可配置特性，指定是否可以删除属性，以及是否可以修改其他特性
* 重要：很多内置对象有只读、不可枚举、不可配置属性，默认我们创建的对象所有属性都是可写、可枚举、可配置的

### 2 创建对象
创建对象的 3 个方式：
{% highlight ruby %}
1. 对象字面量：即包含在一对花括号中的一组逗号分隔的 "名:值" 对，属性名允许使用空字符串
Note：字面量创建对象原型是 Object.prototype
let empyt = {};   // 原型是 Object.prototype
let point = {x: 1, y: 2};
let p2 = {x: point.x, y: point.y};
let book = {"main title": "abc", 
            "sub-title": "guide", 
            author: {
                "name": "tom",
            }, // , 是合法的
        };


2. new 关键字，即使用构造函数
let o = new Object(); // 创建一个空对象，与 {} 相同，以 Object.prototype 为原型
let a = new Array();  // 创建一个空数组，与 [] 相同，以 Array.prototype 为原型
let d = new Date();  // 创建一个当前时间的日期对象
let r = new Map();   // 创建一个映射对象，用于存储键/值映射

3. Object.create() 函数
3.1 原型（prototype），几乎每个 JavaScript 对象都有另一个与之关联的对象，这另一个对象被称为原型，第一个对象从这个原型继承属性。
通过对象字面量创建的所有对象都有相同的原型对象，可以通过 Object.prototype 引用这个原型对象

使用 new 和构造函数创建的对象，使用构造函数 prototype 属性的值作为它们的原型，即使用 new Object() 创建的对象，
继承自 Object.prototype，与通过 {} 创建的对象一样。类似，new Array() 创建的对象以 Array.prototype 为原型

Note：几乎所有对象都有原型，但只有少数对象有 prototype 属性。
这是有 prototype 属性的对象为所有其他对象定义了原型。

**** Object.prototype 是为数不多的没有原型的对象，因为它不继承任何属性。

多数内置构造函数和多数用户定义的构造函数的原型都继承自 Object.prototype，
例如 Date.prototype 从 Object.prototype 继承属性，
因此通过 new Date() 创建的日期对象从 Date.prototype 和 Object.prototype 继承属性。这种原型对象链接起来的序列叫原型链。

3.2 Object.create() （以指定原型来创建对象）
Object.create() 用于创建一个新对象，
**** 其第一个参数：作为新对象的原型，传入 null 可以创建一个没有原型的新对象，不过这样创建的对象不会继承任何东西，
连 toString() 方法都没有，也不能对该对象应用 + 操作符
let o1 = Object.create({x: 1, y: 2}); // o1 继承属性 x 和 y
console.log(o1.x + o1.y);     // => 3

// Note：
let o2 = Object.create(null); // o2 不继承任何属性或方法

// 如果想创建一个新对象, 类似 {} 或 new Object(), 传入 Object.prototype
let o3 = Object.create(Object.prototype);

第二个可选参数：用于描述新对象的属性，这个参数属于高级特性

Object.create() 的一个用途是防止对象被某个第三方库函数意外修改，这种情况不要直接把对象传给库函数，
而是传入一个继承自它的对象。如果函数读取这个对象属性，可以读到继承的值，而如果它设置这个对象的属性，
则修改不会影响原始对象。
let o4 = {x: "do not change this value"};
library.function(Object.create(o)); // 防止意外修改
{% endhighlight %}

### 3 查询和设置属性
* 要获得一个属性，使用 . 或 [] 操作符，左边为表达式，其值为一个对象
* 使用 . 操作符右边必须是一个命名属性的简单标识符
* 重要：使用 []时，[] 中的值必须是一个表达式，其求值结果为字符串或能转为字符串或符号的值
* 要创建或设置属性也使用 . 或 []

{% highlight ruby %}
let author = o.author;       // 获取 "author" 属性
let title = o["main title"]; // 获取 "main title" 属性

3.1 作为关联数组对象
下面两个 js 表达式的值相同
1 object.property 使用标识符访问，静态的，必须硬编码在程序中
在使用 . 访问对象的属性时，属性名是通过标识符表示的，标识符必须直接书写在 JavaScript 程序中，
它们不是一种数据类型，因此不能被程序操作

2 object["property"] 使用字符串访问，动态的，可在运行时修改
object["property"] 这看起来像是访问数组，只不过是以字符串而非数值作为索引的数组，这种数组称为关联数组
***** 非常重要：JavaScript 对象是关联数组
***** 使用 [] 更灵活
在使用 [] 这种数组表示访问对象属性时，属性名通过字符串来表示，字符串是一种 JavaScript 数组类型，
因此可以在程序运行期间修改和创建

let addr = "";
for(let i = 0; i < 4; i++) {
    addr += customer[`address${i}`] + "\n";
}
这段代码读取并拼接了customer 对象的属性 address0、address1、address2、address3
某种场景使用 [] 方式才行的通。

3.2 继承
假设要从 o 中查询属性 x，
a 如果 o 没有叫这个名字的自有属性，则会从 o 的原型对象查询 x。
b 如果原型对象也没有这个名字的自有属性，但它有自己的原型，则继续查询它的原型
这个过程一直持续直到找到属性 x 或查询到一个原型为 null 的对象
可见对象通过其 prototype 属性创建了一个用于继承属性的链条或链表

let m = {}; // m 从 Object.prototype 继承对象方法
m.x = 1;  // 现在它有了 x 属性
let p = Object.create(m);  // p 从 m 和 Object.prototype 继承属性
p.y = 2;                  // 而且 p 有一个自身属性 y
let q = Object.create(p); // q 从 p、m 和 Object.prototype 继承属性
q.z = 3;                   // 而且 q 有一个自身属性 y
let f = q.toString();      // toString() 继承自 Object.prototype

如果你对 o 的 x 属性赋值，x 是继承来的属性，那么现在这个继承的属性会被创建同名属性隐藏

如果 x 是 o 继承来的只读属性，则不允许赋值

****** JavaScript 重要特性：查询属性时会用到原型链，而设置属性时不影响原型链


*** 几乎所有对象都有原型，但大多数对象没有 prototype 属性，

一个例外：如果 o 继承了属性 x，而 x 是通过设置方法定义的访问器属性，那么就会调用该设置方法而不会再 o 上创建新属性 x。
要注意，此时会在 o 上而不是在定义该属性的原型对象上调用设置方法，因此如果整个设置方法定义了别的属性，那也会在 o 定义
同样的属性，但仍然不会修改原型链（类似 swift 继承的计算属性）

3.3 属性访问错误
如果 o 上不存在 x 属性，
a 则访问 o.x 结果为 undefined
b *** 重要：如果 o.x.title ，这样会引发错误，因为 x 为 undefined，因为 undefined 和 null 没有属性，查询它们是错误的
可以这样访问 surname = book && book.author && book.author.surname
或写成 let surname = book?.author?.surname

***** 对在 null 和 undefined 设置属性或查询属性都也会导致 TypeError

在严格模式下只要尝试设置属性失败就会抛出 TypeError 错误，在非严格模式下这些失败通常是静默失败

尝试在 o 上设置属性 p 下列情况会失败：
a o 有一个只读的自有属性 p
b o 有一个只读继承的属性 p，因为不能用同名自有属性隐藏只读继承属性
c o 没有自有属性 p，没有继承通过设置方法定义的属性 p。o 的 extensible 特性是 false，即不能扩展，不能扩展的属性无法新增这个名字的属性
{% endhighlight %}

### 4 删除属性
* delete 操作符用于从对象中移除属性，它唯一的操作数应该是一个属性访问表达式，它操作属性本身
* 重要：***** delete 只删除自有属性，不删除继承属性
* 要删除继承属性，必须从定义属性的原型对象上删除，这样做会影响继承该原型的所有对象
* 如果 delete 删除成功或没有影响（删除不存在的属性）则返回 true
* 对非属性表达式使用 delete 也返回 true，但这样无意义，例如 delete 1
* delete 不会删除 configurable 特性为 false 的属性，在严格模式下尝试删除不可配置的属性会抛出 TypeError，非严格模式下直接返回 false

{% highlight ruby %}
delete book.author;   // book 没有了 author 属性
delete book["main title"]; // book 没有了 main title 属性
console.log(book["main title"]);

delete o.x; // 删除自有属性返回 true
delete o.x; // 什么也不做 并返回 true
delete o.toString; // 什么也不做 toString 不是自有属性
delete 1         // 无意义，返回 true

// 在严格模式下：下列操作都会抛出 TypeError
delete Object.prototype;
var x = 1;
delete globalThis.x;
function h() {};
delete globalThis.h;


// 在非严格模式下删除全局对象可配置属性时，可以省略对全局对象的引用，只在 delete 后加属性名
delete x;

// 在严格模式下如果一个像 y 这样非限定标识符，delete 会抛出 SyntaxError 即必须写出完整的表达式
delete y;       // 在严格模式下，语法错误
delete globalThis.y; // 这样可以
{% endhighlight %}

### 5 测试属性
* 即检查对象是否有一个给定名字的属性
* 使用 in 操作符或 hasOwnProperty()、或 propertyIsEnumerable() 或直接查询相应属性
* 重要：in 要求左边是属性名，右边是一个对象，多使用 in
{% highlight ruby %}

console.log("x" in o1); // 返回 true o1 有 x 属性
console.log("y" in o1); // 返回 true
console.log("toString" in o1); // // 返回 true 继承了 toString 方法


// hasOwnProperty() 用于检查对象是否有给定名字的属性，对继承的属性返回 false
console.log(o1.hasOwnProperty("x"));  // true 有自有属性
console.log(o1.hasOwnProperty("toString")); // fasle toString 是继承的


// propertyIsEnumerable() 如果属性名是自有属性并且 enumerable 特性是 true，则返回 true
console.log(o1.propertyIsEnumerable("x"));  // true 有自有属性
console.log(o1.propertyIsEnumerable("toString")); // fasle toString 是继承的

// 使用 !== undefined 检查，为 undefined 说明属性不存在 或 值为 undefined
console.log(o1.x !== undefined);        // true 有属性 x
console.log(o.y !== undefined);         // true
console.log(o1.toString !== undefined);  // true 继承来的

// in 可以区分不存在的属性还是值为 undefined 的存在属性
let k = {x: undefined};
console.log(k.x !== undefined);  // false 属性 x 存在值是 undefined
console.log(k.y !== undefined);  // false 属性 y 不存在
console.log("x" in k);  // true 属性 x 存在
console.log("y" in k);  // false 属性 y 不存在
delete k.x;
console.log("x" in k);  // false 属性 x 不存在
{% endhighlight %}

### 6 枚举属性
* 对象继承的内置方法是不可枚举的，但你的代码添加给对象的属性默认是可枚举的

{% highlight ruby %}
let oo = {x: 1, y:2, z: 3};
console.log(oo.propertyIsEnumerable("toString"));
for(let p in oo) {
    console.log(p);
}
打印 x、y、z 但没有 toString


for (let p in oo) {
    if (!oo.hasOwnProperty(p)) continue; // 跳过继承属性
}

for (let p in oo) {
    if (typeof oo[p] == "function") continue; // 跳过所有方法
}
{% endhighlight %}

* 有 4 个函数可以获取所有属性的数组
1. Object.keys() 返回对象可枚举自有属性名的数组。不包括不可枚举属性、继承属性或名字是符号的属性
2. Object.getOwnPropertyNames() 与 Object.keys() 类似，返回自有属性和不可枚举自有属性数组，只有它们的名字是字符串
3. Object.getOwnPropertySymbols() 返回名字是符号的自有属性，无论是否可以枚举
4. Reflect.ownKeys() 返回所有属性名，包括可枚举和不可枚举的，已经名字是字符串或符号的

* 列出枚举的顺序，Object.keys()、Object.getOwnPropertyNames()、Object.getOwnPropertySymbols()、 Reflect.ownKeys()、JSON.stringify() 都遵循以下顺序，
另外也受限于它们要列出不可枚举属性还是列出字符串属性或符号属性
1. 先列出名字为非负整数的字符串属性，按照数值顺序从小到大。这意味着数值和类数组对象的属性会安装顺序被枚举
2. 在列出类数组索引的所有属性之后，再列出所有剩下的字符串名字（包括看起来像负数或浮点数的名字）的属性。这些属性安装 它们添加到对象的先后顺序列出。
对于在对象字面量中定义的属性，安装它们在字面量中出现的顺序列出
3. 最后名字为符号对象的属性安装它们添加到对象先后顺序列出
* 注意：如果已经有同名属性被枚举过了，甚至如果有一个同名属性是不可枚举的，那这个属性就不会被枚举


### 7 扩展属性
* 把一个对象的属性复制到另一个对象上是很常见的，可以用 Object.assign()
* Object.assign() 接收两个或多个参数，他会修改并返回第一个参数，第一个参数是目标对象，但不修改第一个参数之后的参数，它们都是来源对象，
它会把来源对象的可枚举自有属性复制到目标对象上，按照参数顺序进行复制，也就是说第一个源对象的同名属性会覆盖目标对象的属性，而第二个源对象同名属性会
覆盖第一个源对象的同名属性
* Object.assign() 以普通属性获取和设置方式复制属性，因此如果一个来源对象有获取方法或目标对象有设置方法，则它们会在复制期间被调用，但这些方法本身不会被复制
{% highlight ruby %}
o = Object.assign({}, defaults, o)
Note：或使用 ... 也可以表达对象复制和覆盖操作 o = {...defaults, ...o}

    let a = {x: 1, y: 2};
    let o = {...{}, ...a}; 
    console.log("o is", o); // o is { x: 1, y: 2 }
    
function merge(target, ...sources) {
    for (let source of sources) {
        for(let key of Object.keys(source)) {
            if (!(key in target)) { // 这里与 Object.assign() 不同
                target[key] = source[key];
            }
        }
    }
    return target;
}

{% endhighlight %}

### 8 序列化对象
* 即把对象转为字符串的过程
* JSON.stringify() 和 JSON.parse() 用于序列化和恢复 JavaScript 对象
* 重要：JSON 是 JavaScript 语法子集，可以序列化和恢复包括数组、对象、字符串、有限数值、true、false、null。
NaN、Infinity 和 -Infinity 被序列化为 null
* 日期对象会被序列化为 ISO 格式日期字符串，但 JSON.parse 会保持其字符串形式，不会恢复原始日期对象
* 函数、RegExp 和 Error 对象和 undefined 值不能被序列化或恢复
* Note：JSON.stringify() 只序列化对象的可枚举自有属性，如属性不能序列化会从结果中删除
* JSON.stringify() 和 JSON.parse() 都可接收第二个可选参数，用于自定义序列化和恢复，例如通过这个参数决定序列化那些属性，或在序列化过程中如何转换某些值

{% highlight ruby %}
let obj = {x: 1, y: {z: [false, null, ""]}};
let s = JSON.stringify(obj);
let pp = JSON.parse(s);
console.log("-------- 序列化--------------");
console.log("type is ", typeof obj, obj); // object { x: 1, y: { z: [ false, null, '' ] } }
console.log("type is ", typeof s, s);     // string {"x":1,"y":{"z":[false,null,""]}}
console.log("type is ", typeof pp, pp);   // object { x: 1, y: { z: [ false, null, '' ] } }


-------- 序列化--------------
type is  object { x: 1, y: { z: [ false, null, '' ] } }
type is  string {"x":1,"y":{"z":[false,null,""]}}
type is  object { x: 1, y: { z: [ false, null, '' ] } }
{% endhighlight %}


### 9 对象方法
* JavaScript 对象（除了显示创建为没有原型的）都从 Object.prototype 继承属性，继承的主要是方法
{% highlight ruby %}
9.1 toString() 方法
把一个对象转为字符串会调用这个方法，如使用 + 操作符拼接字符串和对象时，或把一个对象传入期望字符串参数的方法中

重新定义 toString 方法
let point1 = {x: 1, 
             y: 2,
             toString: function() {return `(${this.x}, ${this.y})`;},
            };
console.log(point1.toString()); // (1, 2)

9.2 toLocaleString() 方法
返回对象的本地化字符串表示，Object 本身没有实现 toLocaleString()，而是调用 toString()
Date 和 Number 实现了自己的 toLocaleString，尝试根据本地惯例格式化数值、日期和时间。
数组也定义了 toLocaleString 只不过是调用每个元素的 toLocaleString，

let point1 = {x: 1, 
             y: 2,
             toString: function() {return `(${this.x}, ${this.y})`;},
             toLocaleString: function() {
                return `(${this.x.toLocaleString()}, ${this.y.toLocaleString()})`;
             },
            };

console.log(point1.toString());
console.log(point1.toLocaleString());

9.3 valueOf() 方法
在需要把对象转为非字符串原始值（通常是数值）时被调用，如果在原始值上下文中使用了对象， JavaScript 会自动调用这个对象的 valueOf()。
Date 类定义的 valueOf() 可以将日期转为数值，

let point2 = {
    x: 3,
    y: 4,
    valueOf: function() { return Math.hypot(this.x, this.y);},
};

console.log(Number(point2)); // 转为数值
console.log(+point2);

9.4 toJSON() 方法
Object.prototype 实际并没有定义 toJSON()方法，但 JSON.stringify() 方法会从要序列化的对象上寻找 toJSON() 方法，
如果要序列化的对象存在这个方法就调用它，然后序列化该方法的返回值，而不是原始对象，
自定义 toJSON
let point3 = {x: 1, 
    y: 2,
    toString: function() {return `(${this.x}, ${this.y})`;},
    toJSON: function() {
       return this.toString();
    },
   };

console.log(JSON.stringify(point3)); // "(1, 2)"
{% endhighlight %}

### 10 对象字面量扩展语法
{% highlight ruby %}
10.1 简写属性（类似 Move）
如果变量 x y 保存着值，而你想创建一个有属性 x 和 y 的对应的对象，可以直接把 x 和 y 传入
let x = 1, y = 2;
let n = { x, y }; // n 自动获得 x 和 y 属性
console.log(n.x, n.y);

10.2 **** 计算的属性名
有时我们需要一个动态的属性名，比如调用一个函数返回属性名，而不能硬编码在代码中
    const PROPERTY_NAME = "p1";
    function computePropertyName() { return "p" + 2 ;};
    let p = {
        [PROPERTY_NAME]: 1,
        [computePropertyName()]: 2, // Note：在 [] 中加入任意 JavaScript 表达式，求值结果作为属性名字
    }
    console.log("p.p1 is ", p.p1, " p.p2 is ", p.p2);

10.3 符号作为属性名
ES6 以后属性名可以是字符串或符号，符号只能用于做属性名，不能使用 new 调用
使用相同字符串创建的符号依然是不同符号
第三方可以使用 Object.getOwnPropertySymbols() 找到你使用的符号，然后修改或删除你的属性，这是不安全的。

    const extension = Symbol("my extension symbol"); // 通过工厂函数创建新符号
    let o = {
        [extension]: 3,
    }
    console.log(o[extension]);
    
10.4 **** 扩展操作符
ES2018 后，可以在对象字面量中使用扩展操作符"..." 把已有对象属性复制到新对象中
但 "..." 不是真正意义上的操作符，它仅仅在对象字面量中有效
case 1
    let position = {x: 0, y: 0};
    let dimensions = {width: 100, height: 75};
    let rect = {...position, ...dimensions}; // 将 x、y、width、height 复制给 rect
    console.log(rect.x + rect.y + rect.width + rect.height);

case 2
    let o = {x: 1};
    let p = {x: 0, ...o}; 
    console.log(p.x); // p.x = 1, 对象 o 覆盖了初始值

    let q = {...o, x: 2};
    console.log(q.x);  // q.x = 2, 值 2 覆盖了对象 o 的值

case 3 扩展操作符只扩展自有属性，不扩展任何继承属性
    let o = Object.create({x: 1}); // o 继承属性 x
    let p = {...o};
    console.log(p.x); // undefined，因为 x 是继承属性

另外注意：扩展操作符，如果对象有 n 个属性，把属性扩展到另一个对象可能是 O(n) 操作，
意味着如果在循环或递归中使用 ... 可能代码变为 O(n^2) 复杂度。

10.5 简写方法
    let square = {
        area() { return this.side * this.side; }, // 简写方法
        side: 10,
    }
    console.log(square.area());

或
    const METHOD_NAME = "m";
    const symbol = Symbol();
    let weirdMethods = {
        "method With Spaces"(x) { return x + 1 ;},
        [METHOD_NAME](x) { return x + 2;},
        [symbol](x) { return x + 3},
    };
    console.log(weirdMethods["method With Spaces"](1));  // 2
    console.log(weirdMethods[METHOD_NAME](1));     // 3
    console.log(weirdMethods[symbol](1));    // 4


10.6 属性的获取方法与设置方法
JavaScript 除了数据属性，还可以定义访问器属性，一个获取方法 getter，一个设置方法 setter，
setter 的返回值会被忽略，
拥有 getter，setter 说明这是一个可读写属性
只有 getter 没有 setter 说明这是一个只读属性
没有 getter 有 setter 说明这是一个只写属性，获取它的值始终返回 undefined

语法
let o = {
  dataProp: value,
  
  get accesorProp() { return this.dataProp; },
  set accessorProp(value) { return this.dataProp = value; }
};
方法名就是属性名，即 accessorProp 就是属性名

访问器属性可以被继承
    let p = {
        x: 1.0,
        y: 2.0,

        get r() { return Math.hypot(this.x, this.y); },
        set r(value) {
            let oldValue = Math.hypot(this.x, this.y);
            let ratio = value / oldValue;
            this.x *= ratio;
            this.y *= ratio;
        },

        get theta() {return Math.atan2(this.y, this.x); }
    };
    console.log("----------p---------");

    console.log(p.r);
    console.log(p.theta);
    
    let q = Object.create(p); // q 继承自 p
    console.log(q.theta);

{% endhighlight %}
